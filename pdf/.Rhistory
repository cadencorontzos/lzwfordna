)
}
}
library(thesisdown)
library(dplyr)
library(ggplot2)
library(knitr)
library(kableExtra)
harmonic_mean <- function(corpus){
num_files <-length(unique(corpus$File.Name))
means <- corpus %>%
mutate(
comp_recip = 1/Compression.Time,
decomp_recip = 1/Decompression.Time
) %>%
summarize(
harmonic_mean_comp= num_files/sum(comp_recip),
harmonic_mean_decomp= num_files/sum(decomp_recip)
)
return(means)
}
csv_to_table <- function(filename){
df <- read.csv(filename)
knitr::kable(df, "markdown", align= 'c')
}
stats_csv <- function(filename){
df <- read.csv(filename)
knitr::kable(df, format="latex", booktabs=TRUE) %>%
kable_styling(latex_options=c("scale_down", "HOLD_position"))
}
compare_coprora <- function(array){
df <- data.frame()
ord <- 1
for(corpus_pair in array){
cp1 <- read.csv(corpus_pair[1])
cp2 <- read.csv(corpus_pair[2])
comb <- bind_rows(cp1, cp2)
means <- harmonic_mean(comb)
comb<- comb %>% summarize(
comp_throughput = sum(Original.File.Size)/sum(Compression.Time),
hm_comp = means$harmonic_mean_comp,
desc = corpus_pair[3],
order = ord,
)
ord<- ord+1
df <- bind_rows(comb, df)
}
plot1<- df %>%
ggplot(aes(x = reorder(desc, desc, order), y = comp_throughput))+
geom_col()+
labs(x="Milestone", y = "Throughput(bytes/ms)")
print(plot1)
plot2 <- df %>%
ggplot(aes(x = reorder(desc, desc, order), y = hm_comp))+
geom_col()+
labs(x="Milestone", y = "Mean Compression Time (ms)")
print(plot2)
}
csv_to_table('data/corpus_1_summary.csv')
csv_to_table('data/corpus_2_summary.csv')
stats_csv('data/stats/corpus_1_stats_fixedeof_9066eef.csv')
stats_csv('data/stats/corpus_2_stats_fixedeof_9066eef.csv')
stats_csv('data/stats/corpus_1_usingconstants_2c3f782.csv')
stats_csv('data/stats/corpus_2_usingconstants_2c3f782.csv')
stats_csv('data/stats/corpus_1_stringconcat_8963f64.csv')
stats_csv('data/stats/corpus_2_stringconcat_8963f64.csv')
stats_csv('data/stats/corpus_1_dictaccesses_34bf4e9.csv')
stats_csv('data/stats/corpus_2_dictaccesses_34bf4e9.csv')
stats_csv('data/stats/corpus_1_charstar_a12a290.csv')
stats_csv('data/stats/corpus_2_charstar_a12a290.csv')
compare_coprora(list(
c('data/stats/corpus_1_stats_fixedeof_9066eef.csv', 'data/stats/corpus_2_stats_fixedeof_9066eef.csv', 'Fixed EOF'),
c('data/stats/corpus_1_usingconstants_2c3f782.csv', 'data/stats/corpus_2_usingconstants_2c3f782.csv', 'Using constants'),
c('data/stats/corpus_1_stringconcat_8963f64.csv', 'data/stats/corpus_2_stringconcat_8963f64.csv', 'String concatenation'),
c('data/stats/corpus_1_dictaccesses_34bf4e9.csv', 'data/stats/corpus_2_dictaccesses_34bf4e9.csv', 'Excess dictionary calls'),
c('data/stats/corpus_1_charstar_a12a290.csv', 'data/stats/corpus_2_charstar_a12a290.csv', 'Character pointer')))
compare_coprora(list(
c('data/stats/corpus_1_stats_fixedeof_9066eef.csv', 'data/stats/corpus_2_stats_fixedeof_9066eef.csv', 'Fixed EOF'),
c('data/stats/corpus_1_usingconstants_2c3f782.csv', 'data/stats/corpus_2_usingconstants_2c3f782.csv', 'Using constants'),
c('data/stats/corpus_1_stringconcat_8963f64.csv', 'data/stats/corpus_2_stringconcat_8963f64.csv', 'String concatenation'),
c('data/stats/corpus_1_dictaccesses_34bf4e9.csv', 'data/stats/corpus_2_dictaccesses_34bf4e9.csv', 'Excess dictionary calls'),
c('data/stats/corpus_1_charstar_a12a290.csv', 'data/stats/corpus_2_charstar_a12a290.csv', 'Character pointer')))
harmonic_mean <- function(corpus){
num_files <-length(unique(corpus$File.Name))
means <- corpus %>%
mutate(
comp_recip = 1/Compression.Time,
decomp_recip = 1/Decompression.Time
) %>%
summarize(
harmonic_mean_comp= num_files/sum(comp_recip),
harmonic_mean_decomp= num_files/sum(decomp_recip)
)
return(means)
}
csv_to_table <- function(filename){
df <- read.csv(filename)
knitr::kable(df, "markdown", align= 'c')
}
stats_csv <- function(filename){
df <- read.csv(filename)
knitr::kable(df, format="latex", booktabs=TRUE) %>%
kable_styling(latex_options=c("scale_down", "HOLD_position"))
}
compare_coprora <- function(array){
df <- data.frame()
ord <- 1
for(corpus_pair in array){
cp1 <- read.csv(corpus_pair[1])
cp2 <- read.csv(corpus_pair[2])
comb <- bind_rows(cp1, cp2)
means <- harmonic_mean(comb)
comb<- comb %>% summarize(
comp_throughput = sum(Original.File.Size)/sum(Compression.Time),
hm_comp = means$harmonic_mean_comp,
description = corpus_pair[3],
order = ord,
)
ord<- ord+1
df <- bind_rows(comb, df)
}
plot1<- df %>%
ggplot(aes(x = reorder(description, description, order), y = comp_throughput))+
geom_col()+
labs(x="Milestone", y = "Throughput(bytes/ms)")
print(plot1)
plot2 <- df %>%
ggplot(aes(x = reorder(description, description, order), y = hm_comp))+
geom_col()+
labs(x="Milestone", y = "Mean Compression Time (ms)")
print(plot2)
}
compare_coprora(list(
c('data/stats/corpus_1_stats_fixedeof_9066eef.csv', 'data/stats/corpus_2_stats_fixedeof_9066eef.csv', 'Fixed EOF'),
c('data/stats/corpus_1_usingconstants_2c3f782.csv', 'data/stats/corpus_2_usingconstants_2c3f782.csv', 'Using constants'),
c('data/stats/corpus_1_stringconcat_8963f64.csv', 'data/stats/corpus_2_stringconcat_8963f64.csv', 'String concatenation'),
c('data/stats/corpus_1_dictaccesses_34bf4e9.csv', 'data/stats/corpus_2_dictaccesses_34bf4e9.csv', 'Excess dictionary calls'),
c('data/stats/corpus_1_charstar_a12a290.csv', 'data/stats/corpus_2_charstar_a12a290.csv', 'Character pointer')))
harmonic_mean <- function(corpus){
num_files <-length(unique(corpus$File.Name))
means <- corpus %>%
mutate(
comp_recip = 1/Compression.Time,
decomp_recip = 1/Decompression.Time
) %>%
summarize(
harmonic_mean_comp= num_files/sum(comp_recip),
harmonic_mean_decomp= num_files/sum(decomp_recip)
)
return(means)
}
csv_to_table <- function(filename){
df <- read.csv(filename)
knitr::kable(df, "markdown", align= 'c')
}
stats_csv <- function(filename){
df <- read.csv(filename)
knitr::kable(df, format="latex", booktabs=TRUE) %>%
kable_styling(latex_options=c("scale_down", "HOLD_position"))
}
compare_coprora <- function(array){
df <- data.frame()
ord <- 1
for(corpus_pair in array){
cp1 <- read.csv(corpus_pair[1])
cp2 <- read.csv(corpus_pair[2])
comb <- bind_rows(cp1, cp2)
means <- harmonic_mean(comb)
comb<- comb %>% summarize(
comp_throughput = sum(Original.File.Size)/sum(Compression.Time),
hm_comp = means$harmonic_mean_comp,
description = corpus_pair[3],
order = ord,
)
ord<- ord+1
df <- bind_rows(comb, df)
}
plot1<- df %>%
ggplot(aes(x = reorder(description, order), y = comp_throughput))+
geom_col()+
labs(x="Milestone", y = "Throughput(bytes/ms)")
print(plot1)
plot2 <- df %>%
ggplot(aes(x = reorder(description, order), y = hm_comp))+
geom_col()+
labs(x="Milestone", y = "Mean Compression Time (ms)")
print(plot2)
}
compare_coprora(list(
c('data/stats/corpus_1_stats_fixedeof_9066eef.csv', 'data/stats/corpus_2_stats_fixedeof_9066eef.csv', 'Fixed EOF'),
c('data/stats/corpus_1_usingconstants_2c3f782.csv', 'data/stats/corpus_2_usingconstants_2c3f782.csv', 'Using constants'),
c('data/stats/corpus_1_stringconcat_8963f64.csv', 'data/stats/corpus_2_stringconcat_8963f64.csv', 'String concatenation'),
c('data/stats/corpus_1_dictaccesses_34bf4e9.csv', 'data/stats/corpus_2_dictaccesses_34bf4e9.csv', 'Excess dictionary calls'),
c('data/stats/corpus_1_charstar_a12a290.csv', 'data/stats/corpus_2_charstar_a12a290.csv', 'Character pointer')))
harmonic_mean <- function(corpus){
num_files <-length(unique(corpus$File.Name))
means <- corpus %>%
mutate(
comp_recip = 1/Compression.Time,
decomp_recip = 1/Decompression.Time
) %>%
summarize(
harmonic_mean_comp= num_files/sum(comp_recip),
harmonic_mean_decomp= num_files/sum(decomp_recip)
)
return(means)
}
csv_to_table <- function(filename){
df <- read.csv(filename)
knitr::kable(df, "markdown", align= 'c')
}
stats_csv <- function(filename){
df <- read.csv(filename)
knitr::kable(df, format="latex", booktabs=TRUE) %>%
kable_styling(latex_options=c("scale_down", "HOLD_position"))
}
compare_coprora <- function(array){
df <- data.frame()
ord <- 1
for(corpus_pair in array){
cp1 <- read.csv(corpus_pair[1])
cp2 <- read.csv(corpus_pair[2])
comb <- bind_rows(cp1, cp2)
means <- harmonic_mean(comb)
comb<- comb %>% summarize(
comp_throughput = sum(Original.File.Size)/sum(Compression.Time),
hm_comp = means$harmonic_mean_comp,
description = corpus_pair[3],
order = ord,
)
ord<- ord+1
df <- bind_rows(comb, df)
}
print(df)
plot1<- df %>%
ggplot(aes(x = reorder(description, order), y = comp_throughput))+
geom_col()+
labs(x="Milestone", y = "Throughput(bytes/ms)")
print(plot1)
plot2 <- df %>%
ggplot(aes(x = reorder(description, order), y = hm_comp))+
geom_col()+
labs(x="Milestone", y = "Mean Compression Time (ms)")
print(plot2)
}
compare_coprora(list(
c('data/stats/corpus_1_stats_fixedeof_9066eef.csv', 'data/stats/corpus_2_stats_fixedeof_9066eef.csv', 'Fixed EOF'),
c('data/stats/corpus_1_usingconstants_2c3f782.csv', 'data/stats/corpus_2_usingconstants_2c3f782.csv', 'Using constants'),
c('data/stats/corpus_1_stringconcat_8963f64.csv', 'data/stats/corpus_2_stringconcat_8963f64.csv', 'String concatenation'),
c('data/stats/corpus_1_dictaccesses_34bf4e9.csv', 'data/stats/corpus_2_dictaccesses_34bf4e9.csv', 'Excess dictionary calls'),
c('data/stats/corpus_1_charstar_a12a290.csv', 'data/stats/corpus_2_charstar_a12a290.csv', 'Character pointer')))
df <- read.csv('data/stats/corpus_2_charstar_a12a290.csv')
df %>% summarize( s = sum(Compression.Time))
df %>% summarize( s = sum(Compression.Time)/ sum(Original.File.Size))
df %>% summarize( s = sum(Original.File.Size)/sum(Compression.Time))
harmonic_mean(df)
df2 <- read.csv('data/stats/corpus_1_charstar_a12a290.csv')
harmonic_mean(df2)
df3 <- bind_rows(df1,df2)
df3 <- bind_rows(df,df2)
df3
harmonic_mean(df3)
harmonic_mean(df2)
harmonic_mean(df)
letters <- c('A', 'C', 'T', 'G')
frequencies <- c(0.3, 0.2, 0.1, 0.4)
df =  data.frame(letters, frequencies)
knitr::kable(row.names = c("Letter", "Frequency"))
letters <- c('A', 'C', 'T', 'G')
frequencies <- c(0.3, 0.2, 0.1, 0.4)
df =  data.frame(letters, frequencies)
knitr::kable(df, row.names = c("Letter", "Frequency"))
letters <- c('A', 'C', 'T', 'G')
frequencies <- c(0.3, 0.2, 0.1, 0.4)
df =  data.frame(letters, frequencies)
knitr::kable(df, col.names  = c("Letter", "Frequency"))
# This chunk ensures that the thesisdown package is
# installed and loaded. This thesisdown package includes
# the template files for the thesis.
if (!require(remotes)) {
if (params$`Install needed packages for {thesisdown}`) {
install.packages("remotes", repos = "https://cran.rstudio.com")
} else {
stop(
paste('You need to run install.packages("remotes")",
"first in the Console.')
)
}
}
if (!require(thesisdown)) {
if (params$`Install needed packages for {thesisdown}`) {
remotes::install_github("ismayc/thesisdown")
} else {
stop(
paste(
"You need to run",
'remotes::install_github("ismayc/thesisdown")',
"first in the Console."
)
)
}
}
library(thesisdown)
library(Diagrammer)
# This chunk ensures that the thesisdown package is
# installed and loaded. This thesisdown package includes
# the template files for the thesis.
if (!require(remotes)) {
if (params$`Install needed packages for {thesisdown}`) {
install.packages("remotes", repos = "https://cran.rstudio.com")
} else {
stop(
paste('You need to run install.packages("remotes")",
"first in the Console.')
)
}
}
if (!require(thesisdown)) {
if (params$`Install needed packages for {thesisdown}`) {
remotes::install_github("ismayc/thesisdown")
} else {
stop(
paste(
"You need to run",
'remotes::install_github("ismayc/thesisdown")',
"first in the Console."
)
)
}
}
library(thesisdown)
library(DiagrammeR)
install.packages("DiagrammeR")
DiagrammeR.mermaid("
graph TD
Start((start)) --> A[20]
Start((start)) --> B[30]
A[20] --> C[10]
A[20] --> D[10]
B[30] --> E[15]
B[30] --> F[15]
C[10] --> G["symbol a"]
DiagrammeR.mermaid('
graph TD
Start((start)) --> A[20]
Start((start)) --> B[30]
A[20] --> C[10]
A[20] --> D[10]
B[30] --> E[15]
B[30] --> F[15]
C[10] --> G["symbol a"]
D[10] --> H["symbol b"]
E[15] --> I["symbol c"]
F[15] --> J["symbol d"]
')
mermaid('
graph TD
Start((start)) --> A[20]
Start((start)) --> B[30]
A[20] --> C[10]
A[20] --> D[10]
B[30] --> E[15]
B[30] --> F[15]
C[10] --> G["symbol a"]
D[10] --> H["symbol b"]
E[15] --> I["symbol c"]
F[15] --> J["symbol d"]
')
library(DiagrammeR)
mermaid('
graph TD
Start((start)) --> A[20]
Start((start)) --> B[30]
A[20] --> C[10]
A[20] --> D[10]
B[30] --> E[15]
B[30] --> F[15]
C[10] --> G["symbol a"]
D[10] --> H["symbol b"]
E[15] --> I["symbol c"]
F[15] --> J["symbol d"]
')
# This chunk ensures that the thesisdown package is
# installed and loaded. This thesisdown package includes
# the template files for the thesis.
if (!require(remotes)) {
if (params$`Install needed packages for {thesisdown}`) {
install.packages("remotes", repos = "https://cran.rstudio.com")
} else {
stop(
paste('You need to run install.packages("remotes")",
"first in the Console.')
)
}
}
if (!require(thesisdown)) {
if (params$`Install needed packages for {thesisdown}`) {
remotes::install_github("ismayc/thesisdown")
} else {
stop(
paste(
"You need to run",
'remotes::install_github("ismayc/thesisdown")',
"first in the Console."
)
)
}
}
library(thesisdown)
install.packages("DiagrammeR")
library(DiagrammeR)
# Set how wide the R output will go
options(width = 70)
install.packages("DiagrammeR")
# This chunk ensures that the thesisdown package is
# installed and loaded. This thesisdown package includes
# the template files for the thesis.
if (!require(remotes)) {
if (params$`Install needed packages for {thesisdown}`) {
install.packages("remotes", repos = "https://cran.rstudio.com")
} else {
stop(
paste('You need to run install.packages("remotes")",
"first in the Console.')
)
}
}
if (!require(thesisdown)) {
if (params$`Install needed packages for {thesisdown}`) {
remotes::install_github("ismayc/thesisdown")
} else {
stop(
paste(
"You need to run",
'remotes::install_github("ismayc/thesisdown")',
"first in the Console."
)
)
}
}
library(thesisdown)
install.packages("DiagrammeR")
library(DiagrammeR)
# Set how wide the R output will go
options(width = 70)
# This chunk ensures that the thesisdown package is
# installed and loaded. This thesisdown package includes
# the template files for the thesis.
if (!require(remotes)) {
if (params$`Install needed packages for {thesisdown}`) {
install.packages("remotes", repos = "https://cran.rstudio.com")
} else {
stop(
paste('You need to run install.packages("remotes")",
"first in the Console.')
)
}
}
if (!require(thesisdown)) {
if (params$`Install needed packages for {thesisdown}`) {
remotes::install_github("ismayc/thesisdown")
} else {
stop(
paste(
"You need to run",
'remotes::install_github("ismayc/thesisdown")',
"first in the Console."
)
)
}
}
library(thesisdown)
if (!require(DiagrammeR)) {
install.packages("DiagrammeR")
}
library(DiagrammeR)
# Set how wide the R output will go
options(width = 70)
# This chunk ensures that the thesisdown package is
# installed and loaded. This thesisdown package includes
# the template files for the thesis.
if (!require(remotes)) {
if (params$`Install needed packages for {thesisdown}`) {
install.packages("remotes", repos = "https://cran.rstudio.com")
} else {
stop(
paste('You need to run install.packages("remotes")",
"first in the Console.')
)
}
}
if (!require(thesisdown)) {
if (params$`Install needed packages for {thesisdown}`) {
remotes::install_github("ismayc/thesisdown")
} else {
stop(
paste(
"You need to run",
'remotes::install_github("ismayc/thesisdown")',
"first in the Console."
)
)
}
}
library(thesisdown)
if (!require(DiagrammeR)) {
install.packages("DiagrammeR")
}
library(DiagrammeR)
# Set how wide the R output will go
options(width = 70)
q()
