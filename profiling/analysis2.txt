--------------------------------------------------------------------------------
Profile data file 'callgrind.out.11727' (creator: callgrind-3.20.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 11684799128
Trigger: Program termination
Profiled target:  ./lzwencode HaHi (PID 11727, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
59,305,867,685 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                       file:function
--------------------------------------------------------------------------------
23,867,593,454 (40.24%)  ???:0x0000000000121b60 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
19,188,545,880 (32.36%)  ???:mcount [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
 1,062,519,240 ( 1.79%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   723,557,174 ( 1.22%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   536,820,682 ( 0.91%)  /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   474,940,820 ( 0.80%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   466,800,730 ( 0.79%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   452,767,070 ( 0.76%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   443,475,219 ( 0.75%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   373,452,832 ( 0.63%)  /usr/include/c++/9/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   360,651,233 ( 0.61%)  bitio.cc:BitOutput::output_bit(bool) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   308,711,416 ( 0.52%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   284,964,492 ( 0.48%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   261,217,451 ( 0.44%)  /usr/include/c++/9/bits/move.h:char const* std::addressof<char const>(char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   261,217,451 ( 0.44%)  /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char const*>::pointer_to(char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   254,297,690 ( 0.43%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   248,960,320 ( 0.42%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   245,594,610 ( 0.41%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   235,674,963 ( 0.40%)  ???:std::_Hash_bytes(void const*, unsigned long, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   216,173,466 ( 0.36%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   214,012,371 ( 0.36%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   213,771,887 ( 0.36%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::copy(char*, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   213,723,369 ( 0.36%)  /usr/include/c++/9/bits/move.h:char const* std::__addressof<char const>(char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   212,856,419 ( 0.36%)  lzw.cc:LZW::encode(std::istream&, std::ostream&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   202,280,260 ( 0.34%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   190,719,401 ( 0.32%)  bitio.cc:BitOutput::output_n_bits(int, int) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   183,403,050 ( 0.31%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   180,108,390 ( 0.30%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   178,946,141 ( 0.30%)  /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   170,347,270 ( 0.29%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   170,058,497 ( 0.29%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Equal_helper<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, true>::_S_equals(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, std::__detail::_Select1st const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   163,385,607 ( 0.28%)  /usr/include/c++/9/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   163,380,252 ( 0.28%)  /usr/include/c++/9/bits/basic_string.h:__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   155,605,320 ( 0.26%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   147,825,073 ( 0.25%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   143,813,417 ( 0.24%)  ???:0x000000000018b6e0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   143,700,894 ( 0.24%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   137,315,464 ( 0.23%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   132,264,539 ( 0.22%)  /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   132,264,539 ( 0.22%)  /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   128,899,660 ( 0.22%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   128,371,160 ( 0.22%)  ???:std::istream::get() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   122,805,186 ( 0.21%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   122,805,090 ( 0.21%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   122,801,115 ( 0.21%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   122,797,485 ( 0.21%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   122,797,395 ( 0.21%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   116,704,005 ( 0.20%)  /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   109,466,602 ( 0.18%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   108,920,168 ( 0.18%)  ???:std::istream::sentry::sentry(std::istream&, bool) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   108,690,777 ( 0.18%)  /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   108,173,876 ( 0.18%)  /usr/include/c++/9/bits/basic_string.h:std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   106,547,464 ( 0.18%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   106,427,633 ( 0.18%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
   103,121,796 ( 0.17%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    98,244,072 ( 0.17%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    94,528,313 ( 0.16%)  /usr/include/c++/9/bits/move.h:char* std::addressof<char>(char&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    94,528,313 ( 0.16%)  /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char*>::pointer_to(char&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    94,064,560 ( 0.16%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    90,051,489 ( 0.15%)  /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    86,009,473 ( 0.15%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    85,582,937 ( 0.14%)  /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    85,580,132 ( 0.14%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::compare(char const*, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    81,633,120 ( 0.14%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    80,355,649 ( 0.14%)  ???:0x0000000000184cc0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    79,954,876 ( 0.13%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    79,954,604 ( 0.13%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    77,802,670 ( 0.13%)  /usr/include/c++/9/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char>(char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    77,341,347 ( 0.13%)  /usr/include/c++/9/bits/move.h:char* std::__addressof<char>(char&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    75,251,392 ( 0.13%)  /usr/include/c++/9/bits/functional_hash.h:std::_Hash_impl::hash(void const*, unsigned long, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    73,678,554 ( 0.12%)  /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<char>::max_size() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    73,154,130 ( 0.12%)  /usr/include/c++/9/bits/alloc_traits.h:void std::__alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    70,371,387 ( 0.12%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    67,247,785 ( 0.11%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    67,247,785 ( 0.11%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    66,361,959 ( 0.11%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    66,200,292 ( 0.11%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    62,316,300 ( 0.11%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const*, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    62,242,136 ( 0.10%)  /usr/include/c++/9/bits/stl_iterator_base_types.h:std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    60,683,601 ( 0.10%)  /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_ptr() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    58,350,090 ( 0.10%)  /usr/include/c++/9/bits/stl_function.h:std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    58,350,075 ( 0.10%)  /usr/include/c++/9/bits/hashtable_policy.h:bool std::__detail::operator!=<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>(std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&, std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    57,402,710 ( 0.10%)  ???:0x0000000000097a70 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    55,020,915 ( 0.09%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    55,020,915 ( 0.09%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    54,460,308 ( 0.09%)  /usr/include/c++/9/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    54,460,070 ( 0.09%)  /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    53,336,810 ( 0.09%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    51,735,332 ( 0.09%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    50,962,260 ( 0.09%)  ???:std::ostream::put(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
    49,650,219 ( 0.08%)  /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_addr() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    47,261,478 ( 0.08%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    45,285,890 ( 0.08%)  /usr/include/c++/9/bits/alloc_traits.h:void std::__do_alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&, std::integral_constant<bool, true>) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    45,285,890 ( 0.08%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    42,790,242 ( 0.07%)  /usr/include/c++/9/utility:std::tuple_element<0ul, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    42,790,055 ( 0.07%)  /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::end() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    42,328,908 ( 0.07%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    41,489,347 ( 0.07%)  ???:free [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
    38,783,104 ( 0.07%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    35,010,198 ( 0.06%)  /usr/include/c++/9/bits/move.h:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>::type&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    35,010,198 ( 0.06%)  /usr/include/c++/9/utility:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::__pair_get<0ul>::__get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    32,847,068 ( 0.06%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    31,935,066 ( 0.05%)  ???:std::allocator<char>::~allocator() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
    31,934,544 ( 0.05%)  ???:std::allocator<char>::allocator(std::allocator<char> const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
    27,441,120 ( 0.05%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
    27,251,345 ( 0.05%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    27,233,825 ( 0.05%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    26,014,400 ( 0.04%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    25,608,134 ( 0.04%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    24,794,975 ( 0.04%)  /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    20,090,593 ( 0.03%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
    19,917,275 ( 0.03%)  /usr/include/c++/9/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_iterator_base_funcs.h
--------------------------------------------------------------------------------
Ir                  

-- line 90 ----------------------------------------
         .           	  ++__n;
         .           	}
         .                 return __n;
         .               }
         .           
         .             template<typename _RandomAccessIterator>
         .               inline _GLIBCXX14_CONSTEXPR
         .               typename iterator_traits<_RandomAccessIterator>::difference_type
54,461,897 ( 0.09%)      __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
       192 ( 0.00%)  => ???:mcount (4x)
         .                          random_access_iterator_tag)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_RandomAccessIteratorConcept<
         .           				  _RandomAccessIterator>)
15,560,542 ( 0.03%)        return __last - __first;
15,560,542 ( 0.03%)      }
         .           
         .           #if _GLIBCXX_USE_CXX11_ABI
         .             // Forward declaration because of the qualified call in distance.
         .             template<typename _Tp>
         .               ptrdiff_t
         .               __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
         .           	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
         .           	       input_iterator_tag);
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
         .              *  n may be negative.
         .              *
         .              *  For random access iterators, this uses their @c + and @c - operations
         .              *  and are constant time.  For other %iterator classes they are linear time.
         .             */
         .             template<typename _InputIterator>
         .               inline _GLIBCXX17_CONSTEXPR
         .               typename iterator_traits<_InputIterator>::difference_type
54,461,897 ( 0.09%)      distance(_InputIterator __first, _InputIterator __last)
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
         .               {
         .                 // concept requirements -- taken care of in __distance
38,901,355 ( 0.07%)        return std::__distance(__first, __last,
451,255,490 ( 0.76%)  => /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) (7,780,267x)
23,340,813 ( 0.04%)  			     std::__iterator_category(__first));
427,914,689 ( 0.72%)  => /usr/include/c++/9/bits/stl_iterator_base_types.h:std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) (7,780,267x)
15,560,542 ( 0.03%)      }
         .           
         .             template<typename _InputIterator, typename _Distance>
         .               inline _GLIBCXX14_CONSTEXPR void
         .               __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
         .                 __glibcxx_assert(__n >= 0);
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/alloc_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 89 ----------------------------------------
         .           
         .               // overload destroy for non-standard pointer types
         .               template<typename _Ptr>
         .                 static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
         .                 destroy(_Alloc& __a, _Ptr __p)
         .                 noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
         .                 { _Base_type::destroy(__a, std::__to_address(__p)); }
         .           
77,802,670 ( 0.13%)      static _Alloc _S_select_on_copy(const _Alloc& __a)
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
85,582,937 ( 0.14%)      { return _Base_type::select_on_container_copy_construction(__a); }
513,497,626 ( 0.87%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&) (7,780,267x)
         .           
         .               static void _S_on_swap(_Alloc& __a, _Alloc& __b)
         .               { std::__alloc_on_swap(__a, __b); }
         .           
         .               static constexpr bool _S_propagate_on_copy_assign()
         .               { return _Base_type::propagate_on_container_copy_assignment::value; }
         .           
         .               static constexpr bool _S_propagate_on_move_assign()
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/hashtable_policy.h
--------------------------------------------------------------------------------
Ir                   

-- line 84 ----------------------------------------
          .                 operator()(_Tp&& __x) const
          .                 { return std::forward<_Tp>(__x); }
          .             };
          .           
          .             struct _Select1st
          .             {
          .               template<typename _Tp>
          .                 auto
 27,230,154 ( 0.05%)        operator()(_Tp&& __x) const
182,831,200 ( 0.31%)  => ???:mcount (3,890,022x)
          .                 -> decltype(std::get<0>(std::forward<_Tp>(__x)))
 27,230,154 ( 0.05%)        { return std::get<0>(std::forward<_Tp>(__x)); }
482,362,734 ( 0.81%)  => /usr/include/c++/9/utility:std::tuple_element<0ul, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) (3,890,022x)
256,741,446 ( 0.43%)  => /usr/include/c++/9/bits/move.h:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>::type&) (3,890,022x)
          .             };
          .           
          .             template<typename _NodeAlloc>
          .               struct _Hashtable_alloc;
          .           
          .             // Functor recycling a pool of nodes and using allocation once the pool is
          .             // empty.
          .             template<typename _NodeAlloc>
-- line 102 ----------------------------------------
-- line 210 ----------------------------------------
          .              *  template parameter of class template _Hashtable controls whether
          .              *  nodes also store a hash code. In some cases (e.g. strings) this
          .              *  may be a performance win.
          .              */
          .             struct _Hash_node_base
          .             {
          .               _Hash_node_base* _M_nxt;
          .           
  4,474,052 ( 0.01%)      _Hash_node_base() noexcept : _M_nxt() { }
 19,116,412 ( 0.03%)  => ???:mcount (406,732x)
          .           
          .               _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
          .             };
          .           
          .             /**
          .              *  struct _Hash_node_value_base
          .              *
          .              *  Node type with the value to store.
          .              */
          .             template<typename _Value>
  4,880,772 ( 0.01%)      struct _Hash_node_value_base : _Hash_node_base
 23,590,402 ( 0.04%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (406,731x)
 19,116,361 ( 0.03%)  => ???:mcount (406,731x)
          .               {
          .                 typedef _Value value_type;
          .           
          .                 __gnu_cxx::__aligned_buffer<_Value> _M_storage;
          .           
          .                 _Value*
 33,100,146 ( 0.06%)        _M_valptr() noexcept
259,284,497 ( 0.44%)  => ???:mcount (5,516,691x)
 33,100,146 ( 0.06%)        { return _M_storage._M_ptr(); }
628,902,782 ( 1.06%)  => /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_ptr() (5,516,691x)
          .           
          .                 const _Value*
          .                 _M_valptr() const noexcept
          .                 { return _M_storage._M_ptr(); }
          .           
          .                 _Value&
 25,778,988 ( 0.04%)        _M_v() noexcept
201,935,568 ( 0.34%)  => ???:mcount (4,296,498x)
 21,482,490 ( 0.04%)        { return *_M_valptr(); }
743,294,158 ( 1.25%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (4,296,498x)
          .           
          .                 const _Value&
          .                 _M_v() const noexcept
          .                 { return *_M_valptr(); }
          .               };
          .           
          .             /**
          .              *  Primary template struct _Hash_node.
-- line 253 ----------------------------------------
-- line 256 ----------------------------------------
          .               struct _Hash_node;
          .           
          .             /**
          .              *  Specialization for nodes with caches, struct _Hash_node.
          .              *
          .              *  Base class is __detail::_Hash_node_value_base.
          .              */
          .             template<typename _Value>
  4,880,772 ( 0.01%)      struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value>
 47,587,535 ( 0.08%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_Hash_node_value_base() (406,731x)
 23,183,671 ( 0.04%)  => ???:mcount (406,731x)
          .               {
          .                 std::size_t  _M_hash_code;
          .           
          .                 _Hash_node*
 32,002,086 ( 0.05%)        _M_next() const noexcept
250,683,027 ( 0.42%)  => ???:mcount (5,333,681x)
 21,334,724 ( 0.04%)        { return static_cast<_Hash_node*>(this->_M_nxt); }
          .               };
          .           
          .             /**
          .              *  Specialization for nodes without caches, struct _Hash_node.
          .              *
          .              *  Base class is __detail::_Hash_node_value_base.
          .              */
          .             template<typename _Value>
-- line 278 ----------------------------------------
-- line 286 ----------------------------------------
          .             /// Base class for node iterators.
          .             template<typename _Value, bool _Cache_hash_code>
          .               struct _Node_iterator_base
          .               {
          .                 using __node_type = _Hash_node<_Value, _Cache_hash_code>;
          .           
          .                 __node_type*  _M_cur;
          .           
 57,307,187 ( 0.10%)        _Node_iterator_base(__node_type* __p) noexcept
384,776,831 ( 0.65%)  => ???:mcount (8,186,741x)
 49,120,446 ( 0.08%)        : _M_cur(__p) { }
          .           
          .                 void
          .                 _M_incr() noexcept
          .                 { _M_cur = _M_cur->_M_next(); }
          .               };
          .           
          .             template<typename _Value, bool _Cache_hash_code>
          .               inline bool
          .               operator==(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
          .           	       const _Node_iterator_base<_Value, _Cache_hash_code >& __y)
          .               noexcept
          .               { return __x._M_cur == __y._M_cur; }
          .           
          .             template<typename _Value, bool _Cache_hash_code>
          .               inline bool
 27,230,035 ( 0.05%)      operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
182,830,239 ( 0.31%)  => ???:mcount (3,890,005x)
          .           	       const _Node_iterator_base<_Value, _Cache_hash_code>& __y)
          .               noexcept
 31,120,040 ( 0.05%)      { return __x._M_cur != __y._M_cur; }
          .           
          .             /// Node iterators, used to iterate through all the hashtable.
          .             template<typename _Value, bool __constant_iterators, bool __cache>
          .               struct _Node_iterator
          .               : public _Node_iterator_base<_Value, __cache>
          .               {
          .               private:
          .                 using __base_type = _Node_iterator_base<_Value, __cache>;
-- line 322 ----------------------------------------
-- line 332 ----------------------------------------
          .           
          .                 using reference = typename std::conditional<__constant_iterators,
          .           						  const _Value&, _Value&>::type;
          .           
          .                 _Node_iterator() noexcept
          .                 : __base_type(0) { }
          .           
          .                 explicit
 57,307,187 ( 0.10%)        _Node_iterator(__node_type* __p) noexcept
384,776,839 ( 0.65%)  => ???:mcount (8,186,741x)
 65,493,928 ( 0.11%)        : __base_type(__p) { }
491,204,464 ( 0.83%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (8,186,741x)
          .           
          .                 reference
          .                 operator*() const noexcept
          .                 { return this->_M_cur->_M_v(); }
          .           
          .                 pointer
  2,440,386 ( 0.00%)        operator->() const noexcept
 19,116,365 ( 0.03%)  => ???:mcount (406,731x)
  2,440,386 ( 0.00%)        { return this->_M_cur->_M_valptr(); }
 70,364,467 ( 0.12%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (406,731x)
          .           
          .                 _Node_iterator&
          .                 operator++() noexcept
          .                 {
          .           	this->_M_incr();
          .           	return *this;
          .                 }
          .           
-- line 357 ----------------------------------------
-- line 423 ----------------------------------------
          .             /// into the range [0, N).
          .             struct _Mod_range_hashing
          .             {
          .               typedef std::size_t first_argument_type;
          .               typedef std::size_t second_argument_type;
          .               typedef std::size_t result_type;
          .           
          .               result_type
 62,552,344 ( 0.11%)      operator()(first_argument_type __num,
367,495,029 ( 0.62%)  => ???:mcount (7,819,043x)
          .           	       second_argument_type __den) const noexcept
 46,914,258 ( 0.08%)      { return __num % __den; }
          .             };
          .           
          .             /// Default ranged hash function H.  In principle it should be a
          .             /// function object composed from objects of type H1 and H2 such that
          .             /// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
          .             /// h1 and h2.  So instead we'll just use a tag to tell class template
          .             /// hashtable to do that composition.
          .             struct _Default_ranged_hash { };
          .           
          .             /// Default value for rehash policy.  Bucket size is (usually) the
          .             /// smallest prime that keeps the load factor small enough.
          .             struct _Prime_rehash_policy
          .             {
          .               using __has_load_factor = std::true_type;
          .           
          7 ( 0.00%)      _Prime_rehash_policy(float __z = 1.0) noexcept
         51 ( 0.00%)  => ???:mcount (1x)
          8 ( 0.00%)      : _M_max_load_factor(__z), _M_next_resize(0) { }
          .           
          .               float
          .               max_load_factor() const noexcept
          .               { return _M_max_load_factor; }
          .           
          .               // Return a bucket size no smaller than n.
          .               std::size_t
          .               _M_next_bkt(std::size_t __n) const;
-- line 458 ----------------------------------------
-- line 468 ----------------------------------------
          .               // is the new bucket count.  If not, return make_pair(false, 0).
          .               std::pair<bool, std::size_t>
          .               _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
          .           		   std::size_t __n_ins) const;
          .           
          .               typedef std::size_t _State;
          .           
          .               _State
  2,440,386 ( 0.00%)      _M_state() const
 19,116,361 ( 0.03%)  => ???:mcount (406,731x)
  1,626,924 ( 0.00%)      { return _M_next_resize; }
          .           
          .               void
          .               _M_reset() noexcept
          .               { _M_next_resize = 0; }
          .           
          .               void
          .               _M_reset(_State __state)
          .               { _M_next_resize = __state; }
-- line 485 ----------------------------------------
-- line 681 ----------------------------------------
          .                 const mapped_type&
          .                 at(const key_type& __k) const;
          .               };
          .           
          .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
          .           	   typename _H1, typename _H2, typename _Hash,
          .           	   typename _RehashPolicy, typename _Traits>
          .               auto
  4,067,320 ( 0.01%)      _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 19,116,408 ( 0.03%)  => ???:mcount (406,732x)
          .           	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
          .               operator[](const key_type& __k)
          .               -> mapped_type&
          .               {
    813,464 ( 0.00%)        __hashtable* __h = static_cast<__hashtable*>(this);
  2,440,392 ( 0.00%)        __hash_code __code = __h->_M_hash_code(__k);
217,209,272 ( 0.37%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (406,732x)
  2,847,124 ( 0.00%)        std::size_t __n = __h->_M_bucket_index(__k, __code);
124,460,012 ( 0.21%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (406,732x)
  2,847,124 ( 0.00%)        __node_type* __p = __h->_M_find_node(__n, __k, __code);
800,719,752 ( 1.35%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (406,732x)
          .           
    813,464 ( 0.00%)        if (!__p)
          .           	{
      3,072 ( 0.00%)  	  __p = __h->_M_allocate_node(std::piecewise_construct,
  1,176,944 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (256x)
     47,116 ( 0.00%)  => /usr/include/c++/9/tuple:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::tuple<void, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (256x)
          .           				      std::tuple<const key_type&>(__k),
          .           				      std::tuple<>());
      3,328 ( 0.00%)  	  return __h->_M_insert_unique_node(__n, __code, __p)->second;
    261,730 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) (256x)
     59,400 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::operator->() const (256x)
          .           	}
          .           
  1,625,904 ( 0.00%)        return __p->_M_v().second;
 93,895,960 ( 0.16%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() (406,476x)
  2,033,660 ( 0.00%)      }
          .           
          .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
          .           	   typename _H1, typename _H2, typename _Hash,
          .           	   typename _RehashPolicy, typename _Traits>
          .               auto
  4,064,750 ( 0.01%)      _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 19,104,329 ( 0.03%)  => ???:mcount (406,475x)
          .           	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
          .               operator[](key_type&& __k)
          .               -> mapped_type&
          .               {
    812,950 ( 0.00%)        __hashtable* __h = static_cast<__hashtable*>(this);
  2,438,850 ( 0.00%)        __hash_code __code = __h->_M_hash_code(__k);
218,008,454 ( 0.37%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (406,475x)
  2,845,325 ( 0.00%)        std::size_t __n = __h->_M_bucket_index(__k, __code);
124,381,354 ( 0.21%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (406,475x)
  2,845,325 ( 0.00%)        __node_type* __p = __h->_M_find_node(__n, __k, __code);
282,966,939 ( 0.48%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (406,475x)
          .           
    812,950 ( 0.00%)        if (!__p)
          .           	{
  4,471,225 ( 0.01%)  	  __p = __h->_M_allocate_node(std::piecewise_construct,
1,845,055,692 ( 3.11%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&) (406,475x)
197,140,407 ( 0.33%)  => /usr/include/c++/9/tuple:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&> std::forward_as_tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (406,475x)
  1,625,900 ( 0.00%)  				      std::forward_as_tuple(std::move(__k)),
 22,762,604 ( 0.04%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (406,475x)
          .           				      std::tuple<>());
  5,284,175 ( 0.01%)  	  return __h->_M_insert_unique_node(__n, __code, __p)->second;
510,590,670 ( 0.86%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) (406,475x)
 94,302,204 ( 0.16%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::operator->() const (406,475x)
          .           	}
          .           
          .                 return __p->_M_v().second;
  2,032,375 ( 0.00%)      }
          .           
          .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
          .           	   typename _H1, typename _H2, typename _Hash,
          .           	   typename _RehashPolicy, typename _Traits>
          .               auto
          .               _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
          .           	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
          .               at(const key_type& __k)
-- line 741 ----------------------------------------
-- line 1085 ----------------------------------------
          .              *  final) and when it is worth it (the type is empty.)
          .              */
          .             template<int _Nm, typename _Tp,
          .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
          .               struct _Hashtable_ebo_helper;
          .           
          .             /// Specialization using EBO.
          .             template<int _Nm, typename _Tp>
         12 ( 0.00%)      struct _Hashtable_ebo_helper<_Nm, _Tp, true>
        123 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::~allocator() (1x)
         51 ( 0.00%)  => ???:mcount (1x)
          .               : private _Tp
          .               {
         12 ( 0.00%)        _Hashtable_ebo_helper() = default;
        123 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::allocator() (1x)
         51 ( 0.00%)  => ???:mcount (1x)
          .           
          .                 template<typename _OtherTp>
          .           	_Hashtable_ebo_helper(_OtherTp&& __tp)
          .           	  : _Tp(std::forward<_OtherTp>(__tp))
          .           	{ }
          .           
          .                 static const _Tp&
148,494,750 ( 0.25%)        _S_cget(const _Hashtable_ebo_helper& __eboh)
221,050,968 ( 0.37%)  => ???:mcount (4,703,212x)
 74,247,375 ( 0.13%)        { return static_cast<const _Tp&>(__eboh); }
          .           
          .                 static _Tp&
  9,761,832 ( 0.02%)        _S_get(_Hashtable_ebo_helper& __eboh)
 76,466,936 ( 0.13%)  => ???:mcount (1,626,956x)
  4,880,916 ( 0.01%)        { return static_cast<_Tp&>(__eboh); }
          .               };
          .           
          .             /// Specialization not using EBO.
          .             template<int _Nm, typename _Tp>
          .               struct _Hashtable_ebo_helper<_Nm, _Tp, false>
          .               {
          .                 _Hashtable_ebo_helper() = default;
          .           
-- line 1117 ----------------------------------------
-- line 1372 ----------------------------------------
          .                 // We need the default constructor for _Hashtable default constructor.
          .                 _Hash_code_base() = default;
          .                 _Hash_code_base(const _ExtractKey& __ex,
          .           		      const _H1& __h1, const _H2& __h2,
          .           		      const _Default_ranged_hash&)
          .                 : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2) { }
          .           
          .                 __hash_code
 32,922,484 ( 0.06%)        _M_hash_code(const _Key& __k) const
221,050,976 ( 0.37%)  => ???:mcount (4,703,212x)
          .                 {
          .           	static_assert(__is_invocable<const _H1&, const _Key&>{},
          .           	    "hash function must be invocable with an argument of key type");
 37,625,696 ( 0.06%)  	return _M_h1()(__k);
1,679,561,067 ( 2.83%)  => /usr/include/c++/9/bits/basic_string.h:std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (4,703,212x)
536,166,176 ( 0.90%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const (4,703,212x)
  9,406,424 ( 0.02%)        }
          .           
          .                 std::size_t
 42,329,052 ( 0.07%)        _M_bucket_index(const _Key&, __hash_code __c,
221,051,720 ( 0.37%)  => ???:mcount (4,703,228x)
          .           		      std::size_t __n) const
 51,735,508 ( 0.09%)        { return _M_h2()(__c, __n); }
536,168,000 ( 0.90%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const (4,703,228x)
286,896,912 ( 0.48%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (4,703,228x)
          .           
          .                 std::size_t
 24,926,520 ( 0.04%)        _M_bucket_index(const __node_type* __p, std::size_t __n) const
146,443,313 ( 0.25%)  => ???:mcount (3,115,815x)
          .           	noexcept( noexcept(declval<const _H2&>()((__hash_code)0,
          .           						 (std::size_t)0)) )
 37,389,780 ( 0.06%)        { return _M_h2()(__p->_M_hash_code, __n); }
355,202,914 ( 0.60%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const (3,115,815x)
190,064,719 ( 0.32%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (3,115,815x)
          .           
          .                 void
  3,253,848 ( 0.01%)        _M_store_code(__node_type* __n, __hash_code __c) const
 19,116,361 ( 0.03%)  => ???:mcount (406,731x)
  2,440,386 ( 0.00%)        { __n->_M_hash_code = __c; }
          .           
          .                 void
          .                 _M_copy_code(__node_type* __to, const __node_type* __from) const
          .                 { __to->_M_hash_code = __from->_M_hash_code; }
          .           
          .                 void
          .                 _M_swap(_Hash_code_base& __x)
          .                 {
          .           	std::swap(_M_extract(), __x._M_extract());
          .           	std::swap(_M_h1(), __x._M_h1());
          .           	std::swap(_M_h2(), __x._M_h2());
          .                 }
          .           
          .                 const _ExtractKey&
 67,247,785 ( 0.11%)        _M_extract() const { return __ebo_extract_key::_S_cget(*this); }
342,352,364 ( 0.58%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true> const&) (6,113,435x)
287,331,449 ( 0.48%)  => ???:mcount (6,113,435x)
          .           
          .                 _ExtractKey&
        176 ( 0.00%)        _M_extract() { return __ebo_extract_key::_S_get(*this); }
        900 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>&) (16x)
        756 ( 0.00%)  => ???:mcount (16x)
          .           
          .                 const _H1&
 51,735,332 ( 0.09%)        _M_h1() const { return __ebo_h1::_S_cget(*this); }
263,379,876 ( 0.44%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) (4,703,212x)
221,050,968 ( 0.37%)  => ???:mcount (4,703,212x)
          .           
          .                 _H1&
          .                 _M_h1() { return __ebo_h1::_S_get(*this); }
          .           
          .                 const _H2&
 86,009,473 ( 0.15%)        _M_h2() const { return __ebo_h2::_S_cget(*this); }
437,866,412 ( 0.74%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true> const&) (7,819,043x)
367,495,029 ( 0.62%)  => ???:mcount (7,819,043x)
          .           
          .                 _H2&
          .                 _M_h2() { return __ebo_h2::_S_get(*this); }
          .               };
          .           
          .             /**
          .              *  Primary class template _Equal_helper.
          .              *
-- line 1435 ----------------------------------------
-- line 1440 ----------------------------------------
          .             struct _Equal_helper;
          .           
          .             /// Specialization.
          .             template<typename _Key, typename _Value, typename _ExtractKey,
          .           	   typename _Equal, typename _HashCodeType>
          .             struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
          .             {
          .               static bool
 61,134,350 ( 0.10%)      _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
287,331,449 ( 0.48%)  => ???:mcount (6,113,435x)
          .           	      const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
108,924,147 ( 0.18%)      { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
2,503,828,266 ( 4.22%)  => /usr/include/c++/9/bits/stl_function.h:std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (3,890,006x)
976,391,510 ( 1.65%)  => /usr/include/c++/9/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) const (3,890,006x)
898,591,390 ( 1.52%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() (3,890,006x)
          .             };
          .           
          .             /// Specialization.
          .             template<typename _Key, typename _Value, typename _ExtractKey,
          .           	   typename _Equal, typename _HashCodeType>
          .             struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>
          .             {
          .               static bool
-- line 1458 ----------------------------------------
-- line 1821 ----------------------------------------
          .             protected:
          .               _Hashtable_base() = default;
          .               _Hashtable_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2,
          .           		    const _Hash& __hash, const _Equal& __eq)
          .               : __hash_code_base(__ex, __h1, __h2, __hash), _EqualEBO(__eq)
          .               { }
          .           
          .               bool
 61,134,350 ( 0.10%)      _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
287,331,449 ( 0.48%)  => ???:mcount (6,113,435x)
          .               {
          .                 static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
          .           	  "key equality predicate must be invocable with two arguments of "
          .           	  "key type");
 97,814,960 ( 0.16%)        return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(),
4,836,201,112 ( 8.15%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Equal_helper<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, true>::_S_equals(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, std::__detail::_Select1st const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (6,113,435x)
696,931,598 ( 1.18%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const (6,113,435x)
696,931,598 ( 1.18%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const (6,113,435x)
          .           				     __k, __c, __n);
 24,453,740 ( 0.04%)      }
          .           
          .               void
          .               _M_swap(_Hashtable_base& __x)
          .               {
          .                 __hash_code_base::_M_swap(__x);
          .                 std::swap(_M_eq(), __x._M_eq());
          .               }
          .           
          .               const _Equal&
 67,247,785 ( 0.11%)      _M_eq() const { return _EqualEBO::_S_cget(*this); }
342,352,364 ( 0.58%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) (6,113,435x)
287,331,449 ( 0.48%)  => ???:mcount (6,113,435x)
          .           
          .               _Equal&
          .               _M_eq() { return _EqualEBO::_S_get(*this); }
          .             };
          .           
          .             /**
          .              *  struct _Equality_base.
          .              *
-- line 1854 ----------------------------------------
-- line 2009 ----------------------------------------
          .                 return true;
          .               }
          .           
          .             /**
          .              * This type deals with all allocation and keeps an allocator instance through
          .              * inheritance to benefit from EBO when possible.
          .              */
          .             template<typename _NodeAlloc>
         12 ( 0.00%)      struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
        186 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::~_Hashtable_ebo_helper() (1x)
         59 ( 0.00%)  => ???:mcount (1x)
          .               {
          .               private:
          .                 using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
          .               public:
          .                 using __node_type = typename _NodeAlloc::value_type;
          .                 using __node_alloc_type = _NodeAlloc;
          .                 // Use __gnu_cxx to benefit from _S_always_equal and al.
          .                 using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;
-- line 2025 ----------------------------------------
-- line 2028 ----------------------------------------
          .           	rebind_traits<typename __node_type::value_type>;
          .           
          .                 using __node_base = __detail::_Hash_node_base;
          .                 using __bucket_type = __node_base*;      
          .                 using __bucket_alloc_type =
          .           	__alloc_rebind<__node_alloc_type, __bucket_type>;
          .                 using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;
          .           
         12 ( 0.00%)        _Hashtable_alloc() = default;
        186 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::_Hashtable_ebo_helper() (1x)
         51 ( 0.00%)  => ???:mcount (1x)
          .                 _Hashtable_alloc(const _Hashtable_alloc&) = default;
          .                 _Hashtable_alloc(_Hashtable_alloc&&) = default;
          .           
          .                 template<typename _Alloc>
          .           	_Hashtable_alloc(_Alloc&& __a)
          .           	  : __ebo_node_alloc(std::forward<_Alloc>(__a))
          .           	{ }
          .           
          .                 __node_alloc_type&
  9,761,736 ( 0.02%)        _M_node_allocator()
 76,466,964 ( 0.13%)  => ???:mcount (1,626,956x)
  8,134,780 ( 0.01%)        { return __ebo_node_alloc::_S_get(*this); }
 91,109,540 ( 0.15%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>&) (1,626,956x)
          .           
          .                 const __node_alloc_type&
          .                 _M_node_allocator() const
          .                 { return __ebo_node_alloc::_S_cget(*this); }
          .           
          .                 template<typename... _Args>
          .           	__node_type*
          .           	_M_allocate_node(_Args&&... __args);
-- line 2055 ----------------------------------------
-- line 2071 ----------------------------------------
          .                 _M_deallocate_buckets(__bucket_type*, std::size_t __n);
          .               };
          .           
          .             // Definitions of class template _Hashtable_alloc's out-of-line member
          .             // functions.
          .             template<typename _NodeAlloc>
          .               template<typename... _Args>
          .                 typename _Hashtable_alloc<_NodeAlloc>::__node_type*
  5,287,503 ( 0.01%)        _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
     12,036 ( 0.00%)  => ???:mcount (256x)
          .                 {
  2,847,117 ( 0.00%)  	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
    100,876 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, unsigned long) (256x)
     29,192 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (256x)
  1,626,924 ( 0.00%)  	__node_type* __n = std::__to_address(__nptr);
     14,340 ( 0.00%)  => /usr/include/c++/9/bits/ptr_traits.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__to_address<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (256x)
          .           	__try
          .           	  {
  2,440,386 ( 0.00%)  	    ::new ((void*)__n) __node_type;
     47,626 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Hash_node() (256x)
     17,146 ( 0.00%)  => /usr/include/c++/9/new:operator new(unsigned long, void*) (256x)
 10,168,275 ( 0.02%)  	    __node_alloc_traits::construct(_M_node_allocator(),
    822,836 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (256x)
     29,188 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (256x)
     44,300 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (256x)
     14,340 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (256x)
     14,340 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type&) (256x)
     14,340 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (256x)
          .           					   __n->_M_valptr(),
          .           					   std::forward<_Args>(__args)...);
    813,462 ( 0.00%)  	    return __n;
          .           	  }
          .           	__catch(...)
          .           	  {
          .           	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
          .           	    __throw_exception_again;
          .           	  }
  2,847,117 ( 0.00%)        }
          .           
          .             template<typename _NodeAlloc>
          .               void
  3,253,848 ( 0.01%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
 19,116,361 ( 0.03%)  => ???:mcount (406,731x)
          .               {
  4,067,310 ( 0.01%)        __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
294,066,935 ( 0.50%)  => /usr/include/c++/9/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*) (406,731x)
 70,364,467 ( 0.12%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (406,731x)
 46,367,338 ( 0.08%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (406,731x)
  2,033,655 ( 0.00%)        _M_deallocate_node_ptr(__n);
239,157,674 ( 0.40%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
  2,033,655 ( 0.00%)      }
          .           
          .             template<typename _NodeAlloc>
          .               void
  2,847,117 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
 19,116,361 ( 0.03%)  => ???:mcount (406,731x)
          .               {
          .                 typedef typename __node_alloc_traits::pointer _Ptr;
  1,626,924 ( 0.00%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 69,957,744 ( 0.12%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>&) (406,731x)
          .                 __n->~__node_type();
  3,660,579 ( 0.01%)        __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 94,361,418 ( 0.16%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) (406,731x)
 46,367,338 ( 0.08%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (406,731x)
  1,220,193 ( 0.00%)      }
          .           
          .             template<typename _NodeAlloc>
          .               void
          7 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
         51 ( 0.00%)  => ???:mcount (1x)
          .               {
  1,220,195 ( 0.00%)        while (__n)
          .           	{
    813,462 ( 0.00%)  	  __node_type* __tmp = __n;
  1,626,924 ( 0.00%)  	  __n = __n->_M_next();
 23,183,671 ( 0.04%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (406,731x)
  2,033,655 ( 0.00%)  	  _M_deallocate_node(__tmp);
680,461,243 ( 1.15%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
          .           	}
          3 ( 0.00%)      }
          .           
          .             template<typename _NodeAlloc>
          .               typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
        176 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
        756 ( 0.00%)  => ???:mcount (16x)
          .               {
        176 ( 0.00%)        __bucket_alloc_type __alloc(_M_node_allocator());
      1,864 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > const&) (16x)
      1,848 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() (16x)
      1,828 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (16x)
          .           
         96 ( 0.00%)        auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
      7,105 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) (16x)
         64 ( 0.00%)        __bucket_type* __p = std::__to_address(__ptr);
        900 ( 0.00%)  => /usr/include/c++/9/bits/ptr_traits.h:std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) (16x)
         96 ( 0.00%)        __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
 11,235,128 ( 0.02%)  => ???:0x000000000010c450 (16x)
         32 ( 0.00%)        return __p;
        112 ( 0.00%)      }
          .           
          .             template<typename _NodeAlloc>
          .               void
        192 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
        756 ( 0.00%)  => ???:mcount (16x)
          .           							std::size_t __n)
          .               {
          .                 typedef typename __bucket_alloc_traits::pointer _Ptr;
         64 ( 0.00%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
      2,764 ( 0.00%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) (16x)
        176 ( 0.00%)        __bucket_alloc_type __alloc(_M_node_allocator());
      1,860 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > const&) (16x)
      1,844 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() (16x)
      1,828 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (16x)
         96 ( 0.00%)        __bucket_alloc_traits::deallocate(__alloc, __ptr, __n);
      3,621 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) (16x)
        128 ( 0.00%)      }
          .           
          .            ///@} hashtable-detail
          .           } // namespace __detail
          .           _GLIBCXX_END_NAMESPACE_VERSION
          .           } // namespace std
          .           
          .           #endif // _HASHTABLE_POLICY_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/ptr_traits.h
--------------------------------------------------------------------------------
Ir                   

-- line 138 ----------------------------------------
          .                   using rebind = _Up*;
          .           
          .                 /**
          .                  *  @brief  Obtain a pointer to an object
          .                  *  @param  __r  A reference to an object of type @c element_type
          .                  *  @return @c addressof(__r)
          .                 */
          .                 static _GLIBCXX20_CONSTEXPR pointer
196,483,626 ( 0.33%)        pointer_to(__make_not_void<element_type>& __r) noexcept
        756 ( 0.00%)  => ???:mcount (16x)
163,736,355 ( 0.28%)        { return std::addressof(__r); }
      1,832 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) (16x)
          .               };
          .           
          .             /// Convenience alias for rebinding pointers.
          .             template<typename _Ptr, typename _Tp>
          .               using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;
          .           
          .             template<typename _Tp>
          .               constexpr _Tp*
  2,440,482 ( 0.00%)      __to_address(_Tp* __ptr) noexcept
        756 ( 0.00%)  => ???:mcount (16x)
          .               {
          .                 static_assert(!std::is_function<_Tp>::value, "not a function pointer");
    406,747 ( 0.00%)        return __ptr;
  8,942,994 ( 0.02%)      }
 38,208,654 ( 0.06%)  => ???:mcount (812,950x)
          .           
          .           #if __cplusplus <= 201703L
          .             template<typename _Ptr>
          .               constexpr typename std::pointer_traits<_Ptr>::element_type*
          .               __to_address(const _Ptr& __ptr)
          .               { return std::__to_address(__ptr.operator->()); }
          .           #else
          .             template<typename _Ptr>
-- line 168 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/hashtable.h
--------------------------------------------------------------------------------
Ir                  

-- line 334 ----------------------------------------
         .                 // interesting in move semantic to leave hashtable with only 1 buckets
         .                 // which is not allocated so that we can have those operations noexcept
         .                 // qualified.
         .                 // Note that we can't leave hashtable with 0 bucket without adding
         .                 // numerous checks in the code to avoid 0 modulus.
         .                 __bucket_type		_M_single_bucket	= nullptr;
         .           
         .                 bool
       119 ( 0.00%)        _M_uses_single_bucket(__bucket_type* __bkts) const
       803 ( 0.00%)  => ???:mcount (17x)
       153 ( 0.00%)        { return __builtin_expect(__bkts == &_M_single_bucket, false); }
         .           
         .                 bool
         .                 _M_uses_single_bucket() const
         .                 { return _M_uses_single_bucket(_M_buckets); }
         .           
         .                 __hashtable_alloc&
         .                 _M_base_alloc() { return *this; }
         .           
         .                 __bucket_type*
       112 ( 0.00%)        _M_allocate_buckets(size_type __n)
       756 ( 0.00%)  => ???:mcount (16x)
         .                 {
        80 ( 0.00%)  	if (__builtin_expect(__n == 1, false))
         .           	  {
         .           	    _M_single_bucket = nullptr;
         .           	    return &_M_single_bucket;
         .           	  }
         .           
        96 ( 0.00%)  	return __hashtable_alloc::_M_allocate_buckets(__n);
11,250,181 ( 0.02%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_buckets(unsigned long) (16x)
        32 ( 0.00%)        }
         .           
         .                 void
       136 ( 0.00%)        _M_deallocate_buckets(__bucket_type* __bkts, size_type __n)
       803 ( 0.00%)  => ???:mcount (17x)
         .                 {
       119 ( 0.00%)  	if (_M_uses_single_bucket(__bkts))
     1,075 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const (17x)
         1 ( 0.00%)  	  return;
         .           
       112 ( 0.00%)  	__hashtable_alloc::_M_deallocate_buckets(__bkts, __n);
    13,329 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (16x)
        34 ( 0.00%)        }
         .           
         .                 void
       102 ( 0.00%)        _M_deallocate_buckets()
       807 ( 0.00%)  => ???:mcount (17x)
       187 ( 0.00%)        { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
    15,609 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (17x)
         .           
         .                 // Gets bucket begin, deals with the fact that non-empty buckets contain
         .                 // their before begin node.
         .                 __node_type*
         .                 _M_bucket_begin(size_type __bkt) const;
         .           
         .                 __node_type*
       102 ( 0.00%)        _M_begin() const
       807 ( 0.00%)  => ???:mcount (17x)
        68 ( 0.00%)        { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
         .           
         .                 // Assign *this using another _Hashtable instance. Either elements
         .                 // are copy or move depends on the _NodeGenerator.
         .                 template<typename _Ht, typename _NodeGenerator>
         .           	void
         .           	_M_assign_elements(_Ht&&, const _NodeGenerator&);
         .           
         .                 template<typename _NodeGenerator>
-- line 392 ----------------------------------------
-- line 430 ----------------------------------------
         .           	noexcept(_S_nothrow_move());
         .           
         .                 _Hashtable(_Hashtable&&, __node_alloc_type&&,
         .           		 false_type /* alloc always equal */);
         .           
         .           
         .               public:
         .                 // Constructor, destructor, assignment, swap
        31 ( 0.00%)        _Hashtable() = default;
       249 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_Hashtable_alloc() (1x)
        66 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) (1x)
        62 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (1x)
        51 ( 0.00%)  => ???:mcount (1x)
         .                 _Hashtable(size_type __bucket_hint,
         .           		 const _H1&, const _H2&, const _Hash&,
         .           		 const _Equal&, const _ExtractKey&,
         .           		 const allocator_type&);
         .           
         .                 template<typename _InputIterator>
         .           	_Hashtable(_InputIterator __first, _InputIterator __last,
         .           		   size_type __bucket_hint,
-- line 446 ----------------------------------------
-- line 536 ----------------------------------------
         .                 begin() noexcept
         .                 { return iterator(_M_begin()); }
         .           
         .                 const_iterator
         .                 begin() const noexcept
         .                 { return const_iterator(_M_begin()); }
         .           
         .                 iterator
38,668,320 ( 0.07%)        end() noexcept
201,934,568 ( 0.34%)  => ???:mcount (4,296,480x)
42,964,800 ( 0.07%)        { return iterator(nullptr); }
524,170,564 ( 0.88%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (4,296,480x)
         .           
         .                 const_iterator
         .                 end() const noexcept
         .                 { return const_iterator(nullptr); }
         .           
         .                 const_iterator
         .                 cbegin() const noexcept
         .                 { return const_iterator(_M_begin()); }
-- line 553 ----------------------------------------
-- line 663 ----------------------------------------
         .                 equal_range(const key_type& __k);
         .           
         .                 std::pair<const_iterator, const_iterator>
         .                 equal_range(const key_type& __k) const;
         .           
         .               protected:
         .                 // Bucket index computation helpers.
         .                 size_type
16,967,608 ( 0.03%)        _M_bucket_index(__node_type* __n) const noexcept
113,925,376 ( 0.19%)  => ???:mcount (2,423,944x)
21,815,496 ( 0.04%)        { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
586,594,460 ( 0.99%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const*, unsigned long) const (2,423,944x)
         .           
         .                 size_type
37,625,824 ( 0.06%)        _M_bucket_index(const key_type& __k, __hash_code __c) const
221,051,732 ( 0.37%)  => ???:mcount (4,703,228x)
42,329,052 ( 0.07%)        { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
1,138,181,192 ( 1.92%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const (4,703,228x)
         .           
         .                 // Find and insert helper functions and types
         .                 // Find the node before the one matching the criteria.
         .                 __node_base*
         .                 _M_find_before_node(size_type, const key_type&, __hash_code) const;
         .           
         .                 __node_type*
42,328,908 ( 0.07%)        _M_find_node(size_type __bkt, const key_type& __key,
221,050,976 ( 0.37%)  => ???:mcount (4,703,212x)
         .           		   __hash_code __c) const
         .                 {
32,922,484 ( 0.06%)  	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
8,046,135,264 (13.57%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (4,703,212x)
 9,406,424 ( 0.02%)  	if (__before_n)
11,670,018 ( 0.02%)  	  return static_cast<__node_type*>(__before_n->_M_nxt);
   813,206 ( 0.00%)  	return nullptr;
 9,406,424 ( 0.02%)        }
         .           
         .                 // Insert a node at the beginning of a bucket.
         .                 void
         .                 _M_insert_bucket_begin(size_type, __node_type*);
         .           
         .                 // Remove the bucket first node
         .                 void
         .                 _M_remove_bucket_begin(size_type __bkt, __node_type* __next_n,
-- line 699 ----------------------------------------
-- line 1375 ----------------------------------------
         .           	  __ht.clear();
         .           	}
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         6 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        51 ( 0.00%)  => ???:mcount (1x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               ~_Hashtable() noexcept
         .               {
         3 ( 0.00%)        clear();
715,040,947 ( 1.21%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() (1x)
         3 ( 0.00%)        _M_deallocate_buckets();
     1,008 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() (1x)
         6 ( 0.00%)      }
       257 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::~_Hashtable_alloc() (1x)
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 1397 ----------------------------------------
-- line 1439 ----------------------------------------
         .           	  = &__x._M_before_begin;
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
38,900,050 ( 0.07%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
182,830,239 ( 0.31%)  => ???:mcount (3,890,005x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               find(const key_type& __k)
         .               -> iterator
         .               {
23,340,030 ( 0.04%)        __hash_code __code = this->_M_hash_code(__k);
2,081,515,097 ( 3.51%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (3,890,005x)
27,230,035 ( 0.05%)        std::size_t __n = _M_bucket_index(__k, __code);
1,190,341,534 ( 2.01%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (3,890,005x)
27,230,035 ( 0.05%)        __node_type* __p = _M_find_node(__n, __k, __code);
7,290,047,013 (12.29%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (3,890,005x)
34,197,095 ( 0.06%)        return __p ? iterator(__p) : end();
424,990,664 ( 0.72%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (3,483,530x)
76,417,304 ( 0.13%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() (406,475x)
19,450,025 ( 0.03%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 1464 ----------------------------------------
-- line 1559 ----------------------------------------
         .           
         .             // Find the node whose key compares equal to k in the bucket n.
         .             // Return nullptr if no node is found.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
42,328,908 ( 0.07%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
221,050,968 ( 0.37%)  => ???:mcount (4,703,212x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_find_before_node(size_type __n, const key_type& __k,
         .           			__hash_code __code) const
         .               -> __node_base*
         .               {
32,922,484 ( 0.06%)        __node_base* __prev_p = _M_buckets[__n];
 9,406,424 ( 0.02%)        if (!__prev_p)
   801,824 ( 0.00%)  	return nullptr;
         .           
12,906,900 ( 0.02%)        for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 7,244,540 ( 0.01%)  	   __p = __p->_M_next())
103,234,699 ( 0.17%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (1,811,135x)
         .           	{
50,718,615 ( 0.09%)  	  if (this->_M_equals(__k, __code, __p))
6,700,798,807 (11.30%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const (6,113,435x)
 7,780,012 ( 0.01%)  	    return __prev_p;
         .           
38,210,477 ( 0.06%)  	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
678,142,494 ( 1.14%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const (2,223,418x)
126,734,830 ( 0.21%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (2,223,418x)
   412,294 ( 0.00%)  	    break;
 3,622,270 ( 0.01%)  	  __prev_p = __p;
         .           	}
   412,294 ( 0.00%)        return nullptr;
 9,406,424 ( 0.02%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
 4,067,310 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
19,116,361 ( 0.03%)  => ???:mcount (406,731x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_insert_bucket_begin(size_type __bkt, __node_type* __node)
         .               {
 3,253,848 ( 0.01%)        if (_M_buckets[__bkt])
         .           	{
         .           	  // Bucket is not empty, we just need to insert the new node
         .           	  // after the bucket before begin.
 1,855,836 ( 0.00%)  	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 1,649,632 ( 0.00%)  	  _M_buckets[__bkt]->_M_nxt = __node;
         .           	}
         .                 else
         .           	{
         .           	  // The bucket is empty, the new node is inserted at the
         .           	  // beginning of the singly-linked list and the bucket will
         .           	  // contain _M_before_begin pointer.
   802,108 ( 0.00%)  	  __node->_M_nxt = _M_before_begin._M_nxt;
   601,581 ( 0.00%)  	  _M_before_begin._M_nxt = __node;
   802,108 ( 0.00%)  	  if (__node->_M_nxt)
         .           	    // We must update former begin bucket that is pointing to
         .           	    // _M_before_begin.
 2,807,364 ( 0.00%)  	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
61,160,446 ( 0.10%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const (200,526x)
11,429,986 ( 0.02%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (200,526x)
 1,604,216 ( 0.00%)  	  _M_buckets[__bkt] = &_M_before_begin;
         .           	}
 2,646,590 ( 0.00%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 1627 ----------------------------------------
-- line 1725 ----------------------------------------
         .           	return _M_insert_multi_node(__hint._M_cur, __code, __node);
         .                 }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
 5,694,234 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
19,116,365 ( 0.03%)  => ???:mcount (406,731x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_insert_unique_node(size_type __bkt, __hash_code __code,
         .           			  __node_type* __node, size_type __n_elt)
         .               -> iterator
         .               {
 2,847,117 ( 0.00%)        const __rehash_state& __saved_state = _M_rehash_policy._M_state();
23,183,671 ( 0.04%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_M_state() const (406,731x)
 5,287,503 ( 0.01%)        std::pair<bool, std::size_t> __do_rehash
 4,070,797 ( 0.01%)  => ???:0x000000000010c580 (406,731x)
         .           	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
         .           					  __n_elt);
         .           
         .                 __try
         .           	{
 1,220,193 ( 0.00%)  	  if (__do_rehash.first)
         .           	    {
        96 ( 0.00%)  	      _M_rehash(__do_rehash.second, __saved_state);
250,986,287 ( 0.42%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&) (16x)
       272 ( 0.00%)  	      __bkt = _M_bucket_index(this->_M_extract()(__node->_M_v()), __code);
     4,900 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (16x)
     4,178 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) const (16x)
     3,854 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() (16x)
     1,832 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() (16x)
         .           	    }
         .           
 2,440,386 ( 0.00%)  	  this->_M_store_code(__node, __code);
24,810,595 ( 0.04%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) const (406,731x)
         .           
         .           	  // Always insert at the beginning of the bucket.
 2,440,386 ( 0.00%)  	  _M_insert_bucket_begin(__bkt, __node);
111,797,386 ( 0.19%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
 2,033,655 ( 0.00%)  	  ++_M_element_count;
 2,440,386 ( 0.00%)  	  return iterator(__node);
49,621,190 ( 0.08%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
         .           	}
         .                 __catch(...)
         .           	{
         .           	  this->_M_deallocate_node(__node);
         .           	  __throw_exception_again;
         .           	}
 2,847,117 ( 0.00%)      }
         .           
         .             // Insert node, in bucket bkt if no rehash (assumes no element with its key
         .             // already present). Take ownership of the node, deallocate it on exception.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
-- line 1772 ----------------------------------------
-- line 2051 ----------------------------------------
         .                 return iterator(__n);
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         6 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        51 ( 0.00%)  => ???:mcount (1x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               clear() noexcept
         .               {
         8 ( 0.00%)        this->_M_deallocate_nodes(_M_begin());
709,339,211 ( 1.20%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (1x)
        61 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const (1x)
         8 ( 0.00%)        __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 5,701,595 ( 0.01%)  => ???:0x000000000010c450 (1x)
         2 ( 0.00%)        _M_element_count = 0;
         2 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
         3 ( 0.00%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 2075 ----------------------------------------
-- line 2088 ----------------------------------------
         .           	_M_rehash_policy._M_reset(__saved_state);
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
       192 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
       756 ( 0.00%)  => ???:mcount (16x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_rehash(size_type __n, const __rehash_state& __state)
         .               {
         .                 __try
         .           	{
        80 ( 0.00%)  	  _M_rehash_aux(__n, __unique_keys());
250,985,131 ( 0.42%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) (16x)
         .           	}
         .                 __catch(...)
         .           	{
         .           	  // A failure here means that buckets allocation failed.  We only
         .           	  // have to restore hash policy previous state.
         .           	  _M_rehash_policy._M_reset(__state);
         .           	  __throw_exception_again;
         .           	}
       128 ( 0.00%)      }
         .           
         .             // Rehash when there is no equivalent elements.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
       112 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
       756 ( 0.00%)  => ???:mcount (16x)
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_rehash_aux(size_type __n, std::true_type)
         .               {
        96 ( 0.00%)        __bucket_type* __new_buckets = _M_allocate_buckets(__n);
11,251,257 ( 0.02%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long) (16x)
        64 ( 0.00%)        __node_type* __p = _M_begin();
       916 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const (16x)
        32 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
        16 ( 0.00%)        std::size_t __bbegin_bkt = 0;
 2,075,645 ( 0.00%)        while (__p)
         .           	{
 2,767,484 ( 0.00%)  	  __node_type* __next = __p->_M_next();
39,436,651 ( 0.07%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (691,871x)
 4,843,097 ( 0.01%)  	  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
167,432,786 ( 0.28%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const*, unsigned long) const (691,871x)
 4,843,097 ( 0.01%)  	  if (!__new_buckets[__bkt])
         .           	    {
 2,185,172 ( 0.00%)  	      __p->_M_nxt = _M_before_begin._M_nxt;
 1,638,879 ( 0.00%)  	      _M_before_begin._M_nxt = __p;
 3,824,051 ( 0.01%)  	      __new_buckets[__bkt] = &_M_before_begin;
 2,185,172 ( 0.00%)  	      if (__p->_M_nxt)
 3,277,668 ( 0.01%)  		__new_buckets[__bbegin_bkt] = __p;
 1,638,879 ( 0.00%)  	      __bbegin_bkt = __bkt;
         .           	    }
         .           	  else
         .           	    {
 1,164,624 ( 0.00%)  	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 1,019,046 ( 0.00%)  	      __new_buckets[__bkt]->_M_nxt = __p;
         .           	    }
 1,383,742 ( 0.00%)  	  __p = __next;
         .           	}
         .           
        48 ( 0.00%)        _M_deallocate_buckets();
    15,697 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() (16x)
        48 ( 0.00%)        _M_bucket_count = __n;
        48 ( 0.00%)        _M_buckets = __new_buckets;
        48 ( 0.00%)      }
         .           
         .             // Rehash when there can be equivalent elements, preserve their relative
         .             // order.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
-- line 2159 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/basic_string.h
--------------------------------------------------------------------------------
Ir                   

-- line 121 ----------------------------------------
          .           	using _If_sv = enable_if_t<
          .           	  __and_<is_convertible<const _Tp&, __sv_type>,
          .           		 __not_<is_convertible<const _Tp*, const basic_string*>>,
          .           		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
          .           	  _Res>;
          .           
          .                 // Allows an implicit conversion to __sv_type.
          .                 static __sv_type
         10 ( 0.00%)        _S_to_string_view(__sv_type __svt) noexcept
         51 ( 0.00%)  => ???:mcount (1x)
          4 ( 0.00%)        { return __svt; }
          .           
          .                 // Wraps a string_view by explicit conversion and thus
          .                 // allows to add an internal constructor that does not
          .                 // participate in overload resolution when a string_view
          .                 // is provided.
          .                 struct __sv_wrapper
          .                 {
         20 ( 0.00%)  	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
         51 ( 0.00%)  => ???:mcount (1x)
          .           	__sv_type _M_sv;
          .                 };
          .           
          .                 /**
          .                  *  @brief  Only internally used: Construct string from a string view
          .                  *          wrapper.
          .                  *  @param  __svw  string view wrapper.
          .                  *  @param  __a  Allocator to use.
          .                  */
          .                 explicit
         13 ( 0.00%)        basic_string(__sv_wrapper __svw, const _Alloc& __a)
         51 ( 0.00%)  => ???:mcount (1x)
         19 ( 0.00%)        : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
      1,458 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&) (1x)
         61 ( 0.00%)  => /usr/include/c++/9/string_view:std::basic_string_view<char, std::char_traits<char> >::data() const (1x)
         61 ( 0.00%)  => /usr/include/c++/9/string_view:std::basic_string_view<char, std::char_traits<char> >::size() const (1x)
          .           #endif
          .           
          .                 // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 98,244,072 ( 0.17%)        struct _Alloc_hider : allocator_type // TODO check __is_final
384,789,286 ( 0.65%)  => ???:mcount (8,187,006x)
 32,748,024 ( 0.06%)  => ???:0x000000000010c390 (8,187,006x)
          .                 {
          .           #if __cplusplus < 201103L
          .           	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
          .           	: allocator_type(__a), _M_p(__dat) { }
          .           #else
      2,080 ( 0.00%)  	_Alloc_hider(pointer __dat, const _Alloc& __a)
     12,232 ( 0.00%)  => ???:mcount (260x)
      2,860 ( 0.00%)  	: allocator_type(__a), _M_p(__dat) { }
      1,040 ( 0.00%)  => ???:0x000000000010c5c0 (260x)
          .           
 65,493,960 ( 0.11%)  	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
388,841,793 ( 0.66%)  => ???:mcount (8,186,745x)
114,614,430 ( 0.19%)  	: allocator_type(std::move(__a)), _M_p(__dat) { }
458,457,724 ( 0.77%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) (8,186,745x)
 32,746,980 ( 0.06%)  => ???:0x000000000010c5c0 (8,186,745x)
          .           #endif
          .           
          .           	pointer _M_p; // The actual data.
          .                 };
          .           
          .                 _Alloc_hider	_M_dataplus;
          .                 size_type		_M_string_length;
          .           
-- line 172 ----------------------------------------
-- line 174 ----------------------------------------
          .           
          .                 union
          .                 {
          .           	_CharT           _M_local_buf[_S_local_capacity + 1];
          .           	size_type        _M_allocated_capacity;
          .                 };
          .           
          .                 void
  2,845,409 ( 0.00%)        _M_data(pointer __p)
 19,104,905 ( 0.03%)  => ???:mcount (406,487x)
  2,438,922 ( 0.00%)        { _M_dataplus._M_p = __p; }
          .           
          .                 void
166,229,224 ( 0.28%)        _M_length(size_type __length)
1,116,110,512 ( 1.88%)  => ???:mcount (23,747,032x)
142,482,192 ( 0.24%)        { _M_string_length = __length; }
          .           
          .                 pointer
637,511,544 ( 1.07%)        _M_data() const
4,993,843,070 ( 8.42%)  => ???:mcount (106,251,924x)
425,007,696 ( 0.72%)        { return _M_dataplus._M_p; }
          .           
          .                 pointer
 51,560,898 ( 0.09%)        _M_local_data()
403,893,725 ( 0.68%)  => ???:mcount (8,593,483x)
          .                 {
          .           #if __cplusplus >= 201103L
 34,373,932 ( 0.06%)  	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
1,478,079,088 ( 2.49%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char*>::pointer_to(char&) (8,593,483x)
          .           #else
          .           	return pointer(_M_local_buf);
          .           #endif
 17,186,966 ( 0.03%)        }
          .           
          .                 const_pointer
142,482,246 ( 0.24%)        _M_local_data() const
1,116,110,931 ( 1.88%)  => ???:mcount (23,747,041x)
          .                 {
          .           #if __cplusplus >= 201103L
 94,988,164 ( 0.16%)  	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
4,084,491,064 ( 6.89%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char const*>::pointer_to(char const&) (23,747,041x)
          .           #else
          .           	return const_pointer(_M_local_buf);
          .           #endif
 47,494,082 ( 0.08%)        }
          .           
          .                 void
         63 ( 0.00%)        _M_capacity(size_type __capacity)
        435 ( 0.00%)  => ???:mcount (9x)
         54 ( 0.00%)        { _M_allocated_capacity = __capacity; }
          .           
          .                 void
233,405,540 ( 0.39%)        _M_set_length(size_type __n)
1,097,006,074 ( 1.85%)  => ???:mcount (23,340,554x)
          .                 {
116,702,770 ( 0.20%)  	_M_length(__n);
1,400,433,244 ( 2.36%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) (23,340,554x)
233,405,540 ( 0.39%)  	traits_type::assign(_M_data()[__n], _CharT());
1,423,773,798 ( 2.40%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) (23,340,554x)
1,330,411,582 ( 2.24%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (23,340,554x)
140,043,324 ( 0.24%)        }
          .           
          .                 bool
166,229,287 ( 0.28%)        _M_is_local() const
1,120,175,725 ( 1.89%)  => ???:mcount (23,747,041x)
308,711,533 ( 0.52%)        { return _M_data() == _M_local_data(); }
5,485,566,487 ( 9.25%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const (23,747,041x)
1,353,581,341 ( 2.28%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (23,747,041x)
          .           
          .                 // Create & Destroy
          .                 pointer
          .                 _M_create(size_type&, size_type);
          .           
          .                 void
 49,122,060 ( 0.08%)        _M_dispose()
384,789,478 ( 0.65%)  => ???:mcount (8,187,010x)
          .                 {
 49,122,060 ( 0.08%)  	if (!_M_is_local())
2,906,388,554 ( 4.90%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (8,187,010x)
         36 ( 0.00%)  	  _M_destroy(_M_allocated_capacity);
      2,420 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long) (6x)
 24,561,030 ( 0.04%)        }
          .           
          .                 void
         54 ( 0.00%)        _M_destroy(size_type __size) throw()
        286 ( 0.00%)  => ???:mcount (6x)
        114 ( 0.00%)        { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
      1,280 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long) (6x)
        346 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (6x)
        340 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (6x)
          .           
          .                 // _M_construct_aux is used to implement the 21.3.1 para 15 which
          .                 // requires special behaviour if _InIterator is an integral type
          .                 template<typename _InIterator>
          .                   void
 85,582,981 ( 0.14%)          _M_construct_aux(_InIterator __beg, _InIterator __end,
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
          .           			 std::__false_type)
          .           	{
          .                     typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 46,681,626 ( 0.08%)            _M_construct(__beg, __end, _Tag());
6,644,805,300 (11.20%)  => /usr/include/c++/9/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (7,780,267x)
 46,681,626 ( 0.08%)  	}
          .           
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 438. Ambiguity in the "do the right thing" clause
          .                 template<typename _Integer>
          .                   void
          .                   _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
          .           	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
          .           
          .                 void
          .                 _M_construct_aux_2(size_type __req, _CharT __c)
          .                 { _M_construct(__req, __c); }
          .           
          .                 template<typename _InIterator>
          .                   void
 62,242,168 ( 0.10%)          _M_construct(_InIterator __beg, _InIterator __end)
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
          .           	{
          .           	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 46,681,626 ( 0.08%)  	  _M_construct_aux(__beg, __end, _Integral());
7,189,423,994 (12.12%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) (7,780,267x)
 23,340,813 ( 0.04%)          }
          .           
          .                 // For Input Iterators, used in istreambuf_iterators, etc.
          .                 template<typename _InIterator>
          .                   void
          .                   _M_construct(_InIterator __beg, _InIterator __end,
          .           		     std::input_iterator_tag);
          .           
          .                 // For forward_iterators up to random_access_iterators, used for
-- line 279 ----------------------------------------
-- line 282 ----------------------------------------
          .                   void
          .                   _M_construct(_FwdIterator __beg, _FwdIterator __end,
          .           		     std::forward_iterator_tag);
          .           
          .                 void
          .                 _M_construct(size_type __req, _CharT __c);
          .           
          .                 allocator_type&
 44,241,306 ( 0.07%)        _M_get_allocator()
346,556,917 ( 0.58%)  => ???:mcount (7,373,551x)
 22,120,653 ( 0.04%)        { return _M_dataplus; }
          .           
          .                 const allocator_type&
 95,800,596 ( 0.16%)        _M_get_allocator() const
750,438,010 ( 1.27%)  => ???:mcount (15,966,766x)
 47,900,298 ( 0.08%)        { return _M_dataplus; }
          .           
          .               private:
          .           
          .           #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
          .                 // The explicit instantiations in misc-inst.cc require this due to
          .                 // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
          .                 template<typename _Tp, bool _Requires =
          .           	       !__are_same<_Tp, _CharT*>::__value
-- line 303 ----------------------------------------
-- line 316 ----------------------------------------
          .           	if (__pos > this->size())
          .           	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
          .           				       "this->size() (which is %zu)"),
          .           				   __s, __pos, this->size());
          .           	return __pos;
          .                 }
          .           
          .                 void
 81,864,870 ( 0.14%)        _M_check_length(size_type __n1, size_type __n2, const char* __s) const
384,764,901 ( 0.65%)  => ???:mcount (8,186,487x)
          .                 {
122,797,305 ( 0.21%)  	if (this->max_size() - (this->size() - __n1) < __n2)
1,899,264,988 ( 3.20%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (8,186,487x)
466,629,763 ( 0.79%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (8,186,487x)
          .           	  __throw_length_error(__N(__s));
 40,932,435 ( 0.07%)        }
          .           
          .           
          .                 // NB: _M_limit doesn't check for a bad __pos value.
          .                 size_type
          .                 _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
          .                 {
          .           	const bool __testoff =  __off < this->size() - __pos;
          .           	return __testoff ? __off : this->size() - __pos;
          .                 }
          .           
          .                 // True if _Rep and source do not overlap.
          .                 bool
  4,471,225 ( 0.01%)        _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 19,104,329 ( 0.03%)  => ???:mcount (406,475x)
          .                 {
  3,658,275 ( 0.01%)  	return (less<const _CharT*>()(__s, _M_data())
 24,794,979 ( 0.04%)  => /usr/include/c++/9/bits/stl_function.h:std::less<char const*>::operator()(char const*, char const*) const (406,475x)
 23,169,079 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (406,475x)
  1,625,900 ( 0.00%)  		|| less<const _CharT*>()(_M_data() + this->size(), __s));
  2,845,325 ( 0.00%)        }
          .           
          .                 // When __n = 1 way faster than the general multichar
          .                 // traits_type::copy/move/assign.
          .                 static void
 90,110,472 ( 0.15%)        _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
529,399,047 ( 0.89%)  => ???:mcount (11,263,809x)
          .                 {
 22,527,618 ( 0.04%)  	if (__n == 1)
  6,098,425 ( 0.01%)  	  traits_type::assign(*__d, *__s);
 74,400,789 ( 0.13%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) (1,219,685x)
          .           	else
 60,264,744 ( 0.10%)  	  traits_type::copy(__d, __s, __n);
835,114,142 ( 1.41%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::copy(char*, char const*, unsigned long) (10,044,124x)
 35,011,112 ( 0.06%)        }
          .           
          .                 static void
          .                 _S_move(_CharT* __d, const _CharT* __s, size_type __n)
          .                 {
          .           	if (__n == 1)
          .           	  traits_type::assign(*__d, *__s);
          .           	else
          .           	  traits_type::move(__d, __s, __n);
          .                 }
          .           
          .                 static void
 70,022,394 ( 0.12%)        _S_assign(_CharT* __d, size_type __n, _CharT __c)
365,675,068 ( 0.62%)  => ???:mcount (7,780,266x)
          .                 {
 15,560,532 ( 0.03%)  	if (__n == 1)
 38,901,330 ( 0.07%)  	  traits_type::assign(*__d, __c);
474,596,230 ( 0.80%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) (7,780,266x)
          .           	else
          .           	  traits_type::assign(__d, __n, __c);
 31,121,064 ( 0.05%)        }
          .           
          .                 // _S_copy_chars is a separate template to permit specialization
          .                 // to optimize for the common case of pointers as iterators.
          .                 template<class _Iterator>
          .                   static void
          .                   _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
          .                   {
          .           	  for (; __k1 != __k2; ++__k1, (void)++__p)
-- line 382 ----------------------------------------
-- line 388 ----------------------------------------
          .                 { _S_copy_chars(__p, __k1.base(), __k2.base()); }
          .           
          .                 static void
          .                 _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
          .                 _GLIBCXX_NOEXCEPT
          .                 { _S_copy_chars(__p, __k1.base(), __k2.base()); }
          .           
          .                 static void
 62,242,136 ( 0.10%)        _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
 85,582,937 ( 0.14%)        { _S_copy(__p, __k1, __k2 - __k1); }
1,136,375,465 ( 1.92%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (7,780,267x)
          .           
          .                 static void
         32 ( 0.00%)        _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
        192 ( 0.00%)  => ???:mcount (4x)
          .                 _GLIBCXX_NOEXCEPT
         44 ( 0.00%)        { _S_copy(__p, __k1, __k2 - __k1); }
        588 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (4x)
          .           
          .                 static int
          .                 _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
          .                 {
          .           	const difference_type __d = difference_type(__n1 - __n2);
          .           
          .           	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
          .           	  return __gnu_cxx::__numeric_traits<int>::__max;
-- line 410 ----------------------------------------
-- line 444 ----------------------------------------
          .                 basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
          .                 : _M_dataplus(_M_local_data(), __a)
          .                 { _M_set_length(0); }
          .           
          .                 /**
          .                  *  @brief  Construct string with copy of value of @a __str.
          .                  *  @param  __str  Source string.
          .                  */
 85,582,937 ( 0.14%)        basic_string(const basic_string& __str)
365,675,119 ( 0.62%)  => ???:mcount (7,780,267x)
          .                 : _M_dataplus(_M_local_data(),
163,385,607 ( 0.28%)  		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
1,797,241,681 ( 3.03%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (7,780,267x)
1,042,555,786 ( 1.76%)  => /usr/include/c++/9/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&) (7,780,267x)
1,003,654,451 ( 1.69%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) (7,780,267x)
435,694,956 ( 0.73%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const (7,780,267x)
 31,121,068 ( 0.05%)  => ???:0x000000000010c530 (7,780,267x)
194,506,675 ( 0.33%)        { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
7,687,361,086 (12.96%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) (7,780,267x)
886,950,446 ( 1.50%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (15,560,534x)
443,475,223 ( 0.75%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (7,780,267x)
          .           
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 2583. no way to supply an allocator for basic_string(str, pos)
          .                 /**
          .                  *  @brief  Construct string as copy of a substring.
          .                  *  @param  __str  Source string.
          .                  *  @param  __pos  Index of first character to copy from.
          .                  *  @param  __a  Allocator to use.
-- line 463 ----------------------------------------
-- line 506 ----------------------------------------
          .                  *  @brief  Construct string initialized by a character %array.
          .                  *  @param  __s  Source character %array.
          .                  *  @param  __n  Number of characters to copy.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  *
          .                  *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
          .                  *  has no special meaning.
          .                  */
         10 ( 0.00%)        basic_string(const _CharT* __s, size_type __n,
         51 ( 0.00%)  => ???:mcount (1x)
          .           		   const _Alloc& __a = _Alloc())
         10 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
        247 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (1x)
         74 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (1x)
         13 ( 0.00%)        { _M_construct(__s, __s + __n); }
      1,053 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*) (1x)
          .           
          .                 /**
          .                  *  @brief  Construct string as copy of a C string.
          .                  *  @param  __s  Source C string.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 3076. basic_string CTAD ambiguity
          .                 template<typename = _RequireAllocator<_Alloc>>
          .           #endif
         27 ( 0.00%)        basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
        153 ( 0.00%)  => ???:mcount (3x)
         30 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
        697 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (3x)
        214 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (3x)
         54 ( 0.00%)        { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
      2,959 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*) (3x)
        222 ( 0.00%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) (3x)
          .           
          .                 /**
          .                  *  @brief  Construct string as multiple characters.
          .                  *  @param  __n  Number of characters.
          .                  *  @param  __c  Character to use.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 3076. basic_string CTAD ambiguity
          .                 template<typename = _RequireAllocator<_Alloc>>
          .           #endif
      2,816 ( 0.00%)        basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
     12,036 ( 0.00%)  => ???:mcount (256x)
      2,560 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
     59,140 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (256x)
     17,924 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (256x)
      2,816 ( 0.00%)        { _M_construct(__n, __c); }
    139,528 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char) (256x)
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Move construct string.
          .                  *  @param  __str  Source string.
          .                  *
          .                  *  The newly-created string contains the exact contents of @a __str.
          .                  *  @a __str is a valid, but unspecified string.
          .                  **/
  3,658,302 ( 0.01%)        basic_string(basic_string&& __str) noexcept
 23,169,226 ( 0.04%)  => ???:mcount (406,478x)
  5,690,692 ( 0.01%)        : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 93,896,422 ( 0.16%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (406,478x)
 56,500,436 ( 0.10%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) (406,478x)
 22,762,772 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (406,478x)
 22,762,772 ( 0.04%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) (406,478x)
          .                 {
  2,032,390 ( 0.00%)  	if (__str._M_is_local())
148,364,472 ( 0.25%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (406,478x)
          .           	  {
  3,658,266 ( 0.01%)  	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 32,924,416 ( 0.06%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::copy(char*, char const*, unsigned long) (406,474x)
          .           			      _S_local_capacity + 1);
          .           	  }
          .           	else
          .           	  {
         32 ( 0.00%)  	    _M_data(__str._M_data());
        244 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (4x)
        252 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (4x)
         24 ( 0.00%)  	    _M_capacity(__str._M_allocated_capacity);
        244 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (4x)
          .           	  }
          .           
          .           	// Must use _M_length() here not _M_set_length() because
          .           	// basic_stringbuf relies on writing into unallocated capacity so
          .           	// we mess up the contents if we put a '\0' in the string.
  3,251,824 ( 0.01%)  	_M_length(__str.length());
 24,388,684 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) (406,478x)
 23,169,250 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (406,478x)
  3,251,824 ( 0.01%)  	__str._M_data(__str._M_local_data());
 93,896,422 ( 0.16%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (406,478x)
 24,388,684 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (406,478x)
  1,625,912 ( 0.00%)  	__str._M_set_length(0);
104,058,372 ( 0.18%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (406,478x)
  2,438,868 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  Construct string from an initializer %list.
          .                  *  @param  __l  std::initializer_list of characters.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .                 basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
          .                 : _M_dataplus(_M_local_data(), __a)
-- line 584 ----------------------------------------
-- line 646 ----------------------------------------
          .           
          .                 /**
          .                  *  @brief  Construct string from a string_view.
          .                  *  @param  __t  Source object convertible to string view.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .                 template<typename _Tp, typename = _If_sv<_Tp, void>>
          .           	explicit
         12 ( 0.00%)  	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
         51 ( 0.00%)  => ???:mcount (1x)
         26 ( 0.00%)  	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
      1,663 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&) (1x)
         71 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >) (1x)
         65 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >) (1x)
          .           #endif // C++17
          .           
          .                 /**
          .                  *  @brief  Destroy the string instance.
          .                  */
 49,122,036 ( 0.08%)        ~basic_string()
384,789,334 ( 0.65%)  => ???:mcount (8,187,006x)
 73,683,054 ( 0.12%)        { _M_dispose(); }
3,413,983,966 ( 5.76%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() (8,187,006x)
515,781,382 ( 0.87%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() (8,187,006x)
          .           
          .                 /**
          .                  *  @brief  Assign the value of @a str to this string.
          .                  *  @param  __str  Source string.
          .                  */
          .                 basic_string&
          .                 operator=(const basic_string& __str)
          .                 {
-- line 670 ----------------------------------------
-- line 700 ----------------------------------------
          .           	return this->assign(__str);
          .                 }
          .           
          .                 /**
          .                  *  @brief  Copy contents of @a s into this string.
          .                  *  @param  __s  Source null-terminated string.
          .                  */
          .                 basic_string&
  2,845,325 ( 0.00%)        operator=(const _CharT* __s)
 19,104,329 ( 0.03%)  => ???:mcount (406,475x)
  2,845,325 ( 0.00%)        { return this->assign(__s); }
674,342,073 ( 1.14%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*) (406,475x)
          .           
          .                 /**
          .                  *  @brief  Set value to string of length 1.
          .                  *  @param  __c  Source character.
          .                  *
          .                  *  Assigning to a character makes this string length 1 and
          .                  *  (*this)[0] == @a c.
          .                  */
-- line 717 ----------------------------------------
-- line 728 ----------------------------------------
          .                  *  @param  __str  Source string.
          .                  *
          .                  *  The contents of @a str are moved into this string (without copying).
          .                  *  @a str is a valid, but unspecified string.
          .                  **/
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 2063. Contradictory requirements for string move assignment
          .                 basic_string&
 31,351,770 ( 0.05%)        operator=(basic_string&& __str)
163,725,914 ( 0.28%)  => ???:mcount (3,483,530x)
          .                 noexcept(_Alloc_traits::_S_nothrow_move())
          .                 {
 20,901,180 ( 0.04%)  	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
1,236,653,154 ( 2.09%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (3,483,530x)
          .           	    && !_Alloc_traits::_S_always_equal()
 10,450,590 ( 0.02%)  	    && _M_get_allocator() != __str._M_get_allocator())
          .           	  {
          .           	    // Destroy existing storage before replacing allocator.
          .           	    _M_destroy(_M_allocated_capacity);
          .           	    _M_data(_M_local_data());
          .           	    _M_set_length(0);
          .           	  }
          .           	// Replace allocator if POCMA is true.
 34,835,300 ( 0.06%)  	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
640,969,532 ( 1.08%)  => /usr/include/c++/9/bits/alloc_traits.h:void std::__alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&) (3,483,530x)
390,155,368 ( 0.66%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (6,967,060x)
          .           
 17,417,650 ( 0.03%)  	if (__str._M_is_local())
1,236,653,154 ( 2.09%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (3,483,530x)
          .           	  {
          .           	    // We've always got room for a short string, just copy it.
 24,384,710 ( 0.04%)  	    if (__str.size())
198,561,214 ( 0.33%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,483,530x)
 52,252,950 ( 0.09%)  	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
198,561,214 ( 0.33%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,483,530x)
516,549,104 ( 0.87%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (3,483,530x)
397,122,428 ( 0.67%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (6,967,060x)
 31,351,770 ( 0.05%)  	    _M_set_length(__str.size());
891,783,684 ( 1.50%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (3,483,530x)
198,561,214 ( 0.33%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,483,530x)
          .           	  }
          .           	else if (_Alloc_traits::_S_propagate_on_move_assign()
          .           	    || _Alloc_traits::_S_always_equal()
          .           	    || _M_get_allocator() == __str._M_get_allocator())
          .           	  {
          .           	    // Just move the allocated pointer, our allocator can free it.
          .           	    pointer __data = nullptr;
          .           	    size_type __capacity;
-- line 764 ----------------------------------------
-- line 782 ----------------------------------------
          .           		__str._M_data(__data);
          .           		__str._M_capacity(__capacity);
          .           	      }
          .           	    else
          .           	      __str._M_data(__str._M_local_buf);
          .           	  }
          .           	else // Need to do a deep copy
          .           	  assign(__str);
 10,450,590 ( 0.02%)  	__str.clear();
1,100,795,488 ( 1.86%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear() (3,483,530x)
  3,483,530 ( 0.01%)  	return *this;
 17,417,650 ( 0.03%)        }
          .           
          .                 /**
          .                  *  @brief  Set value to string constructed from initializer %list.
          .                  *  @param  __l  std::initializer_list.
          .                  */
          .                 basic_string&
          .                 operator=(initializer_list<_CharT> __l)
          .                 {
-- line 800 ----------------------------------------
-- line 926 ----------------------------------------
          .                 { return const_reverse_iterator(this->begin()); }
          .           #endif
          .           
          .               public:
          .                 // Capacity:
          .                 ///  Returns the number of characters in the string, not including any
          .                 ///  null-termination.
          .                 size_type
280,080,438 ( 0.47%)        size() const _GLIBCXX_NOEXCEPT
2,193,963,487 ( 3.70%)  => ???:mcount (46,680,073x)
186,720,292 ( 0.31%)        { return _M_string_length; }
          .           
          .                 ///  Returns the number of characters in the string, not including any
          .                 ///  null-termination.
          .                 size_type
 77,339,796 ( 0.13%)        length() const _GLIBCXX_NOEXCEPT
605,828,426 ( 1.02%)  => ???:mcount (12,889,966x)
 51,559,864 ( 0.09%)        { return _M_string_length; }
          .           
          .                 ///  Returns the size() of the largest possible %string.
          .                 size_type
 49,118,994 ( 0.08%)        max_size() const _GLIBCXX_NOEXCEPT
384,765,465 ( 0.65%)  => ???:mcount (8,186,499x)
 73,678,491 ( 0.12%)        { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
933,260,894 ( 1.57%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&) (8,186,499x)
458,443,948 ( 0.77%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const (8,186,499x)
          .           
          .                 /**
          .                  *  @brief  Resizes the %string to the specified number of characters.
          .                  *  @param  __n  Number of characters the %string should contain.
          .                  *  @param  __c  Character to fill any new elements.
          .                  *
          .                  *  This function will %resize the %string to the specified
          .                  *  number of characters.  If the number is smaller than the
-- line 954 ----------------------------------------
-- line 989 ----------------------------------------
          .                 }
          .           #endif
          .           
          .                 /**
          .                  *  Returns the total number of characters that the %string can hold
          .                  *  before needing to allocate more memory.
          .                  */
          .                 size_type
 49,118,958 ( 0.08%)        capacity() const _GLIBCXX_NOEXCEPT
384,765,187 ( 0.65%)  => ???:mcount (8,186,493x)
          .                 {
 49,118,960 ( 0.08%)  	return _M_is_local() ? size_type(_S_local_capacity)
2,906,205,039 ( 4.90%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (8,186,493x)
  8,186,491 ( 0.01%)  	                     : _M_allocated_capacity;
 16,372,986 ( 0.03%)        }
          .           
          .                 /**
          .                  *  @brief  Attempt to preallocate enough memory for specified number of
          .                  *          characters.
          .                  *  @param  __res_arg  Number of characters required.
          .                  *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
          .                  *
          .                  *  This function attempts to reserve enough memory for the
-- line 1009 ----------------------------------------
-- line 1019 ----------------------------------------
          .                  */
          .                 void
          .                 reserve(size_type __res_arg = 0);
          .           
          .                 /**
          .                  *  Erases the string, making it empty.
          .                  */
          .                 void
 20,901,180 ( 0.04%)        clear() _GLIBCXX_NOEXCEPT
163,725,914 ( 0.28%)  => ???:mcount (3,483,530x)
 24,384,710 ( 0.04%)        { _M_set_length(0); }
891,783,684 ( 1.50%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (3,483,530x)
          .           
          .                 /**
          .                  *  Returns true if the %string is empty.  Equivalent to 
          .                  *  <code>*this == ""</code>.
          .                  */
          .                 _GLIBCXX_NODISCARD bool
          .                 empty() const _GLIBCXX_NOEXCEPT
          .                 { return this->size() == 0; }
-- line 1036 ----------------------------------------
-- line 1259 ----------------------------------------
          .                 }
          .           
          .                 /**
          .                  *  @brief  Append a C string.
          .                  *  @param __s  The C string to append.
          .                  *  @return  Reference to this string.
          .                  */
          .                 basic_string&
         14 ( 0.00%)        append(const _CharT* __s)
         98 ( 0.00%)  => ???:mcount (2x)
          .                 {
          .           	__glibcxx_requires_string(__s);
          8 ( 0.00%)  	const size_type __n = traits_type::length(__s);
        174 ( 0.00%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) (2x)
         12 ( 0.00%)  	_M_check_length(size_type(0), __n, "basic_string::append");
        744 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (2x)
         12 ( 0.00%)  	return _M_append(__s, __n);
      6,640 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (2x)
          4 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  Append multiple characters.
          .                  *  @param __n  The number of characters to append.
          .                  *  @param __c  The character to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  Appends __n copies of __c to this string.
          .                  */
          .                 basic_string&
 77,800,100 ( 0.13%)        append(size_type __n, _CharT __c)
365,660,474 ( 0.62%)  => ???:mcount (7,780,010x)
124,480,160 ( 0.21%)        { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
11,312,138,964 (19.07%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) (7,780,010x)
443,460,574 ( 0.75%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (7,780,010x)
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Append an initializer_list of characters.
          .                  *  @param __l  The initializer_list of characters to append.
          .                  *  @return  Reference to this string.
          .                  */
          .                 basic_string&
-- line 1293 ----------------------------------------
-- line 1431 ----------------------------------------
          .                  *  @param __s  The C string to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  This function sets the value of this string to the value of @a __s.
          .                  *  The data is copied, so there is no dependence on @a __s once the
          .                  *  function returns.
          .                  */
          .                 basic_string&
  3,251,800 ( 0.01%)        assign(const _CharT* __s)
 19,104,329 ( 0.03%)  => ???:mcount (406,475x)
          .                 {
          .           	__glibcxx_requires_string(__s);
          .           	return _M_replace(size_type(0), this->size(), __s,
  6,503,600 ( 0.01%)  			  traits_type::length(__s));
592,234,111 ( 1.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) (406,475x)
 28,453,254 ( 0.05%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) (406,475x)
 23,169,079 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (406,475x)
  1,625,900 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  Set value to multiple characters.
          .                  *  @param __n  Length of the resulting string.
          .                  *  @param __c  The character to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  This function sets the value of this string to @a __n copies of
-- line 1452 ----------------------------------------
-- line 2308 ----------------------------------------
          .                  *  @brief  Return const pointer to contents.
          .                  *
          .                  *  This is a pointer to internal data.  It is undefined to modify
          .                  *  the contents through the returned pointer. To get a pointer that
          .                  *  allows modifying the contents use @c &str[0] instead,
          .                  *  (or in C++17 the non-const @c str.data() overload).
          .                 */
          .                 const _CharT*
 74,899,344 ( 0.13%)        data() const _GLIBCXX_NOEXCEPT
586,711,540 ( 0.99%)  => ???:mcount (12,483,224x)
 62,416,120 ( 0.11%)        { return _M_data(); }
711,543,772 ( 1.20%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (12,483,224x)
          .           
          .           #if __cplusplus >= 201703L
          .                 /**
          .                  *  @brief  Return non-const pointer to contents.
          .                  *
          .                  *  This is a pointer to the character sequence held by the string.
          .                  *  Modifying the characters in the sequence is allowed.
          .                 */
-- line 2325 ----------------------------------------
-- line 6068 ----------------------------------------
          .             /**
          .              *  @brief  Concatenate string and character.
          .              *  @param __lhs  First string.
          .              *  @param __rhs  Last string.
          .              *  @return  New string with @a __lhs followed by @a __rhs.
          .              */
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
101,140,130 ( 0.17%)      operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
365,660,482 ( 0.62%)  => ???:mcount (7,780,010x)
          .               {
          .                 typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
          .                 typedef typename __string_type::size_type		__size_type;
 38,900,050 ( 0.07%)        __string_type __str(__lhs);
14,136,739,516 (23.84%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (7,780,010x)
 38,900,050 ( 0.07%)        __str.append(__size_type(1), __rhs);
12,323,540,272 (20.78%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char) (7,780,010x)
  7,780,010 ( 0.01%)        return __str;
 62,240,080 ( 0.10%)      }
          .           
          .           #if __cplusplus >= 201103L
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
          .           	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
          .               { return std::move(__lhs.append(__rhs)); }
          .           
-- line 6091 ----------------------------------------
-- line 6116 ----------------------------------------
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
          .               operator+(_CharT __lhs,
          .           	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
          .               { return std::move(__rhs.insert(0, 1, __lhs)); }
          .           
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
         16 ( 0.00%)      operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
        102 ( 0.00%)  => ???:mcount (2x)
          .           	      const _CharT* __rhs)
         30 ( 0.00%)      { return std::move(__lhs.append(__rhs)); }
      7,706 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*) (2x)
      3,660 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (2x)
        116 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (2x)
          .           
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
          .           	      _CharT __rhs)
          .               { return std::move(__lhs.append(1, __rhs)); }
          .           #endif
          .           
-- line 6134 ----------------------------------------
-- line 6144 ----------------------------------------
          .               operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
          .           	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
          .               _GLIBCXX_NOEXCEPT
          .               { return __lhs.compare(__rhs) == 0; }
          .           
          .             template<typename _CharT>
          .               inline
          .               typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
 35,010,054 ( 0.06%)      operator==(const basic_string<_CharT>& __lhs,
182,830,286 ( 0.31%)  => ???:mcount (3,890,006x)
          .           	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
 27,230,042 ( 0.05%)      { return (__lhs.size() == __rhs.size()
443,460,692 ( 0.75%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (7,780,012x)
 81,690,126 ( 0.14%)  	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
894,701,388 ( 1.51%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const (7,780,012x)
221,730,346 ( 0.37%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,890,006x)
356,544,926 ( 0.60%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::compare(char const*, char const*, unsigned long) (3,890,006x)
 19,450,030 ( 0.03%)  						    __lhs.size())); }
          .           
          .             /**
          .              *  @brief  Test equivalence of C string and string.
          .              *  @param __lhs  C string.
          .              *  @param __rhs  String.
          .              *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
          .              */
          .             template<typename _CharT, typename _Traits, typename _Alloc>
-- line 6164 ----------------------------------------
-- line 6729 ----------------------------------------
          .           
          .           #ifndef _GLIBCXX_COMPATIBILITY_CXX0X
          .             /// std::hash specialization for string.
          .             template<>
          .               struct hash<string>
          .               : public __hash_base<size_t, string>
          .               {
          .                 size_t
 37,625,696 ( 0.06%)        operator()(const string& __s) const noexcept
221,050,968 ( 0.37%)  => ???:mcount (4,703,212x)
 70,548,180 ( 0.12%)        { return std::_Hash_impl::hash(__s.data(), __s.length()); }
541,383,747 ( 0.91%)  => /usr/include/c++/9/bits/functional_hash.h:std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (4,703,212x)
540,869,388 ( 0.91%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const (4,703,212x)
268,083,088 ( 0.45%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (4,703,212x)
          .               };
          .           
          .             template<>
          .               struct __is_fast_hash<hash<string>> : std::false_type
          .               { };
          .           
          .           #ifdef _GLIBCXX_USE_WCHAR_T
          .             /// std::hash specialization for wstring.
-- line 6746 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 434 ----------------------------------------
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *
         .                  *  Calls @c a.allocate(n)
         .                 */
         .                 _GLIBCXX_NODISCARD static pointer
 2,847,278 ( 0.00%)        allocate(allocator_type& __a, size_type __n)
       756 ( 0.00%)  => ???:mcount (16x)
 3,254,032 ( 0.01%)        { return __a.allocate(__n); }
     6,109 ( 0.00%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) (16x)
         .           
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *  @param  __hint Aid to locality.
         .                  *  @return Memory of suitable size and alignment for @a n objects
         .                  *          of type @c value_type
-- line 451 ----------------------------------------
-- line 460 ----------------------------------------
         .                  *  @brief  Deallocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the memory to deallocate.
         .                  *  @param  __n  The number of objects space was allocated for.
         .                  *
         .                  *  Calls <tt> a.deallocate(p, n) </tt>
         .                 */
         .                 static void
 3,254,024 ( 0.01%)        deallocate(allocator_type& __a, pointer __p, size_type __n)
19,116,361 ( 0.03%)  => ???:mcount (406,731x)
 3,660,777 ( 0.01%)        { __a.deallocate(__p, __n); }
68,330,630 ( 0.12%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::deallocate(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) (406,731x)
         .           
         .                 /**
         .                  *  @brief  Construct an object of type @a _Up
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to memory of suitable size and alignment for Tp
         .                  *  @param  __args Constructor arguments.
         .                  *
         .                  *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
         .                 */
         .                 template<typename _Up, typename... _Args>
         .           	static void
 4,880,772 ( 0.01%)  	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
    12,036 ( 0.00%)  => ???:mcount (256x)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 9,761,544 ( 0.02%)  	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   758,564 ( 0.00%)  => /usr/include/c++/9/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (256x)
    14,340 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (256x)
    14,340 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (256x)
    14,340 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type&) (256x)
         .           
         .                 /**
         .                  *  @brief  Destroy an object of type @a _Up
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the object to destroy
         .                  *
         .                  *  Calls @c __a.destroy(__p).
         .                 */
         .                 template<typename _Up>
         .           	static void
 2,847,117 ( 0.00%)  	destroy(allocator_type& __a, _Up* __p)
19,116,361 ( 0.03%)  => ???:mcount (406,731x)
         .           	noexcept(noexcept(__a.destroy(__p)))
 3,253,848 ( 0.01%)  	{ __a.destroy(__p); }
268,849,609 ( 0.45%)  => /usr/include/c++/9/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*) (406,731x)
         .           
         .                 /**
         .                  *  @brief  The maximum supported allocation size
         .                  *  @param  __a  An allocator.
         .                  *  @return @c __a.max_size()
         .                 */
         .                 static size_type
49,118,994 ( 0.08%)        max_size(const allocator_type& __a) noexcept
384,765,457 ( 0.65%)  => ???:mcount (8,186,499x)
40,932,495 ( 0.07%)        { return __a.max_size(); }
458,443,948 ( 0.77%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<char>::max_size() const (8,186,499x)
         .           
         .                 /**
         .                  *  @brief  Obtain an allocator to use when copying a container.
         .                  *  @param  __rhs  An allocator.
         .                  *  @return @c __rhs
         .                 */
         .                 static allocator_type
54,461,869 ( 0.09%)        select_on_container_copy_construction(const allocator_type& __rhs)
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
62,242,136 ( 0.10%)        { return __rhs; }
31,121,068 ( 0.05%)  => ???:0x000000000010c460 (7,780,267x)
         .               };
         .           
         .           
         .             template<typename _Alloc>
         .               inline void
         .               __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
         .               { __one = __two; }
         .           
-- line 522 ----------------------------------------
-- line 536 ----------------------------------------
         .             template<typename _Alloc>
         .               inline _Alloc __alloc_on_copy(const _Alloc& __a)
         .               {
         .                 typedef allocator_traits<_Alloc> __traits;
         .                 return __traits::select_on_container_copy_construction(__a);
         .               }
         .           
         .             template<typename _Alloc>
24,384,710 ( 0.04%)      inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
163,725,914 ( 0.28%)  => ???:mcount (3,483,530x)
20,901,180 ( 0.04%)      { __one = std::move(__two); }
195,077,684 ( 0.33%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) (3,483,530x)
         .           
         .             template<typename _Alloc>
         .               inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
         .               { }
         .           
         .             template<typename _Alloc>
34,835,300 ( 0.06%)      inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
163,725,914 ( 0.28%)  => ???:mcount (3,483,530x)
         .               {
         .                 typedef allocator_traits<_Alloc> __traits;
         .                 typedef typename __traits::propagate_on_container_move_assignment __pocma;
17,417,650 ( 0.03%)        __do_alloc_on_move(__one, __two, __pocma());
404,089,488 ( 0.68%)  => /usr/include/c++/9/bits/alloc_traits.h:void std::__do_alloc_on_move<std::allocator<char> >(std::allocator<char>&, std::allocator<char>&, std::integral_constant<bool, true>) (3,483,530x)
20,901,180 ( 0.04%)      }
         .           
         .             template<typename _Alloc>
         .               inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
         .               {
         .                 using std::swap;
         .                 swap(__one, __two);
         .               }
         .           
-- line 565 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/unordered_map.h
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .              *
         .              *  Base is _Hashtable, dispatched at compile time via template
         .              *  alias __umap_hashtable.
         .              */
         .             template<typename _Key, typename _Tp,
         .           	   typename _Hash = hash<_Key>,
         .           	   typename _Pred = equal_to<_Key>,
         .           	   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
        12 ( 0.00%)      class unordered_map
715,042,281 ( 1.21%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() (1x)
        51 ( 0.00%)  => ???:mcount (1x)
         .               {
         .                 typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;
         .                 _Hashtable _M_h;
         .           
         .               public:
         .                 // typedefs:
         .                 ///@{
         .                 /// Public typedefs.
-- line 110 ----------------------------------------
-- line 133 ----------------------------------------
         .           #if __cplusplus > 201402L
         .                 using node_type = typename _Hashtable::node_type;
         .                 using insert_return_type = typename _Hashtable::insert_return_type;
         .           #endif
         .           
         .                 //construct/destroy/copy
         .           
         .                 /// Default constructor.
        12 ( 0.00%)        unordered_map() = default;
       459 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() (1x)
        51 ( 0.00%)  => ???:mcount (1x)
         .           
         .                 /**
         .                  *  @brief  Default constructor creates no elements.
         .                  *  @param __n  Minimal initial number of buckets.
         .                  *  @param __hf  A hash functor.
         .                  *  @param __eql  A key equality functor.
         .                  *  @param __a  An allocator object.
         .                  */
-- line 149 ----------------------------------------
-- line 339 ----------------------------------------
         .                 { return _M_h.begin(); }
         .                 ///@}
         .           
         .                 /**
         .                  *  Returns a read/write iterator that points one past the last element in
         .                  *  the %unordered_map.
         .                  */
         .                 iterator
23,340,030 ( 0.04%)        end() noexcept
182,830,239 ( 0.31%)  => ???:mcount (3,890,005x)
19,450,025 ( 0.03%)        { return _M_h.end(); }
731,320,948 ( 1.23%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() (3,890,005x)
         .           
         .                 ///@{
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points one past the last
         .                  *  element in the %unordered_map.
         .                  */
         .                 const_iterator
         .                 end() const noexcept
-- line 356 ----------------------------------------
-- line 913 ----------------------------------------
         .                  *           found.
         .                  *
         .                  *  This function takes a key and tries to locate the element with which
         .                  *  the key matches.  If successful the function returns an iterator
         .                  *  pointing to the sought after element.  If unsuccessful it returns the
         .                  *  past-the-end ( @c end() ) iterator.
         .                  */
         .                 iterator
27,230,035 ( 0.05%)        find(const key_type& __x)
182,830,239 ( 0.31%)  => ???:mcount (3,890,005x)
27,230,035 ( 0.05%)        { return _M_h.find(__x); }
11,416,489,121 (19.25%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,005x)
         .           
         .                 const_iterator
         .                 find(const key_type& __x) const
         .                 { return _M_h.find(__x); }
         .                 ///@}
         .           
         .                 /**
         .                  *  @brief  Finds the number of elements.
-- line 930 ----------------------------------------
-- line 977 ----------------------------------------
         .                  *  Allows for easy lookup with the subscript ( @c [] )operator.  Returns
         .                  *  data associated with the key specified in subscript.  If the key does
         .                  *  not exist, a pair with that key is created using default values, which
         .                  *  is then returned.
         .                  *
         .                  *  Lookup requires constant time.
         .                  */
         .                 mapped_type&
 2,847,124 ( 0.00%)        operator[](const key_type& __k)
19,116,416 ( 0.03%)  => ???:mcount (406,732x)
 2,847,124 ( 0.00%)        { return _M_h[__k]; }
1,274,441,446 ( 2.15%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,732x)
         .           
         .                 mapped_type&
 3,251,800 ( 0.01%)        operator[](key_type&& __k)
19,104,329 ( 0.03%)  => ???:mcount (406,475x)
 4,471,225 ( 0.01%)        { return _M_h[std::move(__k)]; }
3,341,546,478 ( 5.63%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (406,475x)
22,762,604 ( 0.04%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (406,475x)
         .                 ///@}
         .           
         .                 ///@{
         .                 /**
         .                  *  @brief  Access to %unordered_map data.
         .                  *  @param  __k  The key for which data should be retrieved.
         .                  *  @return  A reference to the data whose key is equal to @a __k, if
         .                  *           such a data is present in the %unordered_map.
-- line 998 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/type_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 144 ----------------------------------------
         .           
         .             template<>
         .               struct __remove_unsigned<wchar_t>;
         .           
         .           
         .             // For use in string and vstring.
         .             template<typename _Type>
         .               inline bool
46,681,626 ( 0.08%)      __is_null_pointer(_Type* __ptr)
       192 ( 0.00%)  => ???:mcount (4x)
31,121,084 ( 0.05%)      { return __ptr == 0; }
         .           
         .             template<typename _Type>
         .               inline bool
         .               __is_null_pointer(_Type)
         .               { return false; }
         .           
         .           #if __cplusplus >= 201103L
         .             inline bool
-- line 161 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: bitio.cc
--------------------------------------------------------------------------------
Ir                   

-- line 22 ----------------------------------------
          .           int BitInput::read_n_bits(int n){
          .               int b = 0;
          .               for (int i= n-1; i >=0; i--){
          .                   b |= (input_bit()<<i);
          .               }
          .               return b;
          .           }
          .           
         17 ( 0.00%)  BitOutput::BitOutput(std::ostream& os): output_stream(os), index(CHAR_BIT-1), buffer(0) {}
         51 ( 0.00%)  => ???:mcount (1x)
          .           
          .           // if there is anything in buffer, we need to output upon destruction
          6 ( 0.00%)  BitOutput::~BitOutput(){
         51 ( 0.00%)  => ???:mcount (1x)
         12 ( 0.00%)      if(output_stream){
          6 ( 0.00%)  => ???:0x000000000010c570 (1x)
          4 ( 0.00%)          if(index<CHAR_BIT-1){
          8 ( 0.00%)              output_stream.put(buffer);
         64 ( 0.00%)  => ???:0x000000000010c370 (1x)
          .                   }
          .               }
          3 ( 0.00%)   }
          .           
          .           
 83,629,272 ( 0.14%)  void BitOutput::output_bit(bool bit){
491,321,985 ( 0.83%)  => ???:mcount (10,453,659x)
          .           
 41,814,636 ( 0.07%)      if (index == CHAR_BIT-1){
  2,613,416 ( 0.00%)          buffer = 0;
          .               }
          .           
          .               // we are going left to right, so save the bit then decrement the index
146,351,226 ( 0.25%)      buffer |= (bit<<index--);
          .           
          .               // if we've been given a whole byte, output it then start a new buffer
 41,814,636 ( 0.07%)      if (index == -1){
 10,453,656 ( 0.02%)          output_stream.put(buffer);
 83,656,749 ( 0.14%)  => ???:0x000000000010c370 (1,306,707x)
  2,613,414 ( 0.00%)          index = CHAR_BIT-1;
          .               }
 31,360,977 ( 0.05%)  }
          .           
  6,503,616 ( 0.01%)  void BitOutput::output_n_bits(int bits, int n){
 38,208,760 ( 0.06%)  => ???:mcount (812,952x)
 45,879,388 ( 0.08%)      for (int i = n-1; i>=0; --i){
135,897,541 ( 0.23%)          output_bit((bits>>i)&1);
935,629,725 ( 1.58%)  => bitio.cc:BitOutput::output_bit(bool) (10,453,657x)
          .               }
  2,438,879 ( 0.00%)  }
        172 ( 0.00%)  => bitio.cc:__static_initialization_and_destruction_0(int, int) (1x)
         59 ( 0.00%)  => ???:mcount (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_iterator_base_types.h
--------------------------------------------------------------------------------
Ir                  

-- line 197 ----------------------------------------
         .           
         .             /**
         .              *  This function is not a part of the C++ standard but is syntactic
         .              *  sugar for internal library use only.
         .             */
         .             template<typename _Iter>
         .               inline _GLIBCXX_CONSTEXPR
         .               typename iterator_traits<_Iter>::iterator_category
46,681,626 ( 0.08%)      __iterator_category(const _Iter&)
365,672,553 ( 0.62%)  => ???:mcount (7,780,267x)
15,560,542 ( 0.03%)      { return typename iterator_traits<_Iter>::iterator_category(); }
         .           
         .             ///@}
         .           
         .           #if __cplusplus < 201103L
         .             // If _Iterator has a base returns it otherwise _Iterator is returned
         .             // untouched
         .             template<typename _Iterator, bool _HasBase>
         .               struct _Iter_base
-- line 214 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/move.h
--------------------------------------------------------------------------------
Ir                   

-- line 39 ----------------------------------------
          .           
          .             // Used, in C++03 mode too, by allocators, etc.
          .             /**
          .              *  @brief Same as C++11 std::addressof
          .              *  @ingroup utilities
          .              */
          .             template<typename _Tp>
          .               inline _GLIBCXX_CONSTEXPR _Tp*
196,483,626 ( 0.33%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        756 ( 0.00%)  => ???:mcount (16x)
 98,241,813 ( 0.17%)      { return __builtin_addressof(__r); }
          .           
          .           #if __cplusplus >= 201103L
          .           
          .           _GLIBCXX_END_NAMESPACE_VERSION
          .           } // namespace
          .           
          .           #include <type_traits> // Brings in std::declval too.
          .           
-- line 56 ----------------------------------------
-- line 66 ----------------------------------------
          .             /**
          .              *  @brief  Forward an lvalue.
          .              *  @return The parameter cast to the specified type.
          .              *
          .              *  This function is used to implement "perfect forwarding".
          .              */
          .             template<typename _Tp>
          .               constexpr _Tp&&
 62,378,628 ( 0.11%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
     29,172 ( 0.00%)  => ???:mcount (512x)
 31,189,314 ( 0.05%)      { return static_cast<_Tp&&>(__t); }
          .           
          .             /**
          .              *  @brief  Forward an rvalue.
          .              *  @return The parameter cast to the specified type.
          .              *
          .              *  This function is used to implement "perfect forwarding".
          .              */
          .             template<typename _Tp>
-- line 83 ----------------------------------------
-- line 91 ----------------------------------------
          .           
          .             /**
          .              *  @brief  Convert a value to an rvalue.
          .              *  @param  __t  A thing of arbitrary type.
          .              *  @return The parameter cast to an rvalue-reference to allow moving it.
          .             */
          .             template<typename _Tp>
          .               constexpr typename std::remove_reference<_Tp>::type&&
 77,338,260 ( 0.13%)      move(_Tp&& __t) noexcept
        192 ( 0.00%)  => ???:mcount (4x)
 38,669,130 ( 0.07%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
          .           
          .           
          .             template<typename _Tp>
          .               struct __move_if_noexcept_cond
          .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
          .                               is_copy_constructible<_Tp>>::type { };
          .           
          .             /**
-- line 108 ----------------------------------------
-- line 130 ----------------------------------------
          .              *  @brief Returns the actual address of the object or function
          .              *         referenced by r, even in the presence of an overloaded
          .              *         operator&.
          .              *  @param  __r  Reference to an object or function.
          .              *  @return   The actual address.
          .             */
          .             template<typename _Tp>
          .               inline _GLIBCXX17_CONSTEXPR _Tp*
196,483,626 ( 0.33%)      addressof(_Tp& __r) noexcept
1,116,110,931 ( 1.88%)  => ???:mcount (23,747,041x)
163,736,355 ( 0.28%)      { return std::__addressof(__r); }
1,329,834,300 ( 2.24%)  => /usr/include/c++/9/bits/move.h:char const* std::__addressof<char const>(char const&) (23,747,041x)
          .           
          .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .             // 2598. addressof works on temporaries
          .             template<typename _Tp>
          .               const _Tp* addressof(const _Tp&&) = delete;
          .           
          .             // C++11 version of std::exchange for internal use.
          .             template <typename _Tp, typename _Up = _Tp>
-- line 147 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: lzw.cc
--------------------------------------------------------------------------------
Ir                   

-- line 6 ----------------------------------------
          .           #include <fstream>
          .           #include <chrono>
          .           #include <filesystem>
          .           #include <unordered_map>
          .           #include <climits>
          .           
          .           namespace fs = std::filesystem;
          .           
         12 ( 0.00%)  void LZW::encode(std::istream& input, std::ostream& output){
         51 ( 0.00%)  => ???:mcount (1x)
          .               
          .               // initialize starter dictionary
          .               // TODO: have a type for codeword, should be uint64t
          6 ( 0.00%)      std::unordered_map<std::string, LZW::codeword_type> dictionary;
715,042,344 ( 1.21%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::~unordered_map() (1x)
        522 ( 0.00%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::unordered_map() (1x)
      1,541 ( 0.00%)      for (int i = 0; i < STARTING_DICT_SIZE; ++i){
      4,096 ( 0.00%)          std::string str1(1, char(i));
    138,756 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (256x)
    236,820 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&) (256x)
      1,024 ( 0.00%)  => ???:0x000000000010c660 (256x)
      1,024 ( 0.00%)  => ???:0x000000000010c530 (256x)
      2,048 ( 0.00%)          dictionary[str1] = static_cast<codeword_type>(i);
  1,982,406 ( 0.00%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (256x)
          .               }
          .            
          8 ( 0.00%)      BitOutput bit_output(output);
        154 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::~BitOutput() (1x)
         68 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::BitOutput(std::ostream&) (1x)
          .           
          .               // the current codeword we are using, and the size of the codewords
          .               // each time we use a codeword we will have to increment so all codewords are unique
          .               // TODO: need to make sure our codewords don't go over the max size of codeword_type
          3 ( 0.00%)      int codeword = STARTING_CODEWORD;
          3 ( 0.00%)      int codeword_size = STARTING_CODE_SIZE;
          7 ( 0.00%)      int max_codeword_size = 1<<STARTING_CODE_SIZE;
          .           
          .               // the pieces of the file we are reading
          .               // current block is a string that we've seen before (its in the dictionary), next_character is the following character that we are looking at
         14 ( 0.00%)      std::string currentBlock = "";
        554 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
      1,428 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
          4 ( 0.00%)  => ???:0x000000000010c530 (1x)
          4 ( 0.00%)  => ???:0x000000000010c660 (1x)
          .               char next_character;
          .           
          4 ( 0.00%)      next_character = input.get();
      4,059 ( 0.00%)  => ???:0x000000000010c560 (1x)
          .           
 11,670,017 ( 0.02%)      while(next_character != EOF){
          .           
          .                   // increment the codword size if the current codeword becomes too large
 11,670,015 ( 0.02%)          if (codeword == max_codeword_size){
         10 ( 0.00%)              codeword_size += 1;
         10 ( 0.00%)              max_codeword_size<<= 1;
          .                   }
          .           
          .                   // if we've already seen the sequence, keep going
          .                   // TODO: use cend() and save this iterator
105,030,135 ( 0.18%)          if (dictionary.find(currentBlock + next_character) != dictionary.end()){
13,537,450,317 (22.83%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) (3,890,005x)
11,653,779,430 (19.65%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,005x)
2,108,383,120 ( 3.56%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (3,890,005x)
956,941,242 ( 1.61%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::end() (3,890,005x)
241,180,314 ( 0.41%)  => /usr/include/c++/9/bits/hashtable_policy.h:bool std::__detail::operator!=<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>(std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&, std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&) (3,890,005x)
 52,252,950 ( 0.09%)              currentBlock = currentBlock + next_character;
12,121,542,160 (20.44%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) (3,483,530x)
7,424,389,158 (12.52%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (3,483,530x)
1,888,073,264 ( 3.18%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (3,483,530x)
          .                   }
          .                   else{
          .           
          .                       // lookup the current block in the dictionary and output it, along with the new character
          .                       // shouldn't look up again
  2,845,325 ( 0.00%)              int code = dictionary[currentBlock];
1,297,266,807 ( 2.19%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,475x)
  2,438,850 ( 0.00%)              bit_output.output_n_bits(code, codeword_size);
792,621,379 ( 1.34%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (406,475x)
          .                       // TODO: static cast to unsigned (uint8t)
  2,438,850 ( 0.00%)              bit_output.output_n_bits((int) next_character, CHAR_BIT);
371,932,381 ( 0.63%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (406,475x)
          .           
          .                       // add this new sequence to our dictionary
  6,910,075 ( 0.01%)              dictionary[currentBlock + next_character] = codeword;
1,415,908,113 ( 2.39%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) (406,475x)
220,309,454 ( 0.37%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (406,475x)
3,391,136,436 ( 5.72%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (406,475x)
    406,475 ( 0.00%)              codeword += 1;
  1,625,900 ( 0.00%)              currentBlock = "";
699,137,052 ( 1.18%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*) (406,475x)
          .                   }
 15,560,020 ( 0.03%)          next_character = input.get();
252,916,372 ( 0.43%)  => ???:0x000000000010c560 (3,890,005x)
          .               }
          .           
          .               // output special eof character
          7 ( 0.00%)      bit_output.output_n_bits(EOF_CODEWORD, codeword_size);
      2,062 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (1x)
          .           
          .               // after we've encoded, we either have 
          .               // no current block (case 0)
          .               // we have a current block that is a single character (case 1)
          .               // otherwise we have a current block > 1 byte (default)
          8 ( 0.00%)      switch (currentBlock.length()){
         61 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (1x)
          .               case 0:
          .                   bit_output.output_bit(false);
          .                   bit_output.output_bit(false);
          .                   break;
          .               case 1:
          .                   bit_output.output_bit(false);
          .                   bit_output.output_bit(true);
          .                   bit_output.output_n_bits((int) currentBlock[0], CHAR_BIT);
          .                   break;
          .               default:
          4 ( 0.00%)          bit_output.output_bit(true);
         84 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_bit(bool) (1x)
          4 ( 0.00%)          bit_output.output_bit(true);
        158 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_bit(bool) (1x)
          .           
          7 ( 0.00%)          int code = dictionary[currentBlock];
      2,897 ( 0.00%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (1x)
          6 ( 0.00%)          bit_output.output_n_bits(code, codeword_size);
      2,064 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (1x)
          1 ( 0.00%)          break;
          .               }
          8 ( 0.00%)  }
          .           
          .           
          .           
          .           void LZW::decode(std::istream& input, std::ostream& output){
          .           
          .               // starting dictionary
          .               std::unordered_map<codeword_type, std::string> dictionary;
          .               for (int i = 0; i < STARTING_DICT_SIZE; ++i){
-- line 103 ----------------------------------------
-- line 146 ----------------------------------------
          .                   break;
          .               case 3:
          .                   int last_codeword = bit_input.read_n_bits(code_size);
          .                   auto decodedCodeword = dictionary.find(last_codeword);
          .                   output << decodedCodeword->second; 
          .                   break;
          .               }
          .           
         23 ( 0.00%)  }
        172 ( 0.00%)  => lzw.cc:__static_initialization_and_destruction_0(int, int) (1x)
         67 ( 0.00%)  => ???:mcount (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/basic_string.tcc
--------------------------------------------------------------------------------
Ir                  

-- line 124 ----------------------------------------
         .           
         .                 const size_type __tmp_length = length();
         .                 _M_length(__s.length());
         .                 __s._M_length(__tmp_length);
         .               }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               typename basic_string<_CharT, _Traits, _Alloc>::pointer
        63 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
       305 ( 0.00%)  => ???:mcount (7x)
         .               _M_create(size_type& __capacity, size_type __old_capacity)
         .               {
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 83.  String::npos vs. string::max_size()
        63 ( 0.00%)        if (__capacity > max_size())
     1,640 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (7x)
         .           	std::__throw_length_error(__N("basic_string::_M_create"));
         .           
         .                 // The below implements an exponential growth policy, necessary to
         .                 // meet amortized linear time requirements of the library: see
         .                 // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
        70 ( 0.00%)        if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
         .           	{
        20 ( 0.00%)  	  __capacity = 2 * __old_capacity;
         .           	  // Never allocate a string bigger than max_size.
        45 ( 0.00%)  	  if (__capacity > max_size())
     1,164 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (5x)
         .           	    __capacity = max_size();
         .           	}
         .           
         .                 // NB: Need an array of char_type[__capacity], plus a terminating
         .                 // null char_type() element.
        63 ( 0.00%)        return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
     2,007 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::allocate(std::allocator<char>&, unsigned long) (7x)
       396 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (7x)
        28 ( 0.00%)      }
         .           
         .             // NB: This is the special case for Input Iterators, used in
         .             // istreambuf_iterators, etc.
         .             // Input Iterators have a cost structure very different from
         .             // pointers, calling for a different coding style.
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               template<typename _InIterator>
         .                 void
-- line 162 ----------------------------------------
-- line 198 ----------------------------------------
         .           	  }
         .           
         .           	_M_set_length(__len);
         .                 }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               template<typename _InIterator>
         .                 void
85,582,981 ( 0.14%)        basic_string<_CharT, _Traits, _Alloc>::
       192 ( 0.00%)  => ???:mcount (4x)
         .                 _M_construct(_InIterator __beg, _InIterator __end,
         .           		   std::forward_iterator_tag)
         .                 {
         .           	// NB: Not required, but considered best practice.
62,242,168 ( 0.10%)  	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
       232 ( 0.00%)  => /usr/include/c++/9/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char const>(char const*) (4x)
         .           	  std::__throw_logic_error(__N("basic_string::"
         .           				       "_M_construct null not valid"));
         .           
46,681,626 ( 0.08%)  	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
       720 ( 0.00%)  => /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) (4x)
         .           
23,340,813 ( 0.04%)  	if (__dnew > size_type(_S_local_capacity))
         .           	  {
        11 ( 0.00%)  	    _M_data(_M_create(__dnew, size_type(0)));
       623 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) (1x)
        64 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (1x)
         5 ( 0.00%)  	    _M_capacity(__dnew);
        64 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (1x)
         .           	  }
         .           
         .           	// Check for out_of_range and length_error exceptions.
         .           	__try
70,022,439 ( 0.12%)  	  { this->_S_copy_chars(_M_data(), __beg, __end); }
       856 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*) (4x)
       232 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (4x)
         .           	__catch(...)
         .           	  {
         .           	    _M_dispose();
         .           	    __throw_exception_again;
         .           	  }
         .           
38,901,355 ( 0.07%)  	_M_set_length(__dnew);
     1,040 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (4x)
46,681,626 ( 0.08%)        }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
     2,816 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
    12,036 ( 0.00%)  => ???:mcount (256x)
         .               _M_construct(size_type __n, _CharT __c)
         .               {
       768 ( 0.00%)        if (__n > size_type(_S_local_capacity))
         .           	{
         .           	  _M_data(_M_create(__n, size_type(0)));
         .           	  _M_capacity(__n);
         .           	}
         .           
       768 ( 0.00%)        if (__n)
     2,304 ( 0.00%)  	this->_S_assign(_M_data(), __n, __c);
    35,334 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char) (256x)
    17,146 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (256x)
         .           
     1,280 ( 0.00%)        _M_set_length(__n);
    65,540 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (256x)
     1,536 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
         .               basic_string<_CharT, _Traits, _Alloc>::
         .               _M_assign(const basic_string& __str)
         .               {
         .                 if (this != &__str)
         .           	{
-- line 258 ----------------------------------------
-- line 302 ----------------------------------------
         .           	      _M_destroy(__capacity);
         .           	      _M_data(_M_local_data());
         .           	    }
         .           	}
         .               }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
        52 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
       196 ( 0.00%)  => ???:mcount (4x)
         .               _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
         .           	      size_type __len2)
         .               {
        24 ( 0.00%)        const size_type __how_much = length() - __pos - __len1;
       232 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (4x)
         .           
        28 ( 0.00%)        size_type __new_capacity = length() + __len2 - __len1;
       232 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (4x)
        40 ( 0.00%)        pointer __r = _M_create(__new_capacity, capacity());
     3,460 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) (4x)
     1,672 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (4x)
         .           
         8 ( 0.00%)        if (__pos)
        36 ( 0.00%)  	this->_S_copy(__r, _M_data(), __pos);
       604 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (4x)
       232 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (4x)
        12 ( 0.00%)        if (__s && __len2)
        16 ( 0.00%)  	this->_S_copy(__r + __pos, __s, __len2);
       302 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (2x)
         8 ( 0.00%)        if (__how_much)
         .           	this->_S_copy(__r + __pos + __len2,
         .           		      _M_data() + __pos + __len1, __how_much);
         .           
        12 ( 0.00%)        _M_dispose();
     1,672 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() (4x)
        20 ( 0.00%)        _M_data(__r);
       244 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (4x)
        20 ( 0.00%)        _M_capacity(__new_capacity);
       244 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (4x)
        24 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
         .               basic_string<_CharT, _Traits, _Alloc>::
         .               _M_erase(size_type __pos, size_type __n)
         .               {
         .                 const size_type __how_much = length() - __pos - __n;
         .           
-- line 338 ----------------------------------------
-- line 351 ----------------------------------------
         .                 if (__size < __n)
         .           	this->append(__n - __size, __c);
         .                 else if (__n < __size)
         .           	this->_M_set_length(__n);
         .               }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               basic_string<_CharT, _Traits, _Alloc>&
        36 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
       160 ( 0.00%)  => ???:mcount (4x)
         .               _M_append(const _CharT* __s, size_type __n)
         .               {
        24 ( 0.00%)        const size_type __len = __n + this->size();
       232 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (4x)
         .           
        28 ( 0.00%)        if (__len <= this->capacity())
     1,696 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (4x)
         .           	{
         4 ( 0.00%)  	  if (__n)
        28 ( 0.00%)  	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
       118 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (2x)
       286 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (2x)
       118 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (2x)
         .           	}
         .                 else
        24 ( 0.00%)  	this->_M_mutate(this->size(), size_type(0), __s, __n);
     4,876 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (2x)
       118 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (2x)
         .           
        20 ( 0.00%)        this->_M_set_length(__len);
     1,028 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (4x)
         4 ( 0.00%)        return *this;
        16 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               template<typename _InputIterator>
         .                 basic_string<_CharT, _Traits, _Alloc>&
         .                 basic_string<_CharT, _Traits, _Alloc>::
         .                 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
         .           			  _InputIterator __k1, _InputIterator __k2,
         .           			  std::__false_type)
-- line 382 ----------------------------------------
-- line 384 ----------------------------------------
         .           	const basic_string __s(__k1, __k2);
         .           	const size_type __n1 = __i2 - __i1;
         .           	return _M_replace(__i1 - begin(), __n1, __s._M_data(),
         .           			  __s.size());
         .                 }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               basic_string<_CharT, _Traits, _Alloc>&
93,360,120 ( 0.16%)      basic_string<_CharT, _Traits, _Alloc>::
365,660,474 ( 0.62%)  => ???:mcount (7,780,010x)
         .               _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
         .           		   _CharT __c)
         .               {
46,680,060 ( 0.08%)        _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
2,847,483,664 ( 4.80%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (7,780,010x)
         .           
31,120,040 ( 0.05%)        const size_type __old_size = this->size();
443,460,574 ( 0.75%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (7,780,010x)
38,900,050 ( 0.07%)        const size_type __new_size = __old_size + __n2 - __n1;
         .           
54,460,070 ( 0.09%)        if (__new_size <= this->capacity())
3,244,264,174 ( 5.47%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (7,780,010x)
         .           	{
46,680,048 ( 0.08%)  	  pointer __p = this->_M_data() + __pos1;
443,460,460 ( 0.75%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (7,780,008x)
         .           
31,120,032 ( 0.05%)  	  const size_type __how_much = __old_size - __pos1 - __n1;
15,560,016 ( 0.03%)  	  if (__how_much && __n1 != __n2)
         .           	    this->_S_move(__p + __n2, __p + __n1, __how_much);
         .           	}
         .                 else
        16 ( 0.00%)  	this->_M_mutate(__pos1, __n1, 0, __n2);
     4,514 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (2x)
         .           
15,560,020 ( 0.03%)        if (__n2)
85,580,110 ( 0.14%)  	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
995,841,284 ( 1.68%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char) (7,780,010x)
443,460,574 ( 0.75%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (7,780,010x)
         .           
38,900,050 ( 0.07%)        this->_M_set_length(__new_size);
1,991,682,564 ( 3.36%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (7,780,010x)
 7,780,010 ( 0.01%)        return *this;
31,120,040 ( 0.05%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               basic_string<_CharT, _Traits, _Alloc>&
 4,064,750 ( 0.01%)      basic_string<_CharT, _Traits, _Alloc>::
19,104,329 ( 0.03%)  => ???:mcount (406,475x)
         .               _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
         .           	       const size_type __len2)
         .               {
 2,438,850 ( 0.00%)        _M_check_length(__len1, __len2, "basic_string::_M_replace");
148,769,854 ( 0.25%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (406,475x)
         .           
 1,625,900 ( 0.00%)        const size_type __old_size = this->size();
23,169,079 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (406,475x)
 2,032,375 ( 0.00%)        const size_type __new_size = __old_size + __len2 - __len1;
         .           
 2,845,325 ( 0.00%)        if (__new_size <= this->capacity())
169,500,079 ( 0.29%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (406,475x)
         .           	{
 2,438,850 ( 0.00%)  	  pointer __p = this->_M_data() + __pos;
23,169,079 ( 0.04%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (406,475x)
         .           
 1,625,900 ( 0.00%)  	  const size_type __how_much = __old_size - __pos - __len1;
 2,845,325 ( 0.00%)  	  if (_M_disjunct(__s))
79,669,112 ( 0.13%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const (406,475x)
         .           	    {
   812,950 ( 0.00%)  	      if (__how_much && __len1 != __len2)
         .           		this->_S_move(__p + __len2, __p + __len1, __how_much);
   812,950 ( 0.00%)  	      if (__len2)
         .           		this->_S_copy(__p, __s, __len2);
         .           	    }
         .           	  else
         .           	    {
         .           	      // Work in-place.
         .           	      if (__len2 && __len2 <= __len1)
         .           		this->_S_move(__p, __s, __len2);
         .           	      if (__how_much && __len1 != __len2)
-- line 447 ----------------------------------------
-- line 460 ----------------------------------------
         .           				    __len2 - __nleft);
         .           		    }
         .           		}
         .           	    }
         .           	}
         .                 else
         .           	this->_M_mutate(__pos, __len1, __s, __len2);
         .           
 2,032,375 ( 0.00%)        this->_M_set_length(__new_size);
104,057,604 ( 0.18%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (406,475x)
   406,475 ( 0.00%)        return *this;
   812,950 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               typename basic_string<_CharT, _Traits, _Alloc>::size_type
         .               basic_string<_CharT, _Traits, _Alloc>::
         .               copy(_CharT* __s, size_type __n, size_type __pos) const
         .               {
         .                 _M_check(__pos, "basic_string::copy");
         .                 __n = _M_limit(__pos, __n);
-- line 478 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/functional_hash.h
--------------------------------------------------------------------------------
Ir                  

-- line 187 ----------------------------------------
         .             _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_3 unsigned)
         .           #endif
         .           
         .           #undef _Cxx_hashtable_define_trivial_hash
         .           
         .             struct _Hash_impl
         .             {
         .               static size_t
37,625,696 ( 0.06%)      hash(const void* __ptr, size_t __clength,
221,050,968 ( 0.37%)  => ???:mcount (4,703,212x)
         .           	 size_t __seed = static_cast<size_t>(0xc70f6907UL))
37,625,696 ( 0.06%)      { return _Hash_bytes(__ptr, __clength, __seed); }
245,081,387 ( 0.41%)  => ???:0x000000000010c3a0 (4,703,212x)
         .           
         .               template<typename _Tp>
         .                 static size_t
         .                 hash(const _Tp& __val)
         .                 { return hash(&__val, sizeof(__val)); }
         .           
         .               template<typename _Tp>
         .                 static size_t
-- line 205 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/char_traits.h
--------------------------------------------------------------------------------
Ir                   

-- line 228 ----------------------------------------
          .              */
          .             template<typename _CharT>
          .               static _GLIBCXX_ALWAYS_INLINE constexpr bool
          .               __constant_string_p(const _CharT* __s)
          .               {
          .           #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
          .                 (void) __s;
          .                 // In constexpr contexts all strings should be constant.
    406,481 ( 0.00%)        return __builtin_is_constant_evaluated();
          .           #else
          .                 while (__builtin_constant_p(*__s) && *__s)
          .           	__s++;
          .                 return __builtin_constant_p(*__s);
          .           #endif
          .               }
          .           
          .             /**
-- line 244 ----------------------------------------
-- line 291 ----------------------------------------
          .               {
          .                 typedef char              char_type;
          .                 typedef int               int_type;
          .                 typedef streampos         pos_type;
          .                 typedef streamoff         off_type;
          .                 typedef mbstate_t         state_type;
          .           
          .                 static _GLIBCXX17_CONSTEXPR void
226,383,535 ( 0.38%)        assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
1,520,003,747 ( 2.56%)  => ???:mcount (32,340,505x)
226,383,535 ( 0.38%)        { __c1 = __c2; }
          .           
          .                 static _GLIBCXX_CONSTEXPR bool
          .                 eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
          .                 { return __c1 == __c2; }
          .           
          .                 static _GLIBCXX_CONSTEXPR bool
          .                 lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
          .                 {
          .           	// LWG 467.
          .           	return (static_cast<unsigned char>(__c1)
          .           		< static_cast<unsigned char>(__c2));
          .                 }
          .           
          .                 static _GLIBCXX17_CONSTEXPR int
 31,120,048 ( 0.05%)        compare(const char_type* __s1, const char_type* __s2, size_t __n)
182,830,286 ( 0.31%)  => ???:mcount (3,890,006x)
          .                 {
  7,780,012 ( 0.01%)  	if (__n == 0)
          .           	  return 0;
          .           #if __cplusplus >= 201703L
  7,780,012 ( 0.01%)  	if (__builtin_constant_p(__n)
          .           	    && __constant_char_array_p(__s1, __n)
  3,890,006 ( 0.01%)  	    && __constant_char_array_p(__s2, __n))
          .           	  {
          .           	    for (size_t __i = 0; __i < __n; ++__i)
          .           	      if (lt(__s1[__i], __s2[__i]))
          .           		return -1;
          .           	      else if (lt(__s2[__i], __s1[__i]))
          .           		return 1;
          .           	    return 0;
          .           	  }
          .           #endif
 27,230,042 ( 0.05%)  	return __builtin_memcmp(__s1, __s2, __n);
 88,134,508 ( 0.15%)  => ???:0x000000000010c420 (3,890,006x)
  7,780,012 ( 0.01%)        }
          .           
          .                 static _GLIBCXX17_CONSTEXPR size_t
  3,251,848 ( 0.01%)        length(const char_type* __s)
 19,104,623 ( 0.03%)  => ???:mcount (406,481x)
          .                 {
          .           #if __cplusplus >= 201703L
    812,962 ( 0.00%)  	if (__constant_string_p(__s))
          .           	  return __gnu_cxx::char_traits<char_type>::length(__s);
          .           #endif
  4,064,852 ( 0.01%)  	return __builtin_strlen(__s);
    812,962 ( 0.00%)        }
          .           
          .                 static _GLIBCXX17_CONSTEXPR const char_type*
          .                 find(const char_type* __s, size_t __n, const char_type& __a)
          .                 {
          .           	if (__n == 0)
          .           	  return 0;
          .           #if __cplusplus >= 201703L
          .           	if (__builtin_constant_p(__n)
-- line 351 ----------------------------------------
-- line 360 ----------------------------------------
          .                 move(char_type* __s1, const char_type* __s2, size_t __n)
          .                 {
          .           	if (__n == 0)
          .           	  return __s1;
          .           	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
          .                 }
          .           
          .                 static char_type*
 83,604,784 ( 0.14%)        copy(char_type* __s1, const char_type* __s2, size_t __n)
491,178,132 ( 0.83%)  => ???:mcount (10,450,598x)
          .                 {
 20,901,196 ( 0.04%)  	if (__n == 0)
  1,625,906 ( 0.00%)  	  return __s1;
 86,738,805 ( 0.15%)  	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
163,088,539 ( 0.27%)  => ???:0x000000000010c4b0 (9,637,645x)
 20,901,196 ( 0.04%)        }
          .           
          .                 static char_type*
          .                 assign(char_type* __s, size_t __n, char_type __a)
          .                 {
          .           	if (__n == 0)
          .           	  return __s;
          .           	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
          .                 }
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir                  

-- line 72 ----------------------------------------
         .           
         .           #if __cplusplus >= 201103L
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 2103. propagate_on_container_move_assignment
         .                 typedef std::true_type propagate_on_container_move_assignment;
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
       297 ( 0.00%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        51 ( 0.00%)  => ???:mcount (1x)
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 template<typename _Tp1>
         .           	_GLIBCXX20_CONSTEXPR
         .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         .           
       297 ( 0.00%)        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
     1,508 ( 0.00%)  => ???:mcount (32x)
         .           
         .                 pointer
         .                 address(reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           
         .                 const_pointer
         .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           
         .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
         .                 // about what the return value is when __n == 0.
         .                 _GLIBCXX_NODISCARD pointer
 3,254,032 ( 0.01%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
19,116,361 ( 0.03%)  => ???:mcount (406,731x)
         .                 {
 2,847,278 ( 0.00%)  	if (__n > this->max_size())
22,776,940 ( 0.04%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::max_size() const (406,731x)
         .           	  std::__throw_bad_alloc();
         .           
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
         .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         .           	  }
         .           #endif
 3,253,956 ( 0.01%)  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
83,038,562 ( 0.14%)  => ???:0x000000000010c500 (406,731x)
   813,508 ( 0.00%)        }
         .           
         .                 // __p is not permitted to be a null pointer.
         .                 void
 3,254,024 ( 0.01%)        deallocate(pointer __p, size_type)
19,116,361 ( 0.03%)  => ???:mcount (406,731x)
         .                 {
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         .           	    return;
         .           	  }
         .           #endif
 1,220,259 ( 0.00%)  	::operator delete(__p);
43,926,766 ( 0.07%)  => ???:0x000000000010c4e0 (406,731x)
   813,506 ( 0.00%)        }
         .           
         .                 size_type
51,559,518 ( 0.09%)        max_size() const _GLIBCXX_USE_NOEXCEPT
       756 ( 0.00%)  => ???:mcount (16x)
         .                 {
         .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
 8,593,253 ( 0.01%)  	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
         .           #else
         .           	return size_t(-1) / sizeof(_Tp);
         .           #endif
17,186,506 ( 0.03%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 template<typename _Up, typename... _Args>
         .           	void
 6,507,696 ( 0.01%)  	construct(_Up* __p, _Args&&... __args)
19,104,329 ( 0.03%)  => ???:mcount (406,475x)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
13,422,123 ( 0.02%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
871,482,549 ( 1.47%)  => /usr/include/c++/9/tuple:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<>) (406,475x)
178,849,012 ( 0.30%)  => /usr/include/c++/9/tuple:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&) (406,475x)
23,169,079 ( 0.04%)  => /usr/include/c++/9/new:operator new(unsigned long, void*) (406,475x)
22,762,604 ( 0.04%)  => /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (406,475x)
22,762,604 ( 0.04%)  => /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (406,475x)
22,762,604 ( 0.04%)  => /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&> >::type&) (406,475x)
         .           
         .                 template<typename _Up>
         .           	void
 2,847,117 ( 0.00%)  	destroy(_Up* __p)
19,116,361 ( 0.03%)  => ???:mcount (406,731x)
         .           	noexcept(std::is_nothrow_destructible<_Up>::value)
 2,440,386 ( 0.00%)  	{ __p->~_Up(); }
244,445,745 ( 0.41%)  => /usr/include/c++/9/bits/stl_pair.h:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::~pair() (406,731x)
         .           #else
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 402. wrong new expression in [some_] allocator::construct
         .                 void
         .                 construct(pointer __p, const _Tp& __val)
         .                 { ::new((void *)__p) _Tp(__val); }
         .           
         .                 void
-- line 160 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_function.h
--------------------------------------------------------------------------------
Ir                  

-- line 347 ----------------------------------------
         .           #endif
         .           
         .             /// One of the @link comparison_functors comparison functors@endlink.
         .             template<typename _Tp>
         .               struct equal_to : public binary_function<_Tp, _Tp, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR
         .                 bool
31,120,048 ( 0.05%)        operator()(const _Tp& __x, const _Tp& __y) const
182,830,286 ( 0.31%)  => ???:mcount (3,890,006x)
27,230,042 ( 0.05%)        { return __x == __y; }
2,262,647,890 ( 3.82%)  => /usr/include/c++/9/bits/basic_string.h:__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,006x)
         .               };
         .           
         .             /// One of the @link comparison_functors comparison functors@endlink.
         .             template<typename _Tp>
         .               struct not_equal_to : public binary_function<_Tp, _Tp, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR
         .                 bool
-- line 364 ----------------------------------------
-- line 425 ----------------------------------------
         .                 }
         .               };
         .           
         .             // Partial specialization of std::less for pointers.
         .             template<typename _Tp>
         .               struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR bool
 3,251,800 ( 0.01%)        operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
19,104,329 ( 0.03%)  => ???:mcount (406,475x)
         .                 {
         .           #if __cplusplus >= 201402L
         .           #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
         .           	if (__builtin_is_constant_evaluated())
         .           #else
         .           	if (__builtin_constant_p(__x < __y))
         .           #endif
         .           	  return __x < __y;
         .           #endif
 1,625,900 ( 0.00%)  	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
   812,950 ( 0.00%)        }
         .               };
         .           
         .             // Partial specialization of std::greater_equal for pointers.
         .             template<typename _Tp>
         .               struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR bool
         .                 operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
-- line 452 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
         .           
         .                 __aligned_buffer() = default;
         .           
         .                 // Can be used to avoid value-initialization
         .                 __aligned_buffer(std::nullptr_t) { }
         .           
         .                 void*
33,100,146 ( 0.06%)        _M_addr() noexcept
259,284,481 ( 0.44%)  => ???:mcount (5,516,691x)
         .                 {
 5,516,691 ( 0.01%)          return static_cast<void*>(&_M_storage);
11,033,382 ( 0.02%)        }
         .           
         .                 const void*
         .                 _M_addr() const noexcept
         .                 {
         .                   return static_cast<const void*>(&_M_storage);
         .                 }
         .           
         .                 _Tp*
33,100,146 ( 0.06%)        _M_ptr() noexcept
259,284,481 ( 0.44%)  => ???:mcount (5,516,691x)
27,583,455 ( 0.05%)        { return static_cast<_Tp*>(_M_addr()); }
308,934,700 ( 0.52%)  => /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_addr() (5,516,691x)
         .           
         .                 const _Tp*
         .                 _M_ptr() const noexcept
         .                 { return static_cast<const _Tp*>(_M_addr()); }
         .               };
         .           #endif
         .           
         .           } // namespace
-- line 123 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/utility
--------------------------------------------------------------------------------
Ir                  

-- line 166 ----------------------------------------
         .             template<std::size_t _Int>
         .               struct __pair_get;
         .           
         .             template<>
         .               struct __pair_get<0>
         .               {
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr _Tp1&
23,340,132 ( 0.04%)          __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
182,831,038 ( 0.31%)  => ???:mcount (3,890,022x)
11,670,066 ( 0.02%)          { return __pair.first; }
         .           
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr _Tp1&&
         .                   __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
         .                   { return std::forward<_Tp1>(__pair.first); }
         .           
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr const _Tp1&
-- line 183 ----------------------------------------
-- line 211 ----------------------------------------
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr const _Tp2&&
         .                   __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
         .                   { return std::forward<const _Tp2>(__pair.second); }
         .               };
         .           
         .             template<std::size_t _Int, class _Tp1, class _Tp2>
         .               constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
23,340,132 ( 0.04%)      get(std::pair<_Tp1, _Tp2>& __in) noexcept
221,731,256 ( 0.37%)  => ???:mcount (3,890,022x)
19,450,110 ( 0.03%)      { return __pair_get<_Int>::__get(__in); }
217,841,236 ( 0.37%)  => /usr/include/c++/9/utility:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::__pair_get<0ul>::__get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) (3,890,022x)
         .           
         .             template<std::size_t _Int, class _Tp1, class _Tp2>
         .               constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
         .               get(std::pair<_Tp1, _Tp2>&& __in) noexcept
         .               { return __pair_get<_Int>::__move_get(std::move(__in)); }
         .           
         .             template<std::size_t _Int, class _Tp1, class _Tp2>
         .               constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
-- line 228 ----------------------------------------

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
15,040,107,670 (25.36%)  events annotated

