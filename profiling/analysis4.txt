--------------------------------------------------------------------------------
Profile data file 'callgrind.out.828' (creator: callgrind-3.20.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 1769897499
Trigger: Program termination
Profiled target:  ./lzwencode HaHi (PID 828, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
10,318,645,910 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
520,702,128 ( 5.05%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
362,310,420 ( 3.51%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
350,197,574 ( 3.39%)  bitio.cc:BitOutput::output_bit(bool) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
264,520,336 ( 2.56%)  /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
240,617,272 ( 2.33%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
235,674,963 ( 2.28%)  ???:std::_Hash_bytes(void const*, unsigned long, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
229,463,456 ( 2.22%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
211,470,254 ( 2.05%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
201,946,671 ( 1.96%)  /usr/include/c++/9/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
201,365,808 ( 1.95%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
196,475,744 ( 1.90%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
189,906,449 ( 1.84%)  bitio.cc:BitOutput::output_n_bits(int, int) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
181,143,560 ( 1.76%)  /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
177,289,615 ( 1.72%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
166,457,265 ( 1.61%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
163,945,062 ( 1.59%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Equal_helper<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, true>::_S_equals(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, std::__detail::_Select1st const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
159,490,246 ( 1.55%)  /usr/include/c++/9/bits/basic_string.h:__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
158,396,352 ( 1.54%)  lzw.cc:LZW::encode(std::istream&, std::ostream&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
140,045,004 ( 1.36%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
136,496,041 ( 1.32%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::copy(char*, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
132,847,264 ( 1.29%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
132,847,187 ( 1.29%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
128,371,160 ( 1.24%)  ???:std::istream::get() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
124,832,240 ( 1.21%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
124,597,978 ( 1.21%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
120,770,240 ( 1.17%)  /usr/include/c++/9/bits/move.h:char const* std::addressof<char const>(char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
120,770,240 ( 1.17%)  /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char const*>::pointer_to(char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
120,590,155 ( 1.17%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
108,920,238 ( 1.06%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
108,920,168 ( 1.06%)  ???:std::istream::sentry::sentry(std::istream&, bool) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
103,470,664 ( 1.00%)  /usr/include/c++/9/bits/basic_string.h:std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
101,844,252 ( 0.99%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 99,867,912 ( 0.97%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 98,222,556 ( 0.95%)  ???:0x000000000018b6e0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
 97,250,125 ( 0.94%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 94,528,214 ( 0.92%)  /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 93,828,516 ( 0.91%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 90,231,540 ( 0.87%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 89,361,332 ( 0.87%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 87,088,250 ( 0.84%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 85,934,740 ( 0.83%)  /usr/include/c++/9/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 84,539,168 ( 0.82%)  /usr/include/c++/9/bits/move.h:char const* std::__addressof<char const>(char const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 81,690,126 ( 0.79%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::compare(char const*, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 80,355,649 ( 0.78%)  ???:0x0000000000184cc0 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
 78,190,430 ( 0.76%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 77,341,266 ( 0.75%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 75,251,648 ( 0.73%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 75,251,392 ( 0.73%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 73,914,959 ( 0.72%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 70,548,180 ( 0.68%)  /usr/include/c++/9/bits/functional_hash.h:std::_Hash_impl::hash(void const*, unsigned long, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 68,747,792 ( 0.67%)  /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 68,747,792 ( 0.67%)  /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 61,134,350 ( 0.59%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 61,134,350 ( 0.59%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,683,601 ( 0.59%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,158,092 ( 0.58%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,158,014 ( 0.58%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,154,318 ( 0.58%)  /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,154,304 ( 0.58%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,152,610 ( 0.58%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 60,150,902 ( 0.58%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 59,200,485 ( 0.57%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const*, unsigned long) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 57,402,427 ( 0.56%)  ???:0x0000000000097a70 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
 55,166,910 ( 0.53%)  /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_ptr() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 54,733,301 ( 0.53%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 54,460,084 ( 0.53%)  /usr/include/c++/9/bits/stl_function.h:std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 50,962,260 ( 0.49%)  ???:std::ostream::put(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
 50,570,286 ( 0.49%)  /usr/include/c++/9/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 50,570,065 ( 0.49%)  /usr/include/c++/9/bits/hashtable_policy.h:bool std::__detail::operator!=<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>(std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&, std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 50,570,065 ( 0.49%)  /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 48,769,420 ( 0.47%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 47,267,033 ( 0.46%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 47,267,011 ( 0.46%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 47,264,107 ( 0.46%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 47,032,120 ( 0.46%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,970,030 ( 0.42%)  /usr/include/c++/9/bits/move.h:char* std::addressof<char>(char&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,970,030 ( 0.42%)  /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char*>::pointer_to(char&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,964,980 ( 0.42%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,964,930 ( 0.42%)  /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,794,045 ( 0.41%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,794,045 ( 0.41%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,696,045 ( 0.41%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 42,669,448 ( 0.41%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 41,489,244 ( 0.40%)  ???:free [/usr/lib/x86_64-linux-gnu/ld-2.31.so]
 38,900,220 ( 0.38%)  /usr/include/c++/9/utility:std::tuple_element<0ul, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 38,670,633 ( 0.37%)  /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 38,616,837 ( 0.37%)  /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_addr() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 36,359,160 ( 0.35%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 34,373,896 ( 0.33%)  /usr/include/c++/9/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char>(char*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 32,922,484 ( 0.32%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 32,847,052 ( 0.32%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 30,079,021 ( 0.29%)  /usr/include/c++/9/bits/move.h:char* std::__addressof<char>(char&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 30,077,201 ( 0.29%)  /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 30,075,500 ( 0.29%)  /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<char>::max_size() const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 27,441,120 ( 0.27%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
 27,230,154 ( 0.26%)  /usr/include/c++/9/bits/move.h:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>::type&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 27,230,154 ( 0.26%)  /usr/include/c++/9/utility:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::__pair_get<0ul>::__get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 26,844,614 ( 0.26%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 25,780,422 ( 0.25%)  /usr/include/c++/9/bits/stl_iterator_base_types.h:std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 25,624,053 ( 0.25%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 24,388,500 ( 0.24%)  /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 20,901,180 ( 0.20%)  /usr/include/c++/9/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_propagate_on_copy_assign() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 19,683,862 ( 0.19%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 19,525,579 ( 0.19%)  ???:malloc [/usr/lib/x86_64-linux-gnu/ld-2.31.so]
 19,523,088 ( 0.19%)  /usr/include/c++/9/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 17,187,996 ( 0.17%)  ???:std::allocator<char>::~allocator() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
 17,187,474 ( 0.17%)  ???:std::allocator<char>::allocator(std::allocator<char> const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
 16,936,689 ( 0.16%)  ???:0x000000000018bb60 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
 16,269,560 ( 0.16%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 14,235,585 ( 0.14%)  /usr/include/c++/9/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 13,121,184 ( 0.13%)  ???:0x000000000010c4a0 [???]
 12,194,250 ( 0.12%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 11,388,692 ( 0.11%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 10,981,737 ( 0.11%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 10,974,825 ( 0.11%)  /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
 10,571,691 ( 0.10%)  /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  9,761,544 ( 0.09%)  /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::allocate(unsigned long, void const*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  9,761,544 ( 0.09%)  /usr/include/c++/9/tuple:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, 0ul>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  9,406,424 ( 0.09%)  ???:0x000000000010c390 [???]
  8,948,082 ( 0.09%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,948,082 ( 0.09%)  /usr/include/c++/9/tuple:std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, false>::_Head_base(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,942,624 ( 0.09%)  /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,594,002 ( 0.08%)  ???:0x000000000010c380 [???]
  8,594,000 ( 0.08%)  ???:0x000000000010c5a0 [???]
  8,593,994 ( 0.08%)  ???:0x000000000010c510 [???]
  8,593,474 ( 0.08%)  ???:0x000000000010c450 [???]
  8,541,351 ( 0.08%)  /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,541,351 ( 0.08%)  /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,541,351 ( 0.08%)  /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,541,351 ( 0.08%)  /usr/include/c++/9/tuple:std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::_Tuple_impl(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  8,134,620 ( 0.08%)  /usr/include/c++/9/tuple:std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::_M_head(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  7,780,017 ( 0.08%)  ???:0x00000000048de6a0 [???]
  7,780,012 ( 0.08%)  ???:0x000000000010c410 [???]
  7,780,012 ( 0.08%)  ???:0x000000000010c540 [???]
  7,316,550 ( 0.07%)  /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  6,507,696 ( 0.06%)  /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  6,507,696 ( 0.06%)  /usr/include/c++/9/new:operator new(unsigned long, void*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  6,507,696 ( 0.06%)  /usr/include/c++/9/tuple:std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, false>::_M_head(std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, false>&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  6,100,965 ( 0.06%)  /usr/include/c++/9/tuple:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<>) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  5,694,245 ( 0.06%)  /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  5,694,234 ( 0.06%)  /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, unsigned long) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  5,694,234 ( 0.06%)  /usr/include/c++/9/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  5,694,234 ( 0.06%)  /usr/include/c++/9/bits/move.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  5,694,234 ( 0.06%)  /usr/include/c++/9/tuple:std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::_Tuple_impl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]
  5,694,234 ( 0.06%)  /usr/include/c++/9/tuple:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&) [/home/ccorontzos/thesis/lzwcpp/lzwencode]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/alloc_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 89 ----------------------------------------
         .           
         .               // overload destroy for non-standard pointer types
         .               template<typename _Ptr>
         .                 static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
         .                 destroy(_Alloc& __a, _Ptr __p)
         .                 noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
         .                 { _Base_type::destroy(__a, std::__to_address(__p)); }
         .           
38,670,633 ( 0.37%)      static _Alloc _S_select_on_copy(const _Alloc& __a)
47,264,107 ( 0.46%)      { return _Base_type::select_on_container_copy_construction(__a); }
77,341,266 ( 0.75%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&) (4,296,737x)
         .           
         .               static void _S_on_swap(_Alloc& __a, _Alloc& __b)
         .               { std::__alloc_on_swap(__a, __b); }
         .           
10,450,590 ( 0.10%)      static constexpr bool _S_propagate_on_copy_assign()
10,450,590 ( 0.10%)      { return _Base_type::propagate_on_container_copy_assignment::value; }
         .           
         .               static constexpr bool _S_propagate_on_move_assign()
         .               { return _Base_type::propagate_on_container_move_assignment::value; }
         .           
         .               static constexpr bool _S_propagate_on_swap()
         .               { return _Base_type::propagate_on_container_swap::value; }
         .           
         .               static constexpr bool _S_always_equal()
-- line 112 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/ptr_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 138 ----------------------------------------
         .                   using rebind = _Up*;
         .           
         .                 /**
         .                  *  @brief  Obtain a pointer to an object
         .                  *  @param  __r  A reference to an object of type @c element_type
         .                  *  @return @c addressof(__r)
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR pointer
83,903,870 ( 0.81%)        pointer_to(__make_not_void<element_type>& __r) noexcept
83,903,870 ( 0.81%)        { return std::addressof(__r); }
73,049,051 ( 0.71%)  => /usr/include/c++/9/bits/move.h:char* std::addressof<char>(char&) (4,297,003x)
         .               };
         .           
         .             /// Convenience alias for rebinding pointers.
         .             template<typename _Ptr, typename _Tp>
         .               using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;
         .           
         .             template<typename _Tp>
         .               constexpr _Tp*
 1,626,988 ( 0.02%)      __to_address(_Tp* __ptr) noexcept
         .               {
         .                 static_assert(!std::is_function<_Tp>::value, "not a function pointer");
   406,747 ( 0.00%)        return __ptr;
   813,494 ( 0.01%)      }
         .           
         .           #if __cplusplus <= 201703L
         .             template<typename _Ptr>
         .               constexpr typename std::pointer_traits<_Ptr>::element_type*
         .               __to_address(const _Ptr& __ptr)
         .               { return std::__to_address(__ptr.operator->()); }
         .           #else
         .             template<typename _Ptr>
-- line 168 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/move.h
--------------------------------------------------------------------------------
Ir                  

-- line 39 ----------------------------------------
         .           
         .             // Used, in C++03 mode too, by allocators, etc.
         .             /**
         .              *  @brief Same as C++11 std::addressof
         .              *  @ingroup utilities
         .              */
         .             template<typename _Tp>
         .               inline _GLIBCXX_CONSTEXPR _Tp*
67,123,096 ( 0.65%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
50,342,322 ( 0.49%)      { return __builtin_addressof(__r); }
         .           
         .           #if __cplusplus >= 201103L
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace
         .           
         .           #include <type_traits> // Brings in std::declval too.
         .           
-- line 56 ----------------------------------------
-- line 66 ----------------------------------------
         .             /**
         .              *  @brief  Forward an lvalue.
         .              *  @return The parameter cast to the specified type.
         .              *
         .              *  This function is used to implement "perfect forwarding".
         .              */
         .             template<typename _Tp>
         .               constexpr _Tp&&
33,456,252 ( 0.32%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
25,092,189 ( 0.24%)      { return static_cast<_Tp&&>(__t); }
         .           
         .             /**
         .              *  @brief  Forward an rvalue.
         .              *  @return The parameter cast to the specified type.
         .              *
         .              *  This function is used to implement "perfect forwarding".
         .              */
         .             template<typename _Tp>
-- line 83 ----------------------------------------
-- line 91 ----------------------------------------
         .           
         .             /**
         .              *  @brief  Convert a value to an rvalue.
         .              *  @param  __t  A thing of arbitrary type.
         .              *  @return The parameter cast to an rvalue-reference to allow moving it.
         .             */
         .             template<typename _Tp>
         .               constexpr typename std::remove_reference<_Tp>::type&&
17,187,000 ( 0.17%)      move(_Tp&& __t) noexcept
12,890,250 ( 0.12%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
         .           
         .           
         .             template<typename _Tp>
         .               struct __move_if_noexcept_cond
         .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
         .                               is_copy_constructible<_Tp>>::type { };
         .           
         .             /**
-- line 108 ----------------------------------------
-- line 130 ----------------------------------------
         .              *  @brief Returns the actual address of the object or function
         .              *         referenced by r, even in the presence of an overloaded
         .              *         operator&.
         .              *  @param  __r  Reference to an object or function.
         .              *  @return   The actual address.
         .             */
         .             template<typename _Tp>
         .               inline _GLIBCXX17_CONSTEXPR _Tp*
83,903,870 ( 0.81%)      addressof(_Tp& __r) noexcept
83,903,870 ( 0.81%)      { return std::__addressof(__r); }
84,539,168 ( 0.82%)  => /usr/include/c++/9/bits/move.h:char const* std::__addressof<char const>(char const&) (12,077,024x)
         .           
         .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .             // 2598. addressof works on temporaries
         .             template<typename _Tp>
         .               const _Tp* addressof(const _Tp&&) = delete;
         .           
         .             // C++11 version of std::exchange for internal use.
         .             template <typename _Tp, typename _Up = _Tp>
-- line 147 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/basic_string.h
--------------------------------------------------------------------------------
Ir                   

-- line 121 ----------------------------------------
          .           	using _If_sv = enable_if_t<
          .           	  __and_<is_convertible<const _Tp&, __sv_type>,
          .           		 __not_<is_convertible<const _Tp*, const basic_string*>>,
          .           		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
          .           	  _Res>;
          .           
          .                 // Allows an implicit conversion to __sv_type.
          .                 static __sv_type
          8 ( 0.00%)        _S_to_string_view(__sv_type __svt) noexcept
          4 ( 0.00%)        { return __svt; }
          .           
          .                 // Wraps a string_view by explicit conversion and thus
          .                 // allows to add an internal constructor that does not
          .                 // participate in overload resolution when a string_view
          .                 // is provided.
          .                 struct __sv_wrapper
          .                 {
         18 ( 0.00%)  	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
          .           	__sv_type _M_sv;
          .                 };
          .           
          .                 /**
          .                  *  @brief  Only internally used: Construct string from a string view
          .                  *          wrapper.
          .                  *  @param  __svw  string view wrapper.
          .                  *  @param  __a  Allocator to use.
          .                  */
          .                 explicit
         12 ( 0.00%)        basic_string(__sv_wrapper __svw, const _Alloc& __a)
         19 ( 0.00%)        : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
        358 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&) (1x)
          8 ( 0.00%)  => /usr/include/c++/9/string_view:std::basic_string_view<char, std::char_traits<char> >::data() const (1x)
          8 ( 0.00%)  => /usr/include/c++/9/string_view:std::basic_string_view<char, std::char_traits<char> >::size() const (1x)
          .           #endif
          .           
          .                 // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 47,267,011 ( 0.46%)        struct _Alloc_hider : allocator_type // TODO check __is_final
 17,188,004 ( 0.17%)  => ???:0x000000000010c380 (4,297,001x)
          .                 {
          .           #if __cplusplus < 201103L
          .           	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
          .           	: allocator_type(__a), _M_p(__dat) { }
          .           #else
      1,820 ( 0.00%)  	_Alloc_hider(pointer __dat, const _Alloc& __a)
      2,860 ( 0.00%)  	: allocator_type(__a), _M_p(__dat) { }
      1,040 ( 0.00%)  => ???:0x000000000010c5a0 (260x)
          .           
 30,077,180 ( 0.29%)  	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 60,154,360 ( 0.58%)  	: allocator_type(std::move(__a)), _M_p(__dat) { }
 30,077,180 ( 0.29%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) (4,296,740x)
 17,186,960 ( 0.17%)  => ???:0x000000000010c5a0 (4,296,740x)
          .           #endif
          .           
          .           	pointer _M_p; // The actual data.
          .                 };
          .           
          .                 _Alloc_hider	_M_dataplus;
          .                 size_type		_M_string_length;
          .           
-- line 172 ----------------------------------------
-- line 174 ----------------------------------------
          .           
          .                 union
          .                 {
          .           	_CharT           _M_local_buf[_S_local_capacity + 1];
          .           	size_type        _M_allocated_capacity;
          .                 };
          .           
          .                 void
         55 ( 0.00%)        _M_data(pointer __p)
         66 ( 0.00%)        { _M_dataplus._M_p = __p; }
          .           
          .                 void
 60,385,085 ( 0.59%)        _M_length(size_type __length)
 72,462,102 ( 0.70%)        { _M_string_length = __length; }
          .           
          .                 pointer
260,351,064 ( 2.52%)        _M_data() const
260,351,064 ( 2.52%)        { return _M_dataplus._M_p; }
          .           
          .                 pointer
 21,485,015 ( 0.21%)        _M_local_data()
          .                 {
          .           #if __cplusplus >= 201103L
 17,188,012 ( 0.17%)  	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
116,019,081 ( 1.12%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char*>::pointer_to(char&) (4,297,003x)
          .           #else
          .           	return pointer(_M_local_buf);
          .           #endif
  8,594,006 ( 0.08%)        }
          .           
          .                 const_pointer
 60,385,120 ( 0.59%)        _M_local_data() const
          .                 {
          .           #if __cplusplus >= 201103L
 48,308,096 ( 0.47%)  	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
326,079,648 ( 3.16%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<char const*>::pointer_to(char const&) (12,077,024x)
          .           #else
          .           	return const_pointer(_M_local_buf);
          .           #endif
 24,154,048 ( 0.23%)        }
          .           
          .                 void
         40 ( 0.00%)        _M_capacity(size_type __capacity)
         48 ( 0.00%)        { _M_allocated_capacity = __capacity; }
          .           
          .                 void
108,693,126 ( 1.05%)        _M_set_length(size_type __n)
          .                 {
 60,385,070 ( 0.59%)  	_M_length(__n);
132,847,154 ( 1.29%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) (12,077,014x)
120,770,140 ( 1.17%)  	traits_type::assign(_M_data()[__n], _CharT());
144,924,168 ( 1.40%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) (12,077,014x)
 96,616,112 ( 0.94%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (12,077,014x)
 72,462,084 ( 0.70%)        }
          .           
          .                 bool
 72,462,144 ( 0.70%)        _M_is_local() const
157,001,312 ( 1.52%)        { return _M_data() == _M_local_data(); }
458,926,912 ( 4.45%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const (12,077,024x)
 96,616,192 ( 0.94%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (12,077,024x)
          .           
          .                 // Create & Destroy
          .                 pointer
          .                 _M_create(size_type&, size_type);
          .           
          .                 void
 21,485,020 ( 0.21%)        _M_dispose()
          .                 {
 25,782,024 ( 0.25%)  	if (!_M_is_local())
279,305,260 ( 2.71%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (4,297,004x)
         36 ( 0.00%)  	  _M_destroy(_M_allocated_capacity);
        968 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long) (6x)
 12,891,012 ( 0.12%)        }
          .           
          .                 void
         48 ( 0.00%)        _M_destroy(size_type __size) throw()
        114 ( 0.00%)        { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
        716 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::deallocate(std::allocator<char>&, char*, unsigned long) (6x)
         48 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (6x)
         42 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (6x)
          .           
          .                 // _M_construct_aux is used to implement the 21.3.1 para 15 which
          .                 // requires special behaviour if _InIterator is an integral type
          .                 template<typename _InIterator>
          .                   void
 42,967,410 ( 0.42%)          _M_construct_aux(_InIterator __beg, _InIterator __end,
          .           			 std::__false_type)
          .           	{
          .                     typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 25,780,446 ( 0.25%)            _M_construct(__beg, __end, _Tag());
        888 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) (4x)
 25,780,446 ( 0.25%)  	}
          .           
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 438. Ambiguity in the "do the right thing" clause
          .                 template<typename _Integer>
          .                   void
          .                   _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
          .           	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
          .           
          .                 void
          .                 _M_construct_aux_2(size_type __req, _CharT __c)
          .                 { _M_construct(__req, __c); }
          .           
          .                 template<typename _InIterator>
          .                   void
 30,077,187 ( 0.29%)          _M_construct(_InIterator __beg, _InIterator __end)
          .           	{
          .           	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 25,780,446 ( 0.25%)  	  _M_construct_aux(__beg, __end, _Integral());
1,053,782,988 (10.21%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) (4,296,737x)
 12,890,223 ( 0.12%)          }
          .           
          .                 // For Input Iterators, used in istreambuf_iterators, etc.
          .                 template<typename _InIterator>
          .                   void
          .                   _M_construct(_InIterator __beg, _InIterator __end,
          .           		     std::input_iterator_tag);
          .           
          .                 // For forward_iterators up to random_access_iterators, used for
-- line 279 ----------------------------------------
-- line 282 ----------------------------------------
          .                   void
          .                   _M_construct(_FwdIterator __beg, _FwdIterator __end,
          .           		     std::forward_iterator_tag);
          .           
          .                 void
          .                 _M_construct(size_type __req, _CharT __c);
          .           
          .                 allocator_type&
         64 ( 0.00%)        _M_get_allocator()
         48 ( 0.00%)        { return _M_dataplus; }
          .           
          .                 const allocator_type&
 34,372,920 ( 0.33%)        _M_get_allocator() const
 25,779,690 ( 0.25%)        { return _M_dataplus; }
          .           
          .               private:
          .           
          .           #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
          .                 // The explicit instantiations in misc-inst.cc require this due to
          .                 // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
          .                 template<typename _Tp, bool _Requires =
          .           	       !__are_same<_Tp, _CharT*>::__value
-- line 303 ----------------------------------------
-- line 316 ----------------------------------------
          .           	if (__pos > this->size())
          .           	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
          .           				       "this->size() (which is %zu)"),
          .           				   __s, __pos, this->size());
          .           	return __pos;
          .                 }
          .           
          .                 void
 38,668,338 ( 0.37%)        _M_check_length(size_type __n1, size_type __n2, const char* __s) const
          .                 {
 64,447,230 ( 0.62%)  	if (this->max_size() - (this->size() - __n1) < __n2)
163,266,316 ( 1.58%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (4,296,482x)
 34,371,856 ( 0.33%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (4,296,482x)
          .           	  __throw_length_error(__N(__s));
 21,482,410 ( 0.21%)        }
          .           
          .           
          .                 // NB: _M_limit doesn't check for a bad __pos value.
          .                 size_type
          .                 _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
          .                 {
          .           	const bool __testoff =  __off < this->size() - __pos;
          .           	return __testoff ? __off : this->size() - __pos;
          .                 }
          .           
          .                 // True if _Rep and source do not overlap.
          .                 bool
  4,064,750 ( 0.04%)        _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
          .                 {
  3,658,275 ( 0.04%)  	return (less<const _CharT*>()(__s, _M_data())
  4,877,700 ( 0.05%)  => /usr/include/c++/9/bits/stl_function.h:std::less<char const*>::operator()(char const*, char const*) const (406,475x)
  3,251,800 ( 0.03%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (406,475x)
  1,625,900 ( 0.02%)  		|| less<const _CharT*>()(_M_data() + this->size(), __s));
  2,845,325 ( 0.03%)        }
          .           
          .                 // When __n = 1 way faster than the general multichar
          .                 // traits_type::copy/move/assign.
          .                 static void
 54,461,946 ( 0.53%)        _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
          .                 {
 15,560,556 ( 0.15%)  	if (__n == 1)
  4,066,045 ( 0.04%)  	  traits_type::assign(*__d, *__s);
  9,758,508 ( 0.09%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) (813,209x)
          .           	else
 41,802,414 ( 0.41%)  	  traits_type::copy(__d, __s, __n);
247,839,613 ( 2.40%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::copy(char*, char const*, unsigned long) (6,967,069x)
 24,154,043 ( 0.23%)        }
          .           
          .                 static void
          .                 _S_move(_CharT* __d, const _CharT* __s, size_type __n)
          .                 {
          .           	if (__n == 1)
          .           	  traits_type::assign(*__d, *__s);
          .           	else
          .           	  traits_type::move(__d, __s, __n);
          .                 }
          .           
          .                 static void
 31,122,088 ( 0.30%)        _S_assign(_CharT* __d, size_type __n, _CharT __c)
          .                 {
  7,780,522 ( 0.08%)  	if (__n == 1)
 19,451,305 ( 0.19%)  	  traits_type::assign(*__d, __c);
 46,683,132 ( 0.45%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::assign(char&, char const&) (3,890,261x)
          .           	else
          .           	  traits_type::assign(__d, __n, __c);
 15,561,044 ( 0.15%)        }
          .           
          .                 // _S_copy_chars is a separate template to permit specialization
          .                 // to optimize for the common case of pointers as iterators.
          .                 template<class _Iterator>
          .                   static void
          .                   _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
          .                   {
          .           	  for (; __k1 != __k2; ++__k1, (void)++__p)
-- line 382 ----------------------------------------
-- line 388 ----------------------------------------
          .                 { _S_copy_chars(__p, __k1.base(), __k2.base()); }
          .           
          .                 static void
          .                 _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
          .                 _GLIBCXX_NOEXCEPT
          .                 { _S_copy_chars(__p, __k1.base(), __k2.base()); }
          .           
          .                 static void
 30,077,159 ( 0.29%)        _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 47,264,107 ( 0.46%)        { _S_copy(__p, __k1, __k2 - __k1); }
215,918,831 ( 2.09%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (4,296,737x)
          .           
          .                 static void
         28 ( 0.00%)        _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
          .                 _GLIBCXX_NOEXCEPT
         44 ( 0.00%)        { _S_copy(__p, __k1, __k2 - __k1); }
        196 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (4x)
          .           
          .                 static int
          .                 _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
          .                 {
          .           	const difference_type __d = difference_type(__n1 - __n2);
          .           
          .           	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
          .           	  return __gnu_cxx::__numeric_traits<int>::__max;
-- line 410 ----------------------------------------
-- line 444 ----------------------------------------
          .                 basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
          .                 : _M_dataplus(_M_local_data(), __a)
          .                 { _M_set_length(0); }
          .           
          .                 /**
          .                  *  @brief  Construct string with copy of value of @a __str.
          .                  *  @param  __str  Source string.
          .                  */
 42,967,370 ( 0.42%)        basic_string(const basic_string& __str)
          .                 : _M_dataplus(_M_local_data(),
 90,231,477 ( 0.87%)  		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
163,276,006 ( 1.58%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (4,296,737x)
163,276,006 ( 1.58%)  => /usr/include/c++/9/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&) (4,296,737x)
137,495,584 ( 1.33%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) (4,296,737x)
 30,077,159 ( 0.29%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const (4,296,737x)
 17,186,948 ( 0.17%)  => ???:0x000000000010c510 (4,296,737x)
107,418,425 ( 1.04%)        { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
1,122,530,780 (10.88%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) (4,296,737x)
 68,747,792 ( 0.67%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (8,593,474x)
 34,373,896 ( 0.33%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (4,296,737x)
          .           
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 2583. no way to supply an allocator for basic_string(str, pos)
          .                 /**
          .                  *  @brief  Construct string as copy of a substring.
          .                  *  @param  __str  Source string.
          .                  *  @param  __pos  Index of first character to copy from.
          .                  *  @param  __a  Allocator to use.
-- line 463 ----------------------------------------
-- line 506 ----------------------------------------
          .                  *  @brief  Construct string initialized by a character %array.
          .                  *  @param  __s  Source character %array.
          .                  *  @param  __n  Number of characters to copy.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  *
          .                  *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
          .                  *  has no special meaning.
          .                  */
          9 ( 0.00%)        basic_string(const _CharT* __s, size_type __n,
          .           		   const _Alloc& __a = _Alloc())
         10 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
         38 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (1x)
         22 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (1x)
         13 ( 0.00%)        { _M_construct(__s, __s + __n); }
        266 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*) (1x)
          .           
          .                 /**
          .                  *  @brief  Construct string as copy of a C string.
          .                  *  @param  __s  Source C string.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 3076. basic_string CTAD ambiguity
          .                 template<typename = _RequireAllocator<_Alloc>>
          .           #endif
         24 ( 0.00%)        basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
         30 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
        114 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (3x)
         66 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (3x)
         54 ( 0.00%)        { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
        774 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*) (3x)
         74 ( 0.00%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) (3x)
          .           
          .                 /**
          .                  *  @brief  Construct string as multiple characters.
          .                  *  @param  __n  Number of characters.
          .                  *  @param  __c  Character to use.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .                 // 3076. basic_string CTAD ambiguity
          .                 template<typename = _RequireAllocator<_Alloc>>
          .           #endif
      2,560 ( 0.00%)        basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      2,560 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
      9,728 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (256x)
      5,632 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (256x)
      2,816 ( 0.00%)        { _M_construct(__n, __c); }
     34,816 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char) (256x)
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Move construct string.
          .                  *  @param  __str  Source string.
          .                  *
          .                  *  The newly-created string contains the exact contents of @a __str.
          .                  *  @a __str is a valid, but unspecified string.
          .                  **/
         24 ( 0.00%)        basic_string(basic_string&& __str) noexcept
         42 ( 0.00%)        : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
        114 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (3x)
         96 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&) (3x)
         21 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::allocator<char>&>::type&& std::move<std::allocator<char>&>(std::allocator<char>&) (3x)
         21 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (3x)
          .                 {
         15 ( 0.00%)  	if (__str._M_is_local())
        195 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (3x)
          .           	  {
          .           	    traits_type::copy(_M_local_buf, __str._M_local_buf,
          .           			      _S_local_capacity + 1);
          .           	  }
          .           	else
          .           	  {
         24 ( 0.00%)  	    _M_data(__str._M_data());
         33 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (3x)
         24 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (3x)
         18 ( 0.00%)  	    _M_capacity(__str._M_allocated_capacity);
         33 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (3x)
          .           	  }
          .           
          .           	// Must use _M_length() here not _M_set_length() because
          .           	// basic_stringbuf relies on writing into unallocated capacity so
          .           	// we mess up the contents if we put a '\0' in the string.
         24 ( 0.00%)  	_M_length(__str.length());
         33 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long) (3x)
         24 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (3x)
         24 ( 0.00%)  	__str._M_data(__str._M_local_data());
        114 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (3x)
         33 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (3x)
         12 ( 0.00%)  	__str._M_set_length(0);
        183 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (3x)
         18 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  Construct string from an initializer %list.
          .                  *  @param  __l  std::initializer_list of characters.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .                 basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
          .                 : _M_dataplus(_M_local_data(), __a)
-- line 584 ----------------------------------------
-- line 646 ----------------------------------------
          .           
          .                 /**
          .                  *  @brief  Construct string from a string_view.
          .                  *  @param  __t  Source object convertible to string view.
          .                  *  @param  __a  Allocator to use (default is default allocator).
          .                  */
          .                 template<typename _Tp, typename = _If_sv<_Tp, void>>
          .           	explicit
         11 ( 0.00%)  	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
         26 ( 0.00%)  	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
        405 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&) (1x)
         18 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >) (1x)
         12 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >) (1x)
          .           #endif // C++17
          .           
          .                 /**
          .                  *  @brief  Destroy the string instance.
          .                  */
 21,485,005 ( 0.21%)        ~basic_string()
 38,673,009 ( 0.37%)        { _M_dispose(); }
339,464,083 ( 3.29%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() (4,297,001x)
 64,455,015 ( 0.62%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() (4,297,001x)
          .           
          .                 /**
          .                  *  @brief  Assign the value of @a str to this string.
          .                  *  @param  __str  Source string.
          .                  */
          .                 basic_string&
 34,835,300 ( 0.34%)        operator=(const basic_string& __str)
          .                 {
          .           #if __cplusplus >= 201103L
 10,450,590 ( 0.10%)  	if (_Alloc_traits::_S_propagate_on_copy_assign())
 20,901,180 ( 0.20%)  => /usr/include/c++/9/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_propagate_on_copy_assign() (3,483,530x)
          .           	  {
          .           	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
          .           		&& _M_get_allocator() != __str._M_get_allocator())
          .           	      {
          .           		// Propagating allocator cannot free existing storage so must
          .           		// deallocate it before replacing current allocator.
          .           		if (__str.size() <= _S_local_capacity)
          .           		  {
-- line 680 ----------------------------------------
-- line 692 ----------------------------------------
          .           		    _M_data(__ptr);
          .           		    _M_capacity(__len);
          .           		    _M_set_length(__len);
          .           		  }
          .           	      }
          .           	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
          .           	  }
          .           #endif
 17,417,650 ( 0.17%)  	return this->assign(__str);
982,935,644 ( 9.53%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,483,530x)
 24,384,710 ( 0.24%)        }
          .           
          .                 /**
          .                  *  @brief  Copy contents of @a s into this string.
          .                  *  @param  __s  Source null-terminated string.
          .                  */
          .                 basic_string&
  2,438,850 ( 0.02%)        operator=(const _CharT* __s)
  2,845,325 ( 0.03%)        { return this->assign(__s); }
161,777,050 ( 1.57%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*) (406,475x)
          .           
          .                 /**
          .                  *  @brief  Set value to string of length 1.
          .                  *  @param  __c  Source character.
          .                  *
          .                  *  Assigning to a character makes this string length 1 and
          .                  *  (*this)[0] == @a c.
          .                  */
-- line 717 ----------------------------------------
-- line 926 ----------------------------------------
          .                 { return const_reverse_iterator(this->begin()); }
          .           #endif
          .           
          .               public:
          .                 // Capacity:
          .                 ///  Returns the number of characters in the string, not including any
          .                 ///  null-termination.
          .                 size_type
 98,237,872 ( 0.95%)        size() const _GLIBCXX_NOEXCEPT
 98,237,872 ( 0.95%)        { return _M_string_length; }
          .           
          .                 ///  Returns the number of characters in the string, not including any
          .                 ///  null-termination.
          .                 size_type
 49,933,956 ( 0.48%)        length() const _GLIBCXX_NOEXCEPT
 49,933,956 ( 0.48%)        { return _M_string_length; }
          .           
          .                 ///  Returns the size() of the largest possible %string.
          .                 size_type
 21,482,465 ( 0.21%)        max_size() const _GLIBCXX_NOEXCEPT
 38,668,437 ( 0.37%)        { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 73,040,381 ( 0.71%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::max_size(std::allocator<char> const&) (4,296,493x)
 30,075,451 ( 0.29%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const (4,296,493x)
          .           
          .                 /**
          .                  *  @brief  Resizes the %string to the specified number of characters.
          .                  *  @param  __n  Number of characters the %string should contain.
          .                  *  @param  __c  Character to fill any new elements.
          .                  *
          .                  *  This function will %resize the %string to the specified
          .                  *  number of characters.  If the number is smaller than the
-- line 954 ----------------------------------------
-- line 989 ----------------------------------------
          .                 }
          .           #endif
          .           
          .                 /**
          .                  *  Returns the total number of characters that the %string can hold
          .                  *  before needing to allocate more memory.
          .                  */
          .                 size_type
 38,900,085 ( 0.38%)        capacity() const _GLIBCXX_NOEXCEPT
          .                 {
 46,680,104 ( 0.45%)  	return _M_is_local() ? size_type(_S_local_capacity)
505,701,105 ( 4.90%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const (7,780,017x)
  7,780,015 ( 0.08%)  	                     : _M_allocated_capacity;
 15,560,034 ( 0.15%)        }
          .           
          .                 /**
          .                  *  @brief  Attempt to preallocate enough memory for specified number of
          .                  *          characters.
          .                  *  @param  __res_arg  Number of characters required.
          .                  *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
          .                  *
          .                  *  This function attempts to reserve enough memory for the
-- line 1009 ----------------------------------------
-- line 1259 ----------------------------------------
          .                 }
          .           
          .                 /**
          .                  *  @brief  Append a C string.
          .                  *  @param __s  The C string to append.
          .                  *  @return  Reference to this string.
          .                  */
          .                 basic_string&
         12 ( 0.00%)        append(const _CharT* __s)
          .                 {
          .           	__glibcxx_requires_string(__s);
          8 ( 0.00%)  	const size_type __n = traits_type::length(__s);
         74 ( 0.00%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) (2x)
         12 ( 0.00%)  	_M_check_length(size_type(0), __n, "basic_string::append");
        150 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (2x)
         12 ( 0.00%)  	return _M_append(__s, __n);
      1,648 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (2x)
          4 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  Append multiple characters.
          .                  *  @param __n  The number of characters to append.
          .                  *  @param __c  The character to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  Appends __n copies of __c to this string.
          .                  */
          .                 basic_string&
 35,010,045 ( 0.34%)        append(size_type __n, _CharT __c)
 62,240,080 ( 0.60%)        { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1,314,822,238 (12.74%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) (3,890,005x)
 31,120,040 ( 0.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,890,005x)
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Append an initializer_list of characters.
          .                  *  @param __l  The initializer_list of characters to append.
          .                  *  @return  Reference to this string.
          .                  */
          .                 basic_string&
-- line 1293 ----------------------------------------
-- line 1360 ----------------------------------------
          .                 }
          .           
          .                 /**
          .                  *  @brief  Set value to contents of another string.
          .                  *  @param  __str  Source string to use.
          .                  *  @return  Reference to this string.
          .                  */
          .                 basic_string&
 20,901,180 ( 0.20%)        assign(const basic_string& __str)
          .                 {
 17,417,650 ( 0.17%)  	this->_M_assign(__str);
934,166,224 ( 9.05%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,483,530x)
  3,483,530 ( 0.03%)  	return *this;
  6,967,060 ( 0.07%)        }
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Set value to contents of another string.
          .                  *  @param  __str  Source string to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  This function sets this string to the exact contents of @a __str.
-- line 1380 ----------------------------------------
-- line 1431 ----------------------------------------
          .                  *  @param __s  The C string to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  This function sets the value of this string to the value of @a __s.
          .                  *  The data is copied, so there is no dependence on @a __s once the
          .                  *  function returns.
          .                  */
          .                 basic_string&
  2,845,325 ( 0.03%)        assign(const _CharT* __s)
          .                 {
          .           	__glibcxx_requires_string(__s);
          .           	return _M_replace(size_type(0), this->size(), __s,
  6,503,600 ( 0.06%)  			  traits_type::length(__s));
138,607,975 ( 1.34%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) (406,475x)
  8,942,450 ( 0.09%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::length(char const*) (406,475x)
  3,251,800 ( 0.03%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (406,475x)
  1,625,900 ( 0.02%)        }
          .           
          .                 /**
          .                  *  @brief  Set value to multiple characters.
          .                  *  @param __n  Length of the resulting string.
          .                  *  @param __c  The character to use.
          .                  *  @return  Reference to this string.
          .                  *
          .                  *  This function sets the value of this string to @a __n copies of
-- line 1452 ----------------------------------------
-- line 2308 ----------------------------------------
          .                  *  @brief  Return const pointer to contents.
          .                  *
          .                  *  This is a pointer to internal data.  It is undefined to modify
          .                  *  the contents through the returned pointer. To get a pointer that
          .                  *  allows modifying the contents use @c &str[0] instead,
          .                  *  (or in C++17 the non-const @c str.data() overload).
          .                 */
          .                 const _CharT*
 62,416,120 ( 0.60%)        data() const _GLIBCXX_NOEXCEPT
 62,416,120 ( 0.60%)        { return _M_data(); }
 99,865,792 ( 0.97%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (12,483,224x)
          .           
          .           #if __cplusplus >= 201703L
          .                 /**
          .                  *  @brief  Return non-const pointer to contents.
          .                  *
          .                  *  This is a pointer to the character sequence held by the string.
          .                  *  Modifying the characters in the sequence is allowed.
          .                 */
-- line 2325 ----------------------------------------
-- line 6068 ----------------------------------------
          .             /**
          .              *  @brief  Concatenate string and character.
          .              *  @param __lhs  First string.
          .              *  @param __rhs  Last string.
          .              *  @return  New string with @a __lhs followed by @a __rhs.
          .              */
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
 46,680,060 ( 0.45%)      operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
          .               {
          .                 typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
          .                 typedef typename __string_type::size_type		__size_type;
 19,450,025 ( 0.19%)        __string_type __str(__lhs);
1,789,226,495 (17.34%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,005x)
 19,450,025 ( 0.19%)        __str.append(__size_type(1), __rhs);
1,443,192,403 (13.99%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char) (3,890,005x)
  3,890,005 ( 0.04%)        return __str;
 31,120,040 ( 0.30%)      }
          .           
          .           #if __cplusplus >= 201103L
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
          .           	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
          .               { return std::move(__lhs.append(__rhs)); }
          .           
-- line 6091 ----------------------------------------
-- line 6116 ----------------------------------------
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
          .               operator+(_CharT __lhs,
          .           	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
          .               { return std::move(__rhs.insert(0, 1, __lhs)); }
          .           
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
         14 ( 0.00%)      operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
          .           	      const _CharT* __rhs)
         30 ( 0.00%)      { return std::move(__lhs.append(__rhs)); }
      1,920 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*) (2x)
        750 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (2x)
         14 ( 0.00%)  => /usr/include/c++/9/bits/move.h:std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (2x)
          .           
          .             template<typename _CharT, typename _Traits, typename _Alloc>
          .               inline basic_string<_CharT, _Traits, _Alloc>
          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
          .           	      _CharT __rhs)
          .               { return std::move(__lhs.append(1, __rhs)); }
          .           #endif
          .           
-- line 6134 ----------------------------------------
-- line 6144 ----------------------------------------
          .               operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
          .           	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
          .               _GLIBCXX_NOEXCEPT
          .               { return __lhs.compare(__rhs) == 0; }
          .           
          .             template<typename _CharT>
          .               inline
          .               typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
 31,120,048 ( 0.30%)      operator==(const basic_string<_CharT>& __lhs,
          .           	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
 27,230,042 ( 0.26%)      { return (__lhs.size() == __rhs.size()
 62,240,096 ( 0.60%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (7,780,012x)
 81,690,126 ( 0.79%)  	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
169,824,634 ( 1.65%)  => /usr/include/c++/9/bits/char_traits.h:std::char_traits<char>::compare(char const*, char const*, unsigned long) (3,890,006x)
140,040,216 ( 1.36%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const (7,780,012x)
 31,120,048 ( 0.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,890,006x)
 19,450,030 ( 0.19%)  						    __lhs.size())); }
          .           
          .             /**
          .              *  @brief  Test equivalence of C string and string.
          .              *  @param __lhs  C string.
          .              *  @param __rhs  String.
          .              *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
          .              */
          .             template<typename _CharT, typename _Traits, typename _Alloc>
-- line 6164 ----------------------------------------
-- line 6729 ----------------------------------------
          .           
          .           #ifndef _GLIBCXX_COMPATIBILITY_CXX0X
          .             /// std::hash specialization for string.
          .             template<>
          .               struct hash<string>
          .               : public __hash_base<size_t, string>
          .               {
          .                 size_t
 32,922,484 ( 0.32%)        operator()(const string& __s) const noexcept
 70,548,180 ( 0.68%)        { return std::_Hash_impl::hash(__s.data(), __s.length()); }
315,629,567 ( 3.06%)  => /usr/include/c++/9/bits/functional_hash.h:std::_Hash_impl::hash(void const*, unsigned long, unsigned long) (4,703,212x)
 84,657,816 ( 0.82%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const (4,703,212x)
 37,625,696 ( 0.36%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (4,703,212x)
          .               };
          .           
          .             template<>
          .               struct __is_fast_hash<hash<string>> : std::false_type
          .               { };
          .           
          .           #ifdef _GLIBCXX_USE_WCHAR_T
          .             /// std::hash specialization for wstring.
-- line 6746 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/new
--------------------------------------------------------------------------------
Ir                 

-- line 166 ----------------------------------------
        .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
        .           void operator delete[](void*, std::size_t, std::align_val_t)
        .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
        .           #endif // __cpp_sized_deallocation
        .           #endif // __cpp_aligned_new
        .           
        .           // Default placement versions of operator new.
        .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
6,507,696 ( 0.06%)  { return __p; }
        .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
        .           { return __p; }
        .           
        .           // Default placement versions of operator delete.
        .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
        .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
        .           //@}
        .           } // extern "C++"
-- line 182 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
         .           
         .                 __aligned_buffer() = default;
         .           
         .                 // Can be used to avoid value-initialization
         .                 __aligned_buffer(std::nullptr_t) { }
         .           
         .                 void*
22,066,764 ( 0.21%)        _M_addr() noexcept
         .                 {
 5,516,691 ( 0.05%)          return static_cast<void*>(&_M_storage);
11,033,382 ( 0.11%)        }
         .           
         .                 const void*
         .                 _M_addr() const noexcept
         .                 {
         .                   return static_cast<const void*>(&_M_storage);
         .                 }
         .           
         .                 _Tp*
27,583,455 ( 0.27%)        _M_ptr() noexcept
27,583,455 ( 0.27%)        { return static_cast<_Tp*>(_M_addr()); }
38,616,837 ( 0.37%)  => /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_addr() (5,516,691x)
         .           
         .                 const _Tp*
         .                 _M_ptr() const noexcept
         .                 { return static_cast<const _Tp*>(_M_addr()); }
         .               };
         .           #endif
         .           
         .           } // namespace
-- line 123 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/hashtable_policy.h
--------------------------------------------------------------------------------
Ir                   

-- line 84 ----------------------------------------
          .                 operator()(_Tp&& __x) const
          .                 { return std::forward<_Tp>(__x); }
          .             };
          .           
          .             struct _Select1st
          .             {
          .               template<typename _Tp>
          .                 auto
 23,340,132 ( 0.23%)        operator()(_Tp&& __x) const
          .                 -> decltype(std::get<0>(std::forward<_Tp>(__x)))
 27,230,154 ( 0.26%)        { return std::get<0>(std::forward<_Tp>(__x)); }
 66,130,374 ( 0.64%)  => /usr/include/c++/9/utility:std::tuple_element<0ul, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) (3,890,022x)
 27,230,154 ( 0.26%)  => /usr/include/c++/9/bits/move.h:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>::type&) (3,890,022x)
          .             };
          .           
          .             template<typename _NodeAlloc>
          .               struct _Hashtable_alloc;
          .           
          .             // Functor recycling a pool of nodes and using allocation once the pool is
          .             // empty.
          .             template<typename _NodeAlloc>
-- line 102 ----------------------------------------
-- line 210 ----------------------------------------
          .              *  template parameter of class template _Hashtable controls whether
          .              *  nodes also store a hash code. In some cases (e.g. strings) this
          .              *  may be a performance win.
          .              */
          .             struct _Hash_node_base
          .             {
          .               _Hash_node_base* _M_nxt;
          .           
  3,660,588 ( 0.04%)      _Hash_node_base() noexcept : _M_nxt() { }
          .           
          .               _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
          .             };
          .           
          .             /**
          .              *  struct _Hash_node_value_base
          .              *
          .              *  Node type with the value to store.
          .              */
          .             template<typename _Value>
  4,474,041 ( 0.04%)      struct _Hash_node_value_base : _Hash_node_base
  3,660,579 ( 0.04%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (406,731x)
          .               {
          .                 typedef _Value value_type;
          .           
          .                 __gnu_cxx::__aligned_buffer<_Value> _M_storage;
          .           
          .                 _Value*
 27,583,455 ( 0.27%)        _M_valptr() noexcept
 33,100,146 ( 0.32%)        { return _M_storage._M_ptr(); }
 93,783,747 ( 0.91%)  => /usr/include/c++/9/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_ptr() (5,516,691x)
          .           
          .                 const _Value*
          .                 _M_valptr() const noexcept
          .                 { return _M_storage._M_ptr(); }
          .           
          .                 _Value&
 21,482,490 ( 0.21%)        _M_v() noexcept
 21,482,490 ( 0.21%)        { return *_M_valptr(); }
120,301,944 ( 1.17%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (4,296,498x)
          .           
          .                 const _Value&
          .                 _M_v() const noexcept
          .                 { return *_M_valptr(); }
          .               };
          .           
          .             /**
          .              *  Primary template struct _Hash_node.
-- line 253 ----------------------------------------
-- line 256 ----------------------------------------
          .               struct _Hash_node;
          .           
          .             /**
          .              *  Specialization for nodes with caches, struct _Hash_node.
          .              *
          .              *  Base class is __detail::_Hash_node_value_base.
          .              */
          .             template<typename _Value>
  4,474,041 ( 0.04%)      struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value>
  8,134,620 ( 0.08%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_Hash_node_value_base() (406,731x)
          .               {
          .                 std::size_t  _M_hash_code;
          .           
          .                 _Hash_node*
 21,334,724 ( 0.21%)        _M_next() const noexcept
 21,334,724 ( 0.21%)        { return static_cast<_Hash_node*>(this->_M_nxt); }
          .               };
          .           
          .             /**
          .              *  Specialization for nodes without caches, struct _Hash_node.
          .              *
          .              *  Base class is __detail::_Hash_node_value_base.
          .              */
          .             template<typename _Value>
-- line 278 ----------------------------------------
-- line 286 ----------------------------------------
          .             /// Base class for node iterators.
          .             template<typename _Value, bool _Cache_hash_code>
          .               struct _Node_iterator_base
          .               {
          .                 using __node_type = _Hash_node<_Value, _Cache_hash_code>;
          .           
          .                 __node_type*  _M_cur;
          .           
 21,483,685 ( 0.21%)        _Node_iterator_base(__node_type* __p) noexcept
 25,780,422 ( 0.25%)        : _M_cur(__p) { }
          .           
          .                 void
          .                 _M_incr() noexcept
          .                 { _M_cur = _M_cur->_M_next(); }
          .               };
          .           
          .             template<typename _Value, bool _Cache_hash_code>
          .               inline bool
          .               operator==(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
          .           	       const _Node_iterator_base<_Value, _Cache_hash_code >& __y)
          .               noexcept
          .               { return __x._M_cur == __y._M_cur; }
          .           
          .             template<typename _Value, bool _Cache_hash_code>
          .               inline bool
 19,450,025 ( 0.19%)      operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
          .           	       const _Node_iterator_base<_Value, _Cache_hash_code>& __y)
          .               noexcept
 31,120,040 ( 0.30%)      { return __x._M_cur != __y._M_cur; }
          .           
          .             /// Node iterators, used to iterate through all the hashtable.
          .             template<typename _Value, bool __constant_iterators, bool __cache>
          .               struct _Node_iterator
          .               : public _Node_iterator_base<_Value, __cache>
          .               {
          .               private:
          .                 using __base_type = _Node_iterator_base<_Value, __cache>;
-- line 322 ----------------------------------------
-- line 332 ----------------------------------------
          .           
          .                 using reference = typename std::conditional<__constant_iterators,
          .           						  const _Value&, _Value&>::type;
          .           
          .                 _Node_iterator() noexcept
          .                 : __base_type(0) { }
          .           
          .                 explicit
 25,780,416 ( 0.25%)        _Node_iterator(__node_type* __p) noexcept
 34,373,888 ( 0.33%)        : __base_type(__p) { }
 47,264,096 ( 0.46%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (4,296,736x)
          .           
          .                 reference
          .                 operator*() const noexcept
          .                 { return this->_M_cur->_M_v(); }
          .           
          .                 pointer
  2,033,655 ( 0.02%)        operator->() const noexcept
  2,440,386 ( 0.02%)        { return this->_M_cur->_M_valptr(); }
 11,388,468 ( 0.11%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (406,731x)
          .           
          .                 _Node_iterator&
          .                 operator++() noexcept
          .                 {
          .           	this->_M_incr();
          .           	return *this;
          .                 }
          .           
-- line 357 ----------------------------------------
-- line 380 ----------------------------------------
          .           
          .                 typedef const _Value*				pointer;
          .                 typedef const _Value&				reference;
          .           
          .                 _Node_const_iterator() noexcept
          .                 : __base_type(0) { }
          .           
          .                 explicit
          6 ( 0.00%)        _Node_const_iterator(__node_type* __p) noexcept
          8 ( 0.00%)        : __base_type(__p) { }
         11 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (1x)
          .           
          .                 _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,
          .           			   __cache>& __x) noexcept
          .                 : __base_type(__x._M_cur) { }
          .           
          .                 reference
          .                 operator*() const noexcept
          .                 { return this->_M_cur->_M_v(); }
-- line 397 ----------------------------------------
-- line 423 ----------------------------------------
          .             /// into the range [0, N).
          .             struct _Mod_range_hashing
          .             {
          .               typedef std::size_t first_argument_type;
          .               typedef std::size_t second_argument_type;
          .               typedef std::size_t result_type;
          .           
          .               result_type
 46,914,258 ( 0.45%)      operator()(first_argument_type __num,
          .           	       second_argument_type __den) const noexcept
 46,914,258 ( 0.45%)      { return __num % __den; }
          .             };
          .           
          .             /// Default ranged hash function H.  In principle it should be a
          .             /// function object composed from objects of type H1 and H2 such that
          .             /// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
          .             /// h1 and h2.  So instead we'll just use a tag to tell class template
          .             /// hashtable to do that composition.
          .             struct _Default_ranged_hash { };
          .           
          .             /// Default value for rehash policy.  Bucket size is (usually) the
          .             /// smallest prime that keeps the load factor small enough.
          .             struct _Prime_rehash_policy
          .             {
          .               using __has_load_factor = std::true_type;
          .           
          5 ( 0.00%)      _Prime_rehash_policy(float __z = 1.0) noexcept
          8 ( 0.00%)      : _M_max_load_factor(__z), _M_next_resize(0) { }
          .           
          .               float
          .               max_load_factor() const noexcept
          .               { return _M_max_load_factor; }
          .           
          .               // Return a bucket size no smaller than n.
          .               std::size_t
          .               _M_next_bkt(std::size_t __n) const;
-- line 458 ----------------------------------------
-- line 468 ----------------------------------------
          .               // is the new bucket count.  If not, return make_pair(false, 0).
          .               std::pair<bool, std::size_t>
          .               _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
          .           		   std::size_t __n_ins) const;
          .           
          .               typedef std::size_t _State;
          .           
          .               _State
  1,626,924 ( 0.02%)      _M_state() const
  1,626,924 ( 0.02%)      { return _M_next_resize; }
          .           
          .               void
          .               _M_reset() noexcept
          .               { _M_next_resize = 0; }
          .           
          .               void
          .               _M_reset(_State __state)
          .               { _M_next_resize = __state; }
-- line 485 ----------------------------------------
-- line 681 ----------------------------------------
          .                 const mapped_type&
          .                 at(const key_type& __k) const;
          .               };
          .           
          .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
          .           	   typename _H1, typename _H2, typename _Hash,
          .           	   typename _RehashPolicy, typename _Traits>
          .               auto
  7,318,863 ( 0.07%)      _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
          .           	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
          .               operator[](const key_type& __k)
          .               -> mapped_type&
          .               {
  1,626,414 ( 0.02%)        __hashtable* __h = static_cast<__hashtable*>(this);
  4,879,242 ( 0.05%)        __hash_code __code = __h->_M_hash_code(__k);
120,506,581 ( 1.17%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (813,207x)
  5,692,449 ( 0.06%)        std::size_t __n = __h->_M_bucket_index(__k, __code);
 52,045,248 ( 0.50%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (813,207x)
  5,692,449 ( 0.06%)        __node_type* __p = __h->_M_find_node(__n, __k, __code);
256,534,963 ( 2.49%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (813,207x)
          .           
  1,626,414 ( 0.02%)        if (!__p)
          .           	{
  4,880,772 ( 0.05%)  	  __p = __h->_M_allocate_node(std::piecewise_construct,
484,926,326 ( 4.70%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (406,731x)
 15,862,509 ( 0.15%)  => /usr/include/c++/9/tuple:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::tuple<void, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,731x)
          .           				      std::tuple<const key_type&>(__k),
          .           				      std::tuple<>());
  5,287,503 ( 0.05%)  	  return __h->_M_insert_unique_node(__n, __code, __p)->second;
165,981,058 ( 1.61%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) (406,731x)
 15,862,509 ( 0.15%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::operator->() const (406,731x)
          .           	}
          .           
  1,625,904 ( 0.02%)        return __p->_M_v().second;
 15,446,088 ( 0.15%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() (406,476x)
  4,066,035 ( 0.04%)      }
          .           
          .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
          .           	   typename _H1, typename _H2, typename _Hash,
          .           	   typename _RehashPolicy, typename _Traits>
          .               auto
          .               _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
          .           	      _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
          .               operator[](key_type&& __k)
-- line 716 ----------------------------------------
-- line 1085 ----------------------------------------
          .              *  final) and when it is worth it (the type is empty.)
          .              */
          .             template<int _Nm, typename _Tp,
          .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
          .               struct _Hashtable_ebo_helper;
          .           
          .             /// Specialization using EBO.
          .             template<int _Nm, typename _Tp>
         11 ( 0.00%)      struct _Hashtable_ebo_helper<_Nm, _Tp, true>
         18 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::~allocator() (1x)
          .               : private _Tp
          .               {
         11 ( 0.00%)        _Hashtable_ebo_helper() = default;
         18 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::allocator() (1x)
          .           
          .                 template<typename _OtherTp>
          .           	_Hashtable_ebo_helper(_OtherTp&& __tp)
          .           	  : _Tp(std::forward<_OtherTp>(__tp))
          .           	{ }
          .           
          .                 static const _Tp&
 98,996,500 ( 0.96%)        _S_cget(const _Hashtable_ebo_helper& __eboh)
 74,247,375 ( 0.72%)        { return static_cast<const _Tp&>(__eboh); }
          .           
          .                 static _Tp&
  6,507,888 ( 0.06%)        _S_get(_Hashtable_ebo_helper& __eboh)
  4,880,916 ( 0.05%)        { return static_cast<_Tp&>(__eboh); }
          .               };
          .           
          .             /// Specialization not using EBO.
          .             template<int _Nm, typename _Tp>
          .               struct _Hashtable_ebo_helper<_Nm, _Tp, false>
          .               {
          .                 _Hashtable_ebo_helper() = default;
          .           
-- line 1117 ----------------------------------------
-- line 1372 ----------------------------------------
          .                 // We need the default constructor for _Hashtable default constructor.
          .                 _Hash_code_base() = default;
          .                 _Hash_code_base(const _ExtractKey& __ex,
          .           		      const _H1& __h1, const _H2& __h2,
          .           		      const _Default_ranged_hash&)
          .                 : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2) { }
          .           
          .                 __hash_code
 28,219,272 ( 0.27%)        _M_hash_code(const _Key& __k) const
          .                 {
          .           	static_assert(__is_invocable<const _H1&, const _Key&>{},
          .           	    "hash function must be invocable with an argument of key type");
 37,625,696 ( 0.36%)  	return _M_h1()(__k);
541,383,743 ( 5.25%)  => /usr/include/c++/9/bits/basic_string.h:std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (4,703,212x)
 79,954,604 ( 0.77%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const (4,703,212x)
  9,406,424 ( 0.09%)        }
          .           
          .                 std::size_t
 37,625,824 ( 0.36%)        _M_bucket_index(const _Key&, __hash_code __c,
          .           		      std::size_t __n) const
 51,735,508 ( 0.50%)        { return _M_h2()(__c, __n); }
 79,954,876 ( 0.77%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const (4,703,228x)
 56,438,736 ( 0.55%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (4,703,228x)
          .           
          .                 std::size_t
 21,810,705 ( 0.21%)        _M_bucket_index(const __node_type* __p, std::size_t __n) const
          .           	noexcept( noexcept(declval<const _H2&>()((__hash_code)0,
          .           						 (std::size_t)0)) )
 37,389,780 ( 0.36%)        { return _M_h2()(__p->_M_hash_code, __n); }
 52,968,855 ( 0.51%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const (3,115,815x)
 37,389,780 ( 0.36%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (3,115,815x)
          .           
          .                 void
  2,440,386 ( 0.02%)        _M_store_code(__node_type* __n, __hash_code __c) const
  2,440,386 ( 0.02%)        { __n->_M_hash_code = __c; }
          .           
          .                 void
          .                 _M_copy_code(__node_type* __to, const __node_type* __from) const
          .                 { __to->_M_hash_code = __from->_M_hash_code; }
          .           
          .                 void
          .                 _M_swap(_Hash_code_base& __x)
          .                 {
          .           	std::swap(_M_extract(), __x._M_extract());
          .           	std::swap(_M_h1(), __x._M_h1());
          .           	std::swap(_M_h2(), __x._M_h2());
          .                 }
          .           
          .                 const _ExtractKey&
 61,134,350 ( 0.59%)        _M_extract() const { return __ebo_extract_key::_S_cget(*this); }
 42,794,045 ( 0.41%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true> const&) (6,113,435x)
          .           
          .                 _ExtractKey&
        160 ( 0.00%)        _M_extract() { return __ebo_extract_key::_S_get(*this); }
        112 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>&) (16x)
          .           
          .                 const _H1&
 47,032,120 ( 0.46%)        _M_h1() const { return __ebo_h1::_S_cget(*this); }
 32,922,484 ( 0.32%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) (4,703,212x)
          .           
          .                 _H1&
          .                 _M_h1() { return __ebo_h1::_S_get(*this); }
          .           
          .                 const _H2&
 78,190,430 ( 0.76%)        _M_h2() const { return __ebo_h2::_S_cget(*this); }
 54,733,301 ( 0.53%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true> const&) (7,819,043x)
          .           
          .                 _H2&
          .                 _M_h2() { return __ebo_h2::_S_get(*this); }
          .               };
          .           
          .             /**
          .              *  Primary class template _Equal_helper.
          .              *
-- line 1435 ----------------------------------------
-- line 1440 ----------------------------------------
          .             struct _Equal_helper;
          .           
          .             /// Specialization.
          .             template<typename _Key, typename _Value, typename _ExtractKey,
          .           	   typename _Equal, typename _HashCodeType>
          .             struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
          .             {
          .               static bool
 55,020,915 ( 0.53%)      _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
          .           	      const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
108,924,147 ( 1.06%)      { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
617,175,324 ( 5.98%)  => /usr/include/c++/9/bits/stl_function.h:std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (3,890,006x)
147,820,228 ( 1.43%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() (3,890,006x)
143,930,222 ( 1.39%)  => /usr/include/c++/9/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) const (3,890,006x)
          .             };
          .           
          .             /// Specialization.
          .             template<typename _Key, typename _Value, typename _ExtractKey,
          .           	   typename _Equal, typename _HashCodeType>
          .             struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>
          .             {
          .               static bool
-- line 1458 ----------------------------------------
-- line 1821 ----------------------------------------
          .             protected:
          .               _Hashtable_base() = default;
          .               _Hashtable_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2,
          .           		    const _Hash& __hash, const _Equal& __eq)
          .               : __hash_code_base(__ex, __h1, __h2, __hash), _EqualEBO(__eq)
          .               { }
          .           
          .               bool
 55,020,915 ( 0.53%)      _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
          .               {
          .                 static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
          .           	  "key equality predicate must be invocable with two arguments of "
          .           	  "key type");
 97,814,960 ( 0.95%)        return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(),
1,072,870,836 (10.40%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Equal_helper<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, true>::_S_equals(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, std::__detail::_Select1st const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (6,113,435x)
103,928,395 ( 1.01%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const (6,113,435x)
103,928,395 ( 1.01%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const (6,113,435x)
          .           				     __k, __c, __n);
 24,453,740 ( 0.24%)      }
          .           
          .               void
          .               _M_swap(_Hashtable_base& __x)
          .               {
          .                 __hash_code_base::_M_swap(__x);
          .                 std::swap(_M_eq(), __x._M_eq());
          .               }
          .           
          .               const _Equal&
 61,134,350 ( 0.59%)      _M_eq() const { return _EqualEBO::_S_cget(*this); }
 42,794,045 ( 0.41%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> const&) (6,113,435x)
          .           
          .               _Equal&
          .               _M_eq() { return _EqualEBO::_S_get(*this); }
          .             };
          .           
          .             /**
          .              *  struct _Equality_base.
          .              *
-- line 1854 ----------------------------------------
-- line 2009 ----------------------------------------
          .                 return true;
          .               }
          .           
          .             /**
          .              * This type deals with all allocation and keeps an allocator instance through
          .              * inheritance to benefit from EBO when possible.
          .              */
          .             template<typename _NodeAlloc>
         11 ( 0.00%)      struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
         29 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::~_Hashtable_ebo_helper() (1x)
          .               {
          .               private:
          .                 using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
          .               public:
          .                 using __node_type = typename _NodeAlloc::value_type;
          .                 using __node_alloc_type = _NodeAlloc;
          .                 // Use __gnu_cxx to benefit from _S_always_equal and al.
          .                 using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;
-- line 2025 ----------------------------------------
-- line 2028 ----------------------------------------
          .           	rebind_traits<typename __node_type::value_type>;
          .           
          .                 using __node_base = __detail::_Hash_node_base;
          .                 using __bucket_type = __node_base*;      
          .                 using __bucket_alloc_type =
          .           	__alloc_rebind<__node_alloc_type, __bucket_type>;
          .                 using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;
          .           
         11 ( 0.00%)        _Hashtable_alloc() = default;
         29 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::_Hashtable_ebo_helper() (1x)
          .                 _Hashtable_alloc(const _Hashtable_alloc&) = default;
          .                 _Hashtable_alloc(_Hashtable_alloc&&) = default;
          .           
          .                 template<typename _Alloc>
          .           	_Hashtable_alloc(_Alloc&& __a)
          .           	  : __ebo_node_alloc(std::forward<_Alloc>(__a))
          .           	{ }
          .           
          .                 __node_alloc_type&
  8,134,780 ( 0.08%)        _M_node_allocator()
  8,134,780 ( 0.08%)        { return __ebo_node_alloc::_S_get(*this); }
 11,388,692 ( 0.11%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >, true>&) (1,626,956x)
          .           
          .                 const __node_alloc_type&
          .                 _M_node_allocator() const
          .                 { return __ebo_node_alloc::_S_cget(*this); }
          .           
          .                 template<typename... _Args>
          .           	__node_type*
          .           	_M_allocate_node(_Args&&... __args);
-- line 2055 ----------------------------------------
-- line 2071 ----------------------------------------
          .                 _M_deallocate_buckets(__bucket_type*, std::size_t __n);
          .               };
          .           
          .             // Definitions of class template _Hashtable_alloc's out-of-line member
          .             // functions.
          .             template<typename _NodeAlloc>
          .               template<typename... _Args>
          .                 typename _Hashtable_alloc<_NodeAlloc>::__node_type*
  4,880,772 ( 0.05%)        _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
          .                 {
  2,847,117 ( 0.03%)  	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
101,341,180 ( 0.98%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, unsigned long) (406,731x)
  6,914,427 ( 0.07%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (406,731x)
  1,626,924 ( 0.02%)  	__node_type* __n = std::__to_address(__nptr);
  2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/ptr_traits.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>* std::__to_address<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
          .           	__try
          .           	  {
  2,440,386 ( 0.02%)  	    ::new ((void*)__n) __node_type;
 12,608,661 ( 0.12%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_Hash_node() (406,731x)
  3,253,848 ( 0.03%)  => /usr/include/c++/9/new:operator new(unsigned long, void*) (406,731x)
 10,168,275 ( 0.10%)  	    __node_alloc_traits::construct(_M_node_allocator(),
305,492,794 ( 2.96%)  => /usr/include/c++/9/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (406,731x)
  6,914,427 ( 0.07%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (406,731x)
 11,388,468 ( 0.11%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (406,731x)
  2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (406,731x)
  2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (406,731x)
  2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type&) (406,731x)
          .           					   __n->_M_valptr(),
          .           					   std::forward<_Args>(__args)...);
    813,462 ( 0.01%)  	    return __n;
          .           	  }
          .           	__catch(...)
          .           	  {
          .           	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
          .           	    __throw_exception_again;
          .           	  }
  2,847,117 ( 0.03%)        }
          .           
          .             template<typename _NodeAlloc>
          .               void
  2,847,117 ( 0.03%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
          .               {
  4,067,310 ( 0.04%)        __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 58,976,179 ( 0.57%)  => /usr/include/c++/9/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*) (406,731x)
 11,388,468 ( 0.11%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_valptr() (406,731x)
  6,914,427 ( 0.07%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (406,731x)
  2,033,655 ( 0.02%)        _M_deallocate_node_ptr(__n);
 82,159,480 ( 0.80%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
  2,033,655 ( 0.02%)      }
          .           
          .             template<typename _NodeAlloc>
          .               void
  2,440,386 ( 0.02%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
          .               {
          .                 typedef typename __node_alloc_traits::pointer _Ptr;
  1,626,924 ( 0.02%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 10,981,737 ( 0.11%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>&) (406,731x)
          .                 __n->~__node_type();
  3,660,579 ( 0.04%)        __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 55,315,234 ( 0.54%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >&, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) (406,731x)
  6,914,427 ( 0.07%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (406,731x)
  1,220,193 ( 0.01%)      }
          .           
          .             template<typename _NodeAlloc>
          .               void
          6 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
          .               {
  1,220,195 ( 0.01%)        while (__n)
          .           	{
    813,462 ( 0.01%)  	  __node_type* __tmp = __n;
  1,626,924 ( 0.02%)  	  __n = __n->_M_next();
  3,253,848 ( 0.03%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (406,731x)
  2,033,655 ( 0.02%)  	  _M_deallocate_node(__tmp);
170,420,291 ( 1.65%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
          .           	}
          3 ( 0.00%)      }
          .           
          .             template<typename _NodeAlloc>
          .               typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
        160 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
          .               {
        176 ( 0.00%)        __bucket_alloc_type __alloc(_M_node_allocator());
        304 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > const&) (16x)
        288 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() (16x)
        272 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (16x)
          .           
         96 ( 0.00%)        auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
      4,935 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) (16x)
         64 ( 0.00%)        __bucket_type* __p = std::__to_address(__ptr);
        112 ( 0.00%)  => /usr/include/c++/9/bits/ptr_traits.h:std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) (16x)
         96 ( 0.00%)        __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
 11,235,128 ( 0.11%)  => ???:0x000000000010c440 (16x)
         32 ( 0.00%)        return __p;
        112 ( 0.00%)      }
          .           
          .             template<typename _NodeAlloc>
          .               void
        176 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
          .           							std::size_t __n)
          .               {
          .                 typedef typename __bucket_alloc_traits::pointer _Ptr;
         64 ( 0.00%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
        432 ( 0.00%)  => /usr/include/c++/9/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) (16x)
        176 ( 0.00%)        __bucket_alloc_type __alloc(_M_node_allocator());
        304 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > const&) (16x)
        288 ( 0.00%)  => /usr/include/c++/9/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() (16x)
        272 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_node_allocator() (16x)
         96 ( 0.00%)        __bucket_alloc_traits::deallocate(__alloc, __ptr, __n);
      2,077 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) (16x)
        128 ( 0.00%)      }
          .           
          .            ///@} hashtable-detail
          .           } // namespace __detail
          .           _GLIBCXX_END_NAMESPACE_VERSION
          .           } // namespace std
          .           
          .           #endif // _HASHTABLE_POLICY_H

--------------------------------------------------------------------------------
-- Auto-annotated source: bitio.cc
--------------------------------------------------------------------------------
Ir                   

-- line 22 ----------------------------------------
          .           int BitInput::read_n_bits(int n){
          .               int b = 0;
          .               for (int i= n-1; i >=0; i--){
          .                   b |= (input_bit()<<i);
          .               }
          .               return b;
          .           }
          .           
         15 ( 0.00%)  BitOutput::BitOutput(std::ostream& os): output_stream(os), index(CHAR_BIT-1), buffer(0) {}
          .           
          .           // if there is anything in buffer, we need to output upon destruction
          5 ( 0.00%)  BitOutput::~BitOutput(){
         12 ( 0.00%)      if(output_stream){
          6 ( 0.00%)  => ???:0x000000000010c550 (1x)
          4 ( 0.00%)          if(index<CHAR_BIT-1){
          8 ( 0.00%)              output_stream.put(buffer);
         64 ( 0.00%)  => ???:0x000000000010c360 (1x)
          .                   }
          .               }
          3 ( 0.00%)   }
          .           
          .           
 73,175,613 ( 0.71%)  void BitOutput::output_bit(bool bit){
          .           
 41,814,636 ( 0.41%)      if (index == CHAR_BIT-1){
  2,613,416 ( 0.03%)          buffer = 0;
          .               }
          .           
          .               // we are going left to right, so save the bit then decrement the index
146,351,226 ( 1.42%)      buffer |= (bit<<index--);
          .           
          .               // if we've been given a whole byte, output it then start a new buffer
 41,814,636 ( 0.41%)      if (index == -1){
 10,453,656 ( 0.10%)          output_stream.put(buffer);
 83,656,740 ( 0.81%)  => ???:0x000000000010c360 (1,306,707x)
  2,613,414 ( 0.03%)          index = CHAR_BIT-1;
          .               }
 31,360,977 ( 0.30%)  }
          .           
  5,690,664 ( 0.06%)  void BitOutput::output_n_bits(int bits, int n){
 45,879,388 ( 0.44%)      for (int i = n-1; i>=0; --i){
135,897,541 ( 1.32%)          output_bit((bits>>i)&1);
433,854,176 ( 4.20%)  => bitio.cc:BitOutput::output_bit(bool) (10,453,657x)
          .               }
  2,438,877 ( 0.02%)  }
        120 ( 0.00%)  => bitio.cc:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_iterator_base_types.h
--------------------------------------------------------------------------------
Ir                  

-- line 197 ----------------------------------------
         .           
         .             /**
         .              *  This function is not a part of the C++ standard but is syntactic
         .              *  sugar for internal library use only.
         .             */
         .             template<typename _Iter>
         .               inline _GLIBCXX_CONSTEXPR
         .               typename iterator_traits<_Iter>::iterator_category
17,186,964 ( 0.17%)      __iterator_category(const _Iter&)
 8,593,482 ( 0.08%)      { return typename iterator_traits<_Iter>::iterator_category(); }
         .           
         .             ///@}
         .           
         .           #if __cplusplus < 201103L
         .             // If _Iterator has a base returns it otherwise _Iterator is returned
         .             // untouched
         .             template<typename _Iterator, bool _HasBase>
         .               struct _Iter_base
-- line 214 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/type_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 144 ----------------------------------------
         .           
         .             template<>
         .               struct __remove_unsigned<wchar_t>;
         .           
         .           
         .             // For use in string and vstring.
         .             template<typename _Type>
         .               inline bool
17,186,964 ( 0.17%)      __is_null_pointer(_Type* __ptr)
17,186,964 ( 0.17%)      { return __ptr == 0; }
         .           
         .             template<typename _Type>
         .               inline bool
         .               __is_null_pointer(_Type)
         .               { return false; }
         .           
         .           #if __cplusplus >= 201103L
         .             inline bool
-- line 161 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir                  

-- line 72 ----------------------------------------
         .           
         .           #if __cplusplus >= 201103L
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 2103. propagate_on_container_move_assignment
         .                 typedef std::true_type propagate_on_container_move_assignment;
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
       231 ( 0.00%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 template<typename _Tp1>
         .           	_GLIBCXX20_CONSTEXPR
         .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         .           
       231 ( 0.00%)        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 pointer
         .                 address(reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           
         .                 const_pointer
         .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           
         .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
         .                 // about what the return value is when __n == 0.
         .                 _GLIBCXX_NODISCARD pointer
 2,847,278 ( 0.03%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
         .                 {
 2,847,278 ( 0.03%)  	if (__n > this->max_size())
 2,847,117 ( 0.03%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::max_size() const (406,731x)
         .           	  std::__throw_bad_alloc();
         .           
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
         .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         .           	  }
         .           #endif
 3,253,956 ( 0.03%)  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
83,038,285 ( 0.80%)  => ???:0x000000000010c4f0 (406,731x)
   813,508 ( 0.01%)        }
         .           
         .                 // __p is not permitted to be a null pointer.
         .                 void
 2,847,271 ( 0.03%)        deallocate(pointer __p, size_type)
         .                 {
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         .           	    return;
         .           	  }
         .           #endif
 1,220,259 ( 0.01%)  	::operator delete(__p);
43,926,766 ( 0.43%)  => ???:0x000000000010c4d0 (406,731x)
   813,506 ( 0.01%)        }
         .           
         .                 size_type
18,812,988 ( 0.18%)        max_size() const _GLIBCXX_USE_NOEXCEPT
         .                 {
         .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
 4,703,247 ( 0.05%)  	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
         .           #else
         .           	return size_t(-1) / sizeof(_Tp);
         .           #endif
 9,406,494 ( 0.09%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 template<typename _Up, typename... _Args>
         .           	void
 6,100,965 ( 0.06%)  	construct(_Up* __p, _Args&&... __args)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
13,422,123 ( 0.13%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
222,519,670 ( 2.16%)  => /usr/include/c++/9/tuple:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<>) (406,731x)
28,877,901 ( 0.28%)  => /usr/include/c++/9/tuple:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&) (406,731x)
 3,253,848 ( 0.03%)  => /usr/include/c++/9/new:operator new(unsigned long, void*) (406,731x)
 2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (406,731x)
 2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (406,731x)
 2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type&) (406,731x)
         .           
         .                 template<typename _Up>
         .           	void
 2,440,386 ( 0.02%)  	destroy(_Up* __p)
         .           	noexcept(std::is_nothrow_destructible<_Up>::value)
 2,440,386 ( 0.02%)  	{ __p->~_Up(); }
48,401,173 ( 0.47%)  => /usr/include/c++/9/bits/stl_pair.h:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::~pair() (406,731x)
         .           #else
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 402. wrong new expression in [some_] allocator::construct
         .                 void
         .                 construct(pointer __p, const _Tp& __val)
         .                 { ::new((void *)__p) _Tp(__val); }
         .           
         .                 void
-- line 160 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/tuple
--------------------------------------------------------------------------------
Ir                 

-- line 105 ----------------------------------------
        .           	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
        .           	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
        .           
        .                 template<typename _Alloc, typename _UHead>
        .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
        .           	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
        .           
        .                 static constexpr _Head&
       28 ( 0.00%)        _M_head(_Head_base& __b) noexcept { return __b; }
        .           
        .                 static constexpr const _Head&
        .                 _M_head(const _Head_base& __b) noexcept { return __b; }
        .               };
        .           
        .             template<std::size_t _Idx, typename _Head>
        .               struct _Head_base<_Idx, _Head, false>
        .               {
        .                 constexpr _Head_base()
        .                 : _M_head_impl() { }
        .           
4,067,310 ( 0.04%)        constexpr _Head_base(const _Head& __h)
4,880,772 ( 0.05%)        : _M_head_impl(__h) { }
        .           
        .                 constexpr _Head_base(const _Head_base&) = default;
        .                 constexpr _Head_base(_Head_base&&) = default;
        .           
        .                 template<typename _UHead>
        .                   constexpr _Head_base(_UHead&& __h)
        .           	: _M_head_impl(std::forward<_UHead>(__h)) { }
        .           
-- line 134 ----------------------------------------
-- line 152 ----------------------------------------
        .           	: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
        .           	{ }
        .           
        .                 template<typename _Alloc, typename _UHead>
        .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
        .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
        .           
        .                 static constexpr _Head&
6,507,724 ( 0.06%)        _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
        .           
        .                 static constexpr const _Head&
        .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
        .           
        .                 _Head _M_head_impl;
        .               };
        .           
        .             /**
-- line 168 ----------------------------------------
-- line 187 ----------------------------------------
        .                 private _Head_base<_Idx, _Head>
        .               {
        .                 template<std::size_t, typename...> friend class _Tuple_impl;
        .           
        .                 typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
        .                 typedef _Head_base<_Idx, _Head> _Base;
        .           
        .                 static constexpr _Head&
       40 ( 0.00%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
       28 ( 0.00%)  => /usr/include/c++/9/tuple:std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head(std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>&) (4x)
        .           
        .                 static constexpr const _Head&
        .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
        .           
        .                 static constexpr _Inherited&
        .                 _M_tail(_Tuple_impl& __t) noexcept { return __t; }
        .           
        .                 static constexpr const _Inherited&
-- line 203 ----------------------------------------
-- line 326 ----------------------------------------
        .               struct _Tuple_impl<_Idx, _Head>
        .               : private _Head_base<_Idx, _Head>
        .               {
        .                 template<std::size_t, typename...> friend class _Tuple_impl;
        .           
        .                 typedef _Head_base<_Idx, _Head> _Base;
        .           
        .                 static constexpr _Head&
8,134,660 ( 0.08%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
       28 ( 0.00%)  => /usr/include/c++/9/tuple:std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head(std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>&) (4x)
        .           
        .                 static constexpr const _Head&
        .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
        .           
        .                 constexpr _Tuple_impl()
        .                 : _Base() { }
        .           
        .                 explicit
2,440,386 ( 0.02%)        constexpr _Tuple_impl(const _Head& __head)
3,253,848 ( 0.03%)        : _Base(__head) { }
4,474,041 ( 0.04%)  => /usr/include/c++/9/tuple:std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, false>::_Head_base(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,731x)
        .           
        .                 template<typename _UHead>
        .                   explicit
        .                   constexpr _Tuple_impl(_UHead&& __head)
        .           	: _Base(std::forward<_UHead>(__head)) { }
        .           
        .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 2729. Missing SFINAE on std::pair::operator=
        .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
        .           
        .                 constexpr
2,847,117 ( 0.03%)        _Tuple_impl(_Tuple_impl&& __in)
        .                 noexcept(is_nothrow_move_constructible<_Head>::value)
5,694,234 ( 0.06%)        : _Base(std::forward<_Head>(_M_head(__in))) { }
7,321,158 ( 0.07%)  => /usr/include/c++/9/tuple:std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::_M_head(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&) (406,731x)
4,474,041 ( 0.04%)  => /usr/include/c++/9/tuple:std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, false>::_Head_base(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,731x)
2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&) (406,731x)
        .           
        .                 template<typename _UHead>
        .                   constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
        .           	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
        .           
        .                 template<typename _UHead>
        .                   constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
        .           	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
-- line 368 ----------------------------------------
-- line 580 ----------------------------------------
        .                 template<typename _Dummy = void,
        .                          typename enable_if<
        .                            _TCC<_Dummy>::template
        .                              _ConstructibleTuple<_Elements...>()
        .                            && _TCC<_Dummy>::template
        .                              _ImplicitlyConvertibleTuple<_Elements...>()
        .                            && (sizeof...(_Elements) >= 1),
        .                          bool>::type=true>
2,440,386 ( 0.02%)          constexpr tuple(const _Elements&... __elements)
3,253,848 ( 0.03%)        : _Inherited(__elements...) { }
10,168,275 ( 0.10%)  => /usr/include/c++/9/tuple:std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::_Tuple_impl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,731x)
        .           
        .                 template<typename _Dummy = void,
        .                          typename enable_if<
        .                            _TCC<_Dummy>::template
        .                              _ConstructibleTuple<_Elements...>()
        .                            && !_TCC<_Dummy>::template
        .                              _ImplicitlyConvertibleTuple<_Elements...>()
        .                            && (sizeof...(_Elements) >= 1),
-- line 597 ----------------------------------------
-- line 634 ----------------------------------------
        .                               _ImplicitlyMoveConvertibleTuple<_UElements...>()
        .                             && (sizeof...(_Elements) >= 1),
        .                   bool>::type=false>
        .                   explicit constexpr tuple(_UElements&&... __elements)
        .           	: _Inherited(std::forward<_UElements>(__elements)...) {	}
        .           
        .                 constexpr tuple(const tuple&) = default;
        .           
5,694,234 ( 0.06%)        constexpr tuple(tuple&&) = default;
23,183,667 ( 0.22%)  => /usr/include/c++/9/tuple:std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::_Tuple_impl(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&) (406,731x)
        .           
        .                 // Shortcut for the cases where constructors taking tuples
        .                 // must avoid creating temporaries.
        .                 template<typename _Dummy> using _TNTC =
        .                   _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
        .                       _Elements...>;
        .           
        .                 template<typename... _UElements, typename _Dummy = void, typename
-- line 650 ----------------------------------------
-- line 1301 ----------------------------------------
        .               struct tuple_element<__i, tuple<>>
        .               {
        .                 static_assert(__i < tuple_size<tuple<>>::value,
        .           	  "tuple index is in range");
        .               };
        .           
        .             template<std::size_t __i, typename _Head, typename... _Tail>
        .               constexpr _Head&
2,033,695 ( 0.02%)      __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
2,033,695 ( 0.02%)      { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
       68 ( 0.00%)  => /usr/include/c++/9/tuple:std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&) (4x)
        .           
        .             template<std::size_t __i, typename _Head, typename... _Tail>
        .               constexpr const _Head&
        .               __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
        .               { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
        .           
        .             /// Return a reference to the ith element of a tuple.
        .             template<std::size_t __i, typename... _Elements>
        .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&
2,033,695 ( 0.02%)      get(tuple<_Elements...>& __t) noexcept
2,033,695 ( 0.02%)      { return std::__get_helper<__i>(__t); }
      108 ( 0.00%)  => /usr/include/c++/9/tuple:std::filesystem::__cxx11::path::_List::_Impl_deleter& std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&) (4x)
        .           
        .             /// Return a const reference to the ith element of a const tuple.
        .             template<std::size_t __i, typename... _Elements>
        .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
        .               get(const tuple<_Elements...>& __t) noexcept
        .               { return std::__get_helper<__i>(__t); }
        .           
        .             /// Return an rvalue reference to the ith element of a tuple rvalue.
-- line 1329 ----------------------------------------
-- line 1650 ----------------------------------------
        .             /// Partial specialization for tuples
        .             template<typename... _Types, typename _Alloc>
        .               struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
        .           
        .             // See stl_pair.h...
        .             template<class _T1, class _T2>
        .               template<typename... _Args1, typename... _Args2>
        .                 inline
2,440,386 ( 0.02%)        pair<_T1, _T2>::
        .                 pair(piecewise_construct_t,
        .           	   tuple<_Args1...> __first, tuple<_Args2...> __second)
        .                 : pair(__first, __second,
        .           	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
2,440,386 ( 0.02%)  	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
216,418,705 ( 2.10%)  => /usr/include/c++/9/tuple:std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, 0ul>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) (406,731x)
1,220,193 ( 0.01%)        { }
        .           
        .             template<class _T1, class _T2>
        .               template<typename... _Args1, std::size_t... _Indexes1,
        .                        typename... _Args2, std::size_t... _Indexes2>
        .                 inline
3,253,848 ( 0.03%)        pair<_T1, _T2>::
        .                 pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
        .           	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
1,220,193 ( 0.01%)        : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
15,455,778 ( 0.15%)  => /usr/include/c++/9/tuple:std::tuple_element<0ul, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&) (406,731x)
3,253,848 ( 0.03%)          second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
188,354,266 ( 1.83%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,731x)
2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&) (406,731x)
2,033,655 ( 0.02%)        { }
        .           
        .           #if __cplusplus >= 201703L
        .           # define __cpp_lib_apply 201603
        .           
        .             template <typename _Fn, typename _Tuple, size_t... _Idx>
        .               constexpr decltype(auto)
        .               __apply_impl(_Fn&& __f, _Tuple&& __t, index_sequence<_Idx...>)
        .               {
-- line 1683 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/utility
--------------------------------------------------------------------------------
Ir                  

-- line 166 ----------------------------------------
         .             template<std::size_t _Int>
         .               struct __pair_get;
         .           
         .             template<>
         .               struct __pair_get<0>
         .               {
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr _Tp1&
15,560,088 ( 0.15%)          __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
11,670,066 ( 0.11%)          { return __pair.first; }
         .           
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr _Tp1&&
         .                   __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
         .                   { return std::forward<_Tp1>(__pair.first); }
         .           
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr const _Tp1&
-- line 183 ----------------------------------------
-- line 211 ----------------------------------------
         .                 template<typename _Tp1, typename _Tp2>
         .                   static constexpr const _Tp2&&
         .                   __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
         .                   { return std::forward<const _Tp2>(__pair.second); }
         .               };
         .           
         .             template<std::size_t _Int, class _Tp1, class _Tp2>
         .               constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
19,450,110 ( 0.19%)      get(std::pair<_Tp1, _Tp2>& __in) noexcept
19,450,110 ( 0.19%)      { return __pair_get<_Int>::__get(__in); }
27,230,154 ( 0.26%)  => /usr/include/c++/9/utility:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::__pair_get<0ul>::__get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) (3,890,022x)
         .           
         .             template<std::size_t _Int, class _Tp1, class _Tp2>
         .               constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
         .               get(std::pair<_Tp1, _Tp2>&& __in) noexcept
         .               { return __pair_get<_Int>::__move_get(std::move(__in)); }
         .           
         .             template<std::size_t _Int, class _Tp1, class _Tp2>
         .               constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
-- line 228 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/basic_string.tcc
--------------------------------------------------------------------------------
Ir                  

-- line 124 ----------------------------------------
         .           
         .                 const size_type __tmp_length = length();
         .                 _M_length(__s.length());
         .                 __s._M_length(__tmp_length);
         .               }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               typename basic_string<_CharT, _Traits, _Alloc>::pointer
        56 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_create(size_type& __capacity, size_type __old_capacity)
         .               {
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 83.  String::npos vs. string::max_size()
        63 ( 0.00%)        if (__capacity > max_size())
       266 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (7x)
         .           	std::__throw_length_error(__N("basic_string::_M_create"));
         .           
         .                 // The below implements an exponential growth policy, necessary to
         .                 // meet amortized linear time requirements of the library: see
         .                 // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
        70 ( 0.00%)        if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
         .           	{
        16 ( 0.00%)  	  __capacity = 2 * __old_capacity;
         .           	  // Never allocate a string bigger than max_size.
        36 ( 0.00%)  	  if (__capacity > max_size())
       152 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const (4x)
         .           	    __capacity = max_size();
         .           	}
         .           
         .                 // NB: Need an array of char_type[__capacity], plus a terminating
         .                 // null char_type() element.
        63 ( 0.00%)        return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
       980 ( 0.00%)  => /usr/include/c++/9/bits/alloc_traits.h:std::allocator_traits<std::allocator<char> >::allocate(std::allocator<char>&, unsigned long) (7x)
        49 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() (7x)
        28 ( 0.00%)      }
         .           
         .             // NB: This is the special case for Input Iterators, used in
         .             // istreambuf_iterators, etc.
         .             // Input Iterators have a cost structure very different from
         .             // pointers, calling for a different coding style.
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               template<typename _InIterator>
         .                 void
-- line 162 ----------------------------------------
-- line 198 ----------------------------------------
         .           	  }
         .           
         .           	_M_set_length(__len);
         .                 }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               template<typename _InIterator>
         .                 void
42,967,410 ( 0.42%)        basic_string<_CharT, _Traits, _Alloc>::
         .                 _M_construct(_InIterator __beg, _InIterator __end,
         .           		   std::forward_iterator_tag)
         .                 {
         .           	// NB: Not required, but considered best practice.
34,373,928 ( 0.33%)  	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
        32 ( 0.00%)  => /usr/include/c++/9/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char const>(char const*) (4x)
         .           	  std::__throw_logic_error(__N("basic_string::"
         .           				       "_M_construct null not valid"));
         .           
25,780,446 ( 0.25%)  	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
       124 ( 0.00%)  => /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) (4x)
         .           
12,890,223 ( 0.12%)  	if (__dnew > size_type(_S_local_capacity))
         .           	  {
        22 ( 0.00%)  	    _M_data(_M_create(__dnew, size_type(0)));
       366 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) (2x)
        22 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (2x)
        10 ( 0.00%)  	    _M_capacity(__dnew);
        22 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (2x)
         .           	  }
         .           
         .           	// Check for out_of_range and length_error exceptions.
         .           	__try
38,670,669 ( 0.37%)  	  { this->_S_copy_chars(_M_data(), __beg, __end); }
       268 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*) (4x)
        32 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (4x)
         .           	__catch(...)
         .           	  {
         .           	    _M_dispose();
         .           	    __throw_exception_again;
         .           	  }
         .           
21,483,705 ( 0.21%)  	_M_set_length(__dnew);
       244 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (4x)
25,780,446 ( 0.25%)        }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
     2,560 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_construct(size_type __n, _CharT __c)
         .               {
       768 ( 0.00%)        if (__n > size_type(_S_local_capacity))
         .           	{
         .           	  _M_data(_M_create(__n, size_type(0)));
         .           	  _M_capacity(__n);
         .           	}
         .           
       768 ( 0.00%)        if (__n)
     2,304 ( 0.00%)  	this->_S_assign(_M_data(), __n, __c);
     7,936 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char) (256x)
     2,048 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (256x)
         .           
     1,280 ( 0.00%)        _M_set_length(__n);
    15,616 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (256x)
     1,536 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
34,835,300 ( 0.34%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_assign(const basic_string& __str)
         .               {
10,450,590 ( 0.10%)        if (this != &__str)
         .           	{
13,934,120 ( 0.14%)  	  const size_type __rsize = __str.length();
27,868,240 ( 0.27%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (3,483,530x)
13,934,120 ( 0.14%)  	  const size_type __capacity = capacity();
275,198,870 ( 2.67%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (3,483,530x)
         .           
10,450,590 ( 0.10%)  	  if (__rsize > __capacity)
         .           	    {
         .           	      size_type __new_capacity = __rsize;
         .           	      pointer __tmp = _M_create(__new_capacity, __capacity);
         .           	      _M_dispose();
         .           	      _M_data(__tmp);
         .           	      _M_capacity(__new_capacity);
         .           	    }
         .           
 6,967,060 ( 0.07%)  	  if (__rsize)
45,285,890 ( 0.44%)  	    this->_S_copy(_M_data(), __str._M_data(), __rsize);
181,723,744 ( 1.76%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (3,483,530x)
55,736,480 ( 0.54%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (6,967,060x)
         .           
17,417,650 ( 0.17%)  	  _M_set_length(__rsize);
212,495,330 ( 2.06%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (3,483,530x)
         .           	}
27,868,240 ( 0.27%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
         .               basic_string<_CharT, _Traits, _Alloc>::
         .               reserve(size_type __res)
         .               {
         .                 // Make sure we don't shrink below the current size.
         .                 if (__res < length())
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
         .           	      _M_destroy(__capacity);
         .           	      _M_data(_M_local_data());
         .           	    }
         .           	}
         .               }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
        36 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
         .           	      size_type __len2)
         .               {
        18 ( 0.00%)        const size_type __how_much = length() - __pos - __len1;
        24 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (3x)
         .           
        21 ( 0.00%)        size_type __new_capacity = length() + __len2 - __len1;
        24 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (3x)
        30 ( 0.00%)        pointer __r = _M_create(__new_capacity, capacity());
       702 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) (3x)
       237 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (3x)
         .           
         6 ( 0.00%)        if (__pos)
        27 ( 0.00%)  	this->_S_copy(__r, _M_data(), __pos);
       163 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (3x)
        24 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (3x)
        10 ( 0.00%)        if (__s && __len2)
        16 ( 0.00%)  	this->_S_copy(__r + __pos, __s, __len2);
       106 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (2x)
         6 ( 0.00%)        if (__how_much)
         .           	this->_S_copy(__r + __pos + __len2,
         .           		      _M_data() + __pos + __len1, __how_much);
         .           
         9 ( 0.00%)        _M_dispose();
       237 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() (3x)
        15 ( 0.00%)        _M_data(__r);
        33 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*) (3x)
        15 ( 0.00%)        _M_capacity(__new_capacity);
        33 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long) (3x)
        18 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               void
         .               basic_string<_CharT, _Traits, _Alloc>::
         .               _M_erase(size_type __pos, size_type __n)
         .               {
         .                 const size_type __how_much = length() - __pos - __n;
         .           
-- line 338 ----------------------------------------
-- line 351 ----------------------------------------
         .                 if (__size < __n)
         .           	this->append(__n - __size, __c);
         .                 else if (__n < __size)
         .           	this->_M_set_length(__n);
         .               }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               basic_string<_CharT, _Traits, _Alloc>&
        32 ( 0.00%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_append(const _CharT* __s, size_type __n)
         .               {
        24 ( 0.00%)        const size_type __len = __n + this->size();
        32 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (4x)
         .           
        28 ( 0.00%)        if (__len <= this->capacity())
       316 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (4x)
         .           	{
         4 ( 0.00%)  	  if (__n)
        28 ( 0.00%)  	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
        85 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) (2x)
        16 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (2x)
        16 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (2x)
         .           	}
         .                 else
        24 ( 0.00%)  	this->_M_mutate(this->size(), size_type(0), __s, __n);
     1,250 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (2x)
        16 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (2x)
         .           
        20 ( 0.00%)        this->_M_set_length(__len);
       244 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (4x)
         4 ( 0.00%)        return *this;
        16 ( 0.00%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               template<typename _InputIterator>
         .                 basic_string<_CharT, _Traits, _Alloc>&
         .                 basic_string<_CharT, _Traits, _Alloc>::
         .                 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
         .           			  _InputIterator __k1, _InputIterator __k2,
         .           			  std::__false_type)
-- line 382 ----------------------------------------
-- line 384 ----------------------------------------
         .           	const basic_string __s(__k1, __k2);
         .           	const size_type __n1 = __i2 - __i1;
         .           	return _M_replace(__i1 - begin(), __n1, __s._M_data(),
         .           			  __s.size());
         .                 }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               basic_string<_CharT, _Traits, _Alloc>&
42,790,055 ( 0.41%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
         .           		   _CharT __c)
         .               {
23,340,030 ( 0.23%)        _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
291,750,375 ( 2.83%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (3,890,005x)
         .           
15,560,020 ( 0.15%)        const size_type __old_size = this->size();
31,120,040 ( 0.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (3,890,005x)
19,450,025 ( 0.19%)        const size_type __new_size = __old_size + __n2 - __n1;
         .           
27,230,035 ( 0.26%)        if (__new_size <= this->capacity())
307,310,395 ( 2.98%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (3,890,005x)
         .           	{
23,340,024 ( 0.23%)  	  pointer __p = this->_M_data() + __pos1;
31,120,032 ( 0.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (3,890,004x)
         .           
15,560,016 ( 0.15%)  	  const size_type __how_much = __old_size - __pos1 - __n1;
 7,780,008 ( 0.08%)  	  if (__how_much && __n1 != __n2)
         .           	    this->_S_move(__p + __n2, __p + __n1, __how_much);
         .           	}
         .                 else
         8 ( 0.00%)  	this->_M_mutate(__pos1, __n1, 0, __n2);
       560 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.tcc:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (1x)
         .           
 7,780,010 ( 0.08%)        if (__n2)
42,790,055 ( 0.41%)  	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
120,590,155 ( 1.17%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char) (3,890,005x)
31,120,040 ( 0.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (3,890,005x)
         .           
19,450,025 ( 0.19%)        this->_M_set_length(__new_size);
237,290,305 ( 2.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (3,890,005x)
 3,890,005 ( 0.04%)        return *this;
15,560,020 ( 0.15%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               basic_string<_CharT, _Traits, _Alloc>&
 3,658,275 ( 0.04%)      basic_string<_CharT, _Traits, _Alloc>::
         .               _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
         .           	       const size_type __len2)
         .               {
 2,438,850 ( 0.02%)        _M_check_length(__len1, __len2, "basic_string::_M_replace");
30,485,625 ( 0.30%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const (406,475x)
         .           
 1,625,900 ( 0.02%)        const size_type __old_size = this->size();
 3,251,800 ( 0.03%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const (406,475x)
 2,032,375 ( 0.02%)        const size_type __new_size = __old_size + __len2 - __len1;
         .           
 2,845,325 ( 0.03%)        if (__new_size <= this->capacity())
32,111,525 ( 0.31%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const (406,475x)
         .           	{
 2,438,850 ( 0.02%)  	  pointer __p = this->_M_data() + __pos;
 3,251,800 ( 0.03%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (406,475x)
         .           
 1,625,900 ( 0.02%)  	  const size_type __how_much = __old_size - __pos - __len1;
 2,845,325 ( 0.03%)  	  if (_M_disjunct(__s))
20,323,750 ( 0.20%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const (406,475x)
         .           	    {
   812,950 ( 0.01%)  	      if (__how_much && __len1 != __len2)
         .           		this->_S_move(__p + __len2, __p + __len1, __how_much);
   812,950 ( 0.01%)  	      if (__len2)
         .           		this->_S_copy(__p, __s, __len2);
         .           	    }
         .           	  else
         .           	    {
         .           	      // Work in-place.
         .           	      if (__len2 && __len2 <= __len1)
         .           		this->_S_move(__p, __s, __len2);
         .           	      if (__how_much && __len1 != __len2)
-- line 447 ----------------------------------------
-- line 460 ----------------------------------------
         .           				    __len2 - __nleft);
         .           		    }
         .           		}
         .           	    }
         .           	}
         .                 else
         .           	this->_M_mutate(__pos, __len1, __s, __len2);
         .           
 2,032,375 ( 0.02%)        this->_M_set_length(__new_size);
24,794,975 ( 0.24%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (406,475x)
   406,475 ( 0.00%)        return *this;
   812,950 ( 0.01%)      }
         .           
         .             template<typename _CharT, typename _Traits, typename _Alloc>
         .               typename basic_string<_CharT, _Traits, _Alloc>::size_type
         .               basic_string<_CharT, _Traits, _Alloc>::
         .               copy(_CharT* __s, size_type __n, size_type __pos) const
         .               {
         .                 _M_check(__pos, "basic_string::copy");
         .                 __n = _M_limit(__pos, __n);
-- line 478 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: lzw.cc
--------------------------------------------------------------------------------
Ir                  

-- line 6 ----------------------------------------
         .           #include <fstream>
         .           #include <chrono>
         .           #include <filesystem>
         .           #include <unordered_map>
         .           #include <climits>
         .           
         .           namespace fs = std::filesystem;
         .           
        11 ( 0.00%)  void LZW::encode(std::istream& input, std::ostream& output){
         .               
         .               // initialize starter dictionary
         6 ( 0.00%)      std::unordered_map<std::string, codeword_type> dictionary;
185,070,362 ( 1.79%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::~unordered_map() (1x)
       103 ( 0.00%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::unordered_map() (1x)
     1,541 ( 0.00%)      for (int i = 0; i < STARTING_DICT_SIZE; ++i){
     4,096 ( 0.00%)          std::string str1(1, char(i));
    27,648 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (256x)
    58,112 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&) (256x)
     1,024 ( 0.00%)  => ???:0x000000000010c510 (256x)
     1,024 ( 0.00%)  => ???:0x000000000010c640 (256x)
     2,048 ( 0.00%)          dictionary[str1] = static_cast<codeword_type>(i);
   517,959 ( 0.01%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (256x)
         .               }
         4 ( 0.00%)      auto end = dictionary.cend();
        53 ( 0.00%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::cend() const (1x)
         .            
         8 ( 0.00%)      BitOutput bit_output(output);
       102 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::~BitOutput() (1x)
        15 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::BitOutput(std::ostream&) (1x)
         .           
         .               // the current codeword we are using, and the size of the codewords
         .               // each time we use a codeword we will have to increment so all codewords are unique
         .               // TODO: need to make sure our codewords don't go over the max size of codeword_type
         3 ( 0.00%)      int codeword = STARTING_CODEWORD;
         3 ( 0.00%)      int codeword_size = STARTING_CODE_SIZE;
         7 ( 0.00%)      int max_codeword_size = 1<<STARTING_CODE_SIZE;
         .           
         .               // the pieces of the file we are reading
         .               // current string seen is a string that we've seen before (it is in the dictionary), next_character is the following character that we are looking at
        14 ( 0.00%)      std::string current_string_seen = "";
       108 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
         4 ( 0.00%)  => ???:0x000000000010c510 (1x)
         4 ( 0.00%)  => ???:0x000000000010c640 (1x)
       360 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
         .               char next_character;
         .           
         4 ( 0.00%)      next_character = input.get();
     4,059 ( 0.00%)  => ???:0x000000000010c540 (1x)
         .           
11,670,017 ( 0.11%)      while(next_character != EOF){
         .           
         .                   // increment the codword size if the current codeword becomes too large
11,670,015 ( 0.11%)          if (codeword == max_codeword_size){
        10 ( 0.00%)              codeword_size += 1;
        10 ( 0.00%)              max_codeword_size<<= 1;
         .                   }
         .           
         .                   // if we've already seen the sequence, keep going
         .           
35,010,045 ( 0.34%)          std::string string_seen_plus_new_char = current_string_seen + next_character;
3,353,009,053 (32.49%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char) (3,890,005x)
420,120,704 ( 4.07%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (3,890,005x)
50,570,065 ( 0.49%)          if (dictionary.find(string_seen_plus_new_char) != end ){
2,833,786,025 (27.46%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,005x)
50,570,065 ( 0.49%)  => /usr/include/c++/9/bits/hashtable_policy.h:bool std::__detail::operator!=<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>(std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&, std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const&) (3,890,005x)
20,901,180 ( 0.20%)              current_string_seen = string_seen_plus_new_char;
1,090,925,074 (10.57%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,483,530x)
         .                   }
         .                   else{
         .           
         .                       // lookup the current block in the dictionary and output it, along with the new character
         .                       // shouldn't look up again
 2,845,325 ( 0.03%)              int code = dictionary[current_string_seen];
310,150,219 ( 3.01%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,475x)
 2,438,850 ( 0.02%)              bit_output.output_n_bits(code, codeword_size);
427,423,252 ( 4.14%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (406,475x)
         .                       // TODO: static cast to unsigned (uint8t)
 2,438,850 ( 0.02%)              bit_output.output_n_bits((int) next_character, CHAR_BIT);
196,335,175 ( 1.90%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (406,475x)
         .           
         .                       // add this new sequence to our dictionary
 3,251,800 ( 0.03%)              dictionary[string_seen_plus_new_char] = codeword;
869,764,143 ( 8.43%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (406,475x)
   406,475 ( 0.00%)              codeword += 1;
 1,625,900 ( 0.02%)              current_string_seen = "";
167,061,225 ( 1.62%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*) (406,475x)
         .                   }
15,560,020 ( 0.15%)          next_character = input.get();
252,916,362 ( 2.45%)  => ???:0x000000000010c540 (3,890,005x)
         .               }
         .           
         .               // output special eof character
         7 ( 0.00%)      bit_output.output_n_bits(EOF_CODEWORD, codeword_size);
     1,098 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (1x)
         .           
         .               // after we've encoded, we either have 
         .               // no current block (case 0)
         .               // we have a current block that is a single character (case 1)
         .               // otherwise we have a current block > 1 byte (default)
         8 ( 0.00%)      switch (current_string_seen.length()){
         8 ( 0.00%)  => /usr/include/c++/9/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const (1x)
         .               case 0:
         .                   bit_output.output_bit(false);
         .                   bit_output.output_bit(false);
         .                   break;
         .               case 1:
         .                   bit_output.output_bit(false);
         .                   bit_output.output_bit(true);
         .                   bit_output.output_n_bits((int) current_string_seen[0], CHAR_BIT);
         .                   break;
         .               default:
         4 ( 0.00%)          bit_output.output_bit(true);
        32 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_bit(bool) (1x)
         4 ( 0.00%)          bit_output.output_bit(true);
       106 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_bit(bool) (1x)
         .           
         7 ( 0.00%)          int code = dictionary[current_string_seen];
       697 ( 0.00%)  => /usr/include/c++/9/bits/unordered_map.h:std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (1x)
         6 ( 0.00%)          bit_output.output_n_bits(code, codeword_size);
     1,100 ( 0.00%)  => /home/ccorontzos/thesis/lzwcpp/bitio.cc:BitOutput::output_n_bits(int, int) (1x)
         1 ( 0.00%)          break;
         .               }
         8 ( 0.00%)  }
         .           
         .           
         .           
         .           void LZW::decode(std::istream& input, std::ostream& output){
         .           
         .               // starting dictionary
         .               std::unordered_map<codeword_type, std::string> dictionary;
         .               for (int i = 0; i < STARTING_DICT_SIZE; ++i){
-- line 104 ----------------------------------------
-- line 147 ----------------------------------------
         .                   break;
         .               case 3:
         .                   int last_codeword = bit_input.read_n_bits(code_size);
         .                   auto decoded_codeword = dictionary.find(last_codeword);
         .                   output << decoded_codeword->second; 
         .                   break;
         .               }
         .           
        21 ( 0.00%)  }
       120 ( 0.00%)  => lzw.cc:__static_initialization_and_destruction_0(int, int) (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 434 ----------------------------------------
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *
         .                  *  Calls @c a.allocate(n)
         .                 */
         .                 _GLIBCXX_NODISCARD static pointer
 2,440,524 ( 0.02%)        allocate(allocator_type& __a, size_type __n)
 3,254,032 ( 0.03%)        { return __a.allocate(__n); }
       882 ( 0.00%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<char>::allocate(unsigned long, void const*) (7x)
         .           
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *  @param  __hint Aid to locality.
         .                  *  @return Memory of suitable size and alignment for @a n objects
         .                  *          of type @c value_type
-- line 451 ----------------------------------------
-- line 460 ----------------------------------------
         .                  *  @brief  Deallocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the memory to deallocate.
         .                  *  @param  __n  The number of objects space was allocated for.
         .                  *
         .                  *  Calls <tt> a.deallocate(p, n) </tt>
         .                 */
         .                 static void
 2,847,271 ( 0.03%)        deallocate(allocator_type& __a, pointer __p, size_type __n)
 3,660,777 ( 0.04%)        { __a.deallocate(__p, __n); }
     1,821 ( 0.00%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long) (16x)
         .           
         .                 /**
         .                  *  @brief  Construct an object of type @a _Up
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to memory of suitable size and alignment for Tp
         .                  *  @param  __args Constructor arguments.
         .                  *
         .                  *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
         .                 */
         .                 template<typename _Up, typename... _Args>
         .           	static void
 4,474,041 ( 0.04%)  	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 9,761,544 ( 0.09%)  	{ __a.construct(__p, std::forward<_Args>(__args)...); }
282,715,858 ( 2.74%)  => /usr/include/c++/9/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>, std::tuple<> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&&, std::tuple<>&&) (406,731x)
 2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (406,731x)
 2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&> >::type&) (406,731x)
 2,847,117 ( 0.03%)  => /usr/include/c++/9/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (406,731x)
         .           
         .                 /**
         .                  *  @brief  Destroy an object of type @a _Up
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the object to destroy
         .                  *
         .                  *  Calls @c __a.destroy(__p).
         .                 */
         .                 template<typename _Up>
         .           	static void
 2,440,386 ( 0.02%)  	destroy(allocator_type& __a, _Up* __p)
         .           	noexcept(noexcept(__a.destroy(__p)))
 3,253,848 ( 0.03%)  	{ __a.destroy(__p); }
53,281,945 ( 0.52%)  => /usr/include/c++/9/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> >::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>*) (406,731x)
         .           
         .                 /**
         .                  *  @brief  The maximum supported allocation size
         .                  *  @param  __a  An allocator.
         .                  *  @return @c __a.max_size()
         .                 */
         .                 static size_type
21,482,465 ( 0.21%)        max_size(const allocator_type& __a) noexcept
21,482,465 ( 0.21%)        { return __a.max_size(); }
30,075,451 ( 0.29%)  => /usr/include/c++/9/ext/new_allocator.h:__gnu_cxx::new_allocator<char>::max_size() const (4,296,493x)
         .           
         .                 /**
         .                  *  @brief  Obtain an allocator to use when copying a container.
         .                  *  @param  __rhs  An allocator.
         .                  *  @return @c __rhs
         .                 */
         .                 static allocator_type
25,780,422 ( 0.25%)        select_on_container_copy_construction(const allocator_type& __rhs)
34,373,896 ( 0.33%)        { return __rhs; }
17,186,948 ( 0.17%)  => ???:0x000000000010c450 (4,296,737x)
         .               };
         .           
         .           
         .             template<typename _Alloc>
         .               inline void
         .               __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
         .               { __one = __two; }
         .           
-- line 522 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_iterator_base_funcs.h
--------------------------------------------------------------------------------
Ir                  

-- line 90 ----------------------------------------
         .           	  ++__n;
         .           	}
         .                 return __n;
         .               }
         .           
         .             template<typename _RandomAccessIterator>
         .               inline _GLIBCXX14_CONSTEXPR
         .               typename iterator_traits<_RandomAccessIterator>::difference_type
21,483,705 ( 0.21%)      __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
         .                          random_access_iterator_tag)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_RandomAccessIteratorConcept<
         .           				  _RandomAccessIterator>)
 8,593,482 ( 0.08%)        return __last - __first;
 8,593,482 ( 0.08%)      }
         .           
         .           #if _GLIBCXX_USE_CXX11_ABI
         .             // Forward declaration because of the qualified call in distance.
         .             template<typename _Tp>
         .               ptrdiff_t
         .               __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
         .           	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
         .           	       input_iterator_tag);
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
         .              *  n may be negative.
         .              *
         .              *  For random access iterators, this uses their @c + and @c - operations
         .              *  and are constant time.  For other %iterator classes they are linear time.
         .             */
         .             template<typename _InputIterator>
         .               inline _GLIBCXX17_CONSTEXPR
         .               typename iterator_traits<_InputIterator>::difference_type
25,780,446 ( 0.25%)      distance(_InputIterator __first, _InputIterator __last)
         .               {
         .                 // concept requirements -- taken care of in __distance
21,483,705 ( 0.21%)        return std::__distance(__first, __last,
        36 ( 0.00%)  => /usr/include/c++/9/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) (4x)
12,890,223 ( 0.12%)  			     std::__iterator_category(__first));
        24 ( 0.00%)  => /usr/include/c++/9/bits/stl_iterator_base_types.h:std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&) (4x)
 8,593,482 ( 0.08%)      }
         .           
         .             template<typename _InputIterator, typename _Distance>
         .               inline _GLIBCXX14_CONSTEXPR void
         .               __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
         .                 __glibcxx_assert(__n >= 0);
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/hashtable.h
--------------------------------------------------------------------------------
Ir                  

-- line 334 ----------------------------------------
         .                 // interesting in move semantic to leave hashtable with only 1 buckets
         .                 // which is not allocated so that we can have those operations noexcept
         .                 // qualified.
         .                 // Note that we can't leave hashtable with 0 bucket without adding
         .                 // numerous checks in the code to avoid 0 modulus.
         .                 __bucket_type		_M_single_bucket	= nullptr;
         .           
         .                 bool
        85 ( 0.00%)        _M_uses_single_bucket(__bucket_type* __bkts) const
       153 ( 0.00%)        { return __builtin_expect(__bkts == &_M_single_bucket, false); }
         .           
         .                 bool
         .                 _M_uses_single_bucket() const
         .                 { return _M_uses_single_bucket(_M_buckets); }
         .           
         .                 __hashtable_alloc&
         .                 _M_base_alloc() { return *this; }
         .           
         .                 __bucket_type*
        96 ( 0.00%)        _M_allocate_buckets(size_type __n)
         .                 {
        80 ( 0.00%)  	if (__builtin_expect(__n == 1, false))
         .           	  {
         .           	    _M_single_bucket = nullptr;
         .           	    return &_M_single_bucket;
         .           	  }
         .           
        96 ( 0.00%)  	return __hashtable_alloc::_M_allocate_buckets(__n);
11,241,775 ( 0.11%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_allocate_buckets(unsigned long) (16x)
        32 ( 0.00%)        }
         .           
         .                 void
       119 ( 0.00%)        _M_deallocate_buckets(__bucket_type* __bkts, size_type __n)
         .                 {
       119 ( 0.00%)  	if (_M_uses_single_bucket(__bkts))
       238 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const (17x)
         1 ( 0.00%)  	  return;
         .           
       112 ( 0.00%)  	__hashtable_alloc::_M_deallocate_buckets(__bkts, __n);
     4,013 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (16x)
        34 ( 0.00%)        }
         .           
         .                 void
        85 ( 0.00%)        _M_deallocate_buckets()
       187 ( 0.00%)        { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
     4,636 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (17x)
         .           
         .                 // Gets bucket begin, deals with the fact that non-empty buckets contain
         .                 // their before begin node.
         .                 __node_type*
         .                 _M_bucket_begin(size_type __bkt) const;
         .           
         .                 __node_type*
        68 ( 0.00%)        _M_begin() const
        68 ( 0.00%)        { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
         .           
         .                 // Assign *this using another _Hashtable instance. Either elements
         .                 // are copy or move depends on the _NodeGenerator.
         .                 template<typename _Ht, typename _NodeGenerator>
         .           	void
         .           	_M_assign_elements(_Ht&&, const _NodeGenerator&);
         .           
         .                 template<typename _NodeGenerator>
-- line 392 ----------------------------------------
-- line 430 ----------------------------------------
         .           	noexcept(_S_nothrow_move());
         .           
         .                 _Hashtable(_Hashtable&&, __node_alloc_type&&,
         .           		 false_type /* alloc always equal */);
         .           
         .           
         .               public:
         .                 // Constructor, destructor, assignment, swap
        30 ( 0.00%)        _Hashtable() = default;
        40 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_Hashtable_alloc() (1x)
        13 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) (1x)
         9 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (1x)
         .                 _Hashtable(size_type __bucket_hint,
         .           		 const _H1&, const _H2&, const _Hash&,
         .           		 const _Equal&, const _ExtractKey&,
         .           		 const allocator_type&);
         .           
         .                 template<typename _InputIterator>
         .           	_Hashtable(_InputIterator __first, _InputIterator __last,
         .           		   size_type __bucket_hint,
-- line 446 ----------------------------------------
-- line 536 ----------------------------------------
         .                 begin() noexcept
         .                 { return iterator(_M_begin()); }
         .           
         .                 const_iterator
         .                 begin() const noexcept
         .                 { return const_iterator(_M_begin()); }
         .           
         .                 iterator
 3,251,800 ( 0.03%)        end() noexcept
 4,064,750 ( 0.04%)        { return iterator(nullptr); }
10,161,875 ( 0.10%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,475x)
         .           
         .                 const_iterator
         8 ( 0.00%)        end() const noexcept
        10 ( 0.00%)        { return const_iterator(nullptr); }
        25 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (1x)
         .           
         .                 const_iterator
         .                 cbegin() const noexcept
         .                 { return const_iterator(_M_begin()); }
         .           
         .                 const_iterator
         .                 cend() const noexcept
         .                 { return const_iterator(nullptr); }
-- line 557 ----------------------------------------
-- line 663 ----------------------------------------
         .                 equal_range(const key_type& __k);
         .           
         .                 std::pair<const_iterator, const_iterator>
         .                 equal_range(const key_type& __k) const;
         .           
         .               protected:
         .                 // Bucket index computation helpers.
         .                 size_type
14,543,664 ( 0.14%)        _M_bucket_index(__node_type* __n) const noexcept
21,815,496 ( 0.21%)        { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
116,349,312 ( 1.13%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const*, unsigned long) const (2,423,944x)
         .           
         .                 size_type
32,922,596 ( 0.32%)        _M_bucket_index(const key_type& __k, __hash_code __c) const
42,329,052 ( 0.41%)        { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }
225,754,944 ( 2.19%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const (4,703,228x)
         .           
         .                 // Find and insert helper functions and types
         .                 // Find the node before the one matching the criteria.
         .                 __node_base*
         .                 _M_find_before_node(size_type, const key_type&, __hash_code) const;
         .           
         .                 __node_type*
37,625,696 ( 0.36%)        _M_find_node(size_type __bkt, const key_type& __key,
         .           		   __hash_code __c) const
         .                 {
32,922,484 ( 0.32%)  	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
1,841,839,253 (17.85%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (4,703,212x)
 9,406,424 ( 0.09%)  	if (__before_n)
11,670,018 ( 0.11%)  	  return static_cast<__node_type*>(__before_n->_M_nxt);
   813,206 ( 0.01%)  	return nullptr;
 9,406,424 ( 0.09%)        }
         .           
         .                 // Insert a node at the beginning of a bucket.
         .                 void
         .                 _M_insert_bucket_begin(size_type, __node_type*);
         .           
         .                 // Remove the bucket first node
         .                 void
         .                 _M_remove_bucket_begin(size_type __bkt, __node_type* __next_n,
-- line 699 ----------------------------------------
-- line 1375 ----------------------------------------
         .           	  __ht.clear();
         .           	}
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         5 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               ~_Hashtable() noexcept
         .               {
         3 ( 0.00%)        clear();
185,070,015 ( 1.79%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() (1x)
         3 ( 0.00%)        _M_deallocate_buckets();
       279 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() (1x)
         6 ( 0.00%)      }
        40 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::~_Hashtable_alloc() (1x)
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 1397 ----------------------------------------
-- line 1439 ----------------------------------------
         .           	  = &__x._M_before_begin;
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
35,010,045 ( 0.34%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               find(const key_type& __k)
         .               -> iterator
         .               {
23,340,030 ( 0.23%)        __hash_code __code = this->_M_hash_code(__k);
576,083,158 ( 5.58%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (3,890,005x)
27,230,035 ( 0.26%)        std::size_t __n = _M_bucket_index(__k, __code);
248,960,320 ( 2.41%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (3,890,005x)
27,230,035 ( 0.26%)        __node_type* __p = _M_find_node(__n, __k, __code);
1,687,148,542 (16.35%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (3,890,005x)
34,197,095 ( 0.33%)        return __p ? iterator(__p) : end();
87,088,250 ( 0.84%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (3,483,530x)
17,478,425 ( 0.17%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() (406,475x)
19,450,025 ( 0.19%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 1464 ----------------------------------------
-- line 1559 ----------------------------------------
         .           
         .             // Find the node whose key compares equal to k in the bucket n.
         .             // Return nullptr if no node is found.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
37,625,696 ( 0.36%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_find_before_node(size_type __n, const key_type& __k,
         .           			__hash_code __code) const
         .               -> __node_base*
         .               {
32,922,484 ( 0.32%)        __node_base* __prev_p = _M_buckets[__n];
 9,406,424 ( 0.09%)        if (!__prev_p)
   801,824 ( 0.01%)  	return nullptr;
         .           
12,906,900 ( 0.13%)        for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
 7,244,540 ( 0.07%)  	   __p = __p->_M_next())
14,489,080 ( 0.14%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (1,811,135x)
         .           	{
50,718,615 ( 0.49%)  	  if (this->_M_equals(__k, __code, __p))
1,458,017,241 (14.13%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const (6,113,435x)
 7,780,012 ( 0.08%)  	    return __prev_p;
         .           
38,210,477 ( 0.37%)  	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
140,075,334 ( 1.36%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const (2,223,418x)
17,787,344 ( 0.17%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (2,223,418x)
   412,294 ( 0.00%)  	    break;
 3,622,270 ( 0.04%)  	  __prev_p = __p;
         .           	}
   412,294 ( 0.00%)        return nullptr;
 9,406,424 ( 0.09%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
 3,660,579 ( 0.04%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_insert_bucket_begin(size_type __bkt, __node_type* __node)
         .               {
 3,253,848 ( 0.03%)        if (_M_buckets[__bkt])
         .           	{
         .           	  // Bucket is not empty, we just need to insert the new node
         .           	  // after the bucket before begin.
 1,855,836 ( 0.02%)  	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 1,649,632 ( 0.02%)  	  _M_buckets[__bkt]->_M_nxt = __node;
         .           	}
         .                 else
         .           	{
         .           	  // The bucket is empty, the new node is inserted at the
         .           	  // beginning of the singly-linked list and the bucket will
         .           	  // contain _M_before_begin pointer.
   802,108 ( 0.01%)  	  __node->_M_nxt = _M_before_begin._M_nxt;
   601,581 ( 0.01%)  	  _M_before_begin._M_nxt = __node;
   802,108 ( 0.01%)  	  if (__node->_M_nxt)
         .           	    // We must update former begin bucket that is pointing to
         .           	    // _M_before_begin.
 2,807,364 ( 0.03%)  	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
12,633,138 ( 0.12%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) const (200,526x)
 1,604,208 ( 0.02%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (200,526x)
 1,604,216 ( 0.02%)  	  _M_buckets[__bkt] = &_M_before_begin;
         .           	}
 2,646,590 ( 0.03%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 1627 ----------------------------------------
-- line 1725 ----------------------------------------
         .           	return _M_insert_multi_node(__hint._M_cur, __code, __node);
         .                 }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
 5,287,503 ( 0.05%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_insert_unique_node(size_type __bkt, __hash_code __code,
         .           			  __node_type* __node, size_type __n_elt)
         .               -> iterator
         .               {
 2,847,117 ( 0.03%)        const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 3,253,848 ( 0.03%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_M_state() const (406,731x)
 5,287,503 ( 0.05%)        std::pair<bool, std::size_t> __do_rehash
 4,070,797 ( 0.04%)  => ???:0x000000000010c560 (406,731x)
         .           	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
         .           					  __n_elt);
         .           
         .                 __try
         .           	{
 1,220,193 ( 0.01%)  	  if (__do_rehash.first)
         .           	    {
        96 ( 0.00%)  	      _M_rehash(__do_rehash.second, __saved_state);
82,839,048 ( 0.80%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&) (16x)
       272 ( 0.00%)  	      __bkt = _M_bucket_index(this->_M_extract()(__node->_M_v()), __code);
     1,024 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const (16x)
       608 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >::_M_v() (16x)
       592 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>&) const (16x)
       272 ( 0.00%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() (16x)
         .           	    }
         .           
 2,440,386 ( 0.02%)  	  this->_M_store_code(__node, __code);
 4,880,772 ( 0.05%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*, unsigned long) const (406,731x)
         .           
         .           	  // Always insert at the beginning of the bucket.
 2,440,386 ( 0.02%)  	  _M_insert_bucket_begin(__bkt, __node);
33,921,208 ( 0.33%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
 2,033,655 ( 0.02%)  	  ++_M_element_count;
 2,440,386 ( 0.02%)  	  return iterator(__node);
10,168,275 ( 0.10%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (406,731x)
         .           	}
         .                 __catch(...)
         .           	{
         .           	  this->_M_deallocate_node(__node);
         .           	  __throw_exception_again;
         .           	}
 2,847,117 ( 0.03%)      }
         .           
         .             // Insert node, in bucket bkt if no rehash (assumes no element with its key
         .             // already present). Take ownership of the node, deallocate it on exception.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               auto
-- line 1772 ----------------------------------------
-- line 2051 ----------------------------------------
         .                 return iterator(__n);
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         5 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               clear() noexcept
         .               {
         8 ( 0.00%)        this->_M_deallocate_nodes(_M_begin());
179,368,384 ( 1.74%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>*) (1x)
         8 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const (1x)
         8 ( 0.00%)        __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
 5,701,595 ( 0.06%)  => ???:0x000000000010c440 (1x)
         2 ( 0.00%)        _M_element_count = 0;
         2 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
         3 ( 0.00%)      }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
         .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
-- line 2075 ----------------------------------------
-- line 2088 ----------------------------------------
         .           	_M_rehash_policy._M_reset(__saved_state);
         .               }
         .           
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
       176 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_rehash(size_type __n, const __rehash_state& __state)
         .               {
         .                 __try
         .           	{
        80 ( 0.00%)  	  _M_rehash_aux(__n, __unique_keys());
82,838,664 ( 0.80%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) (16x)
         .           	}
         .                 __catch(...)
         .           	{
         .           	  // A failure here means that buckets allocation failed.  We only
         .           	  // have to restore hash policy previous state.
         .           	  _M_rehash_policy._M_reset(__state);
         .           	  __throw_exception_again;
         .           	}
       128 ( 0.00%)      }
         .           
         .             // Rehash when there is no equivalent elements.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
        96 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         .           	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
         .               _M_rehash_aux(size_type __n, std::true_type)
         .               {
        96 ( 0.00%)        __bucket_type* __new_buckets = _M_allocate_buckets(__n);
11,242,079 ( 0.11%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long) (16x)
        64 ( 0.00%)        __node_type* __p = _M_begin();
       128 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const (16x)
        32 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
        16 ( 0.00%)        std::size_t __bbegin_bkt = 0;
 2,075,645 ( 0.02%)        while (__p)
         .           	{
 2,767,484 ( 0.03%)  	  __node_type* __next = __p->_M_next();
 5,534,968 ( 0.05%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true>::_M_next() const (691,871x)
 4,843,097 ( 0.05%)  	  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
33,209,808 ( 0.32%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, true> const*, unsigned long) const (691,871x)
 4,843,097 ( 0.05%)  	  if (!__new_buckets[__bkt])
         .           	    {
 2,185,172 ( 0.02%)  	      __p->_M_nxt = _M_before_begin._M_nxt;
 1,638,879 ( 0.02%)  	      _M_before_begin._M_nxt = __p;
 3,824,051 ( 0.04%)  	      __new_buckets[__bkt] = &_M_before_begin;
 2,185,172 ( 0.02%)  	      if (__p->_M_nxt)
 3,277,668 ( 0.03%)  		__new_buckets[__bbegin_bkt] = __p;
 1,638,879 ( 0.02%)  	      __bbegin_bkt = __bkt;
         .           	    }
         .           	  else
         .           	    {
 1,164,624 ( 0.01%)  	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 1,019,046 ( 0.01%)  	      __new_buckets[__bkt]->_M_nxt = __p;
         .           	    }
 1,383,742 ( 0.01%)  	  __p = __next;
         .           	}
         .           
        48 ( 0.00%)        _M_deallocate_buckets();
     4,629 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() (16x)
        48 ( 0.00%)        _M_bucket_count = __n;
        48 ( 0.00%)        _M_buckets = __new_buckets;
        48 ( 0.00%)      }
         .           
         .             // Rehash when there can be equivalent elements, preserve their relative
         .             // order.
         .             template<typename _Key, typename _Value,
         .           	   typename _Alloc, typename _ExtractKey, typename _Equal,
         .           	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
         .           	   typename _Traits>
         .               void
-- line 2159 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_function.h
--------------------------------------------------------------------------------
Ir                  

-- line 347 ----------------------------------------
         .           #endif
         .           
         .             /// One of the @link comparison_functors comparison functors@endlink.
         .             template<typename _Tp>
         .               struct equal_to : public binary_function<_Tp, _Tp, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR
         .                 bool
27,230,042 ( 0.26%)        operator()(const _Tp& __x, const _Tp& __y) const
27,230,042 ( 0.26%)        { return __x == __y; }
562,715,240 ( 5.45%)  => /usr/include/c++/9/bits/basic_string.h:__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,006x)
         .               };
         .           
         .             /// One of the @link comparison_functors comparison functors@endlink.
         .             template<typename _Tp>
         .               struct not_equal_to : public binary_function<_Tp, _Tp, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR
         .                 bool
-- line 364 ----------------------------------------
-- line 425 ----------------------------------------
         .                 }
         .               };
         .           
         .             // Partial specialization of std::less for pointers.
         .             template<typename _Tp>
         .               struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR bool
 2,438,850 ( 0.02%)        operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
         .                 {
         .           #if __cplusplus >= 201402L
         .           #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
         .           	if (__builtin_is_constant_evaluated())
         .           #else
         .           	if (__builtin_constant_p(__x < __y))
         .           #endif
         .           	  return __x < __y;
         .           #endif
 1,625,900 ( 0.02%)  	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
   812,950 ( 0.01%)        }
         .               };
         .           
         .             // Partial specialization of std::greater_equal for pointers.
         .             template<typename _Tp>
         .               struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
         .               {
         .                 _GLIBCXX14_CONSTEXPR bool
         .                 operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
-- line 452 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/char_traits.h
--------------------------------------------------------------------------------
Ir                   

-- line 228 ----------------------------------------
          .              */
          .             template<typename _CharT>
          .               static _GLIBCXX_ALWAYS_INLINE constexpr bool
          .               __constant_string_p(const _CharT* __s)
          .               {
          .           #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
          .                 (void) __s;
          .                 // In constexpr contexts all strings should be constant.
    406,481 ( 0.00%)        return __builtin_is_constant_evaluated();
          .           #else
          .                 while (__builtin_constant_p(*__s) && *__s)
          .           	__s++;
          .                 return __builtin_constant_p(*__s);
          .           #endif
          .               }
          .           
          .             /**
-- line 244 ----------------------------------------
-- line 291 ----------------------------------------
          .               {
          .                 typedef char              char_type;
          .                 typedef int               int_type;
          .                 typedef streampos         pos_type;
          .                 typedef streamoff         off_type;
          .                 typedef mbstate_t         state_type;
          .           
          .                 static _GLIBCXX17_CONSTEXPR void
 83,902,420 ( 0.81%)        assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
117,463,388 ( 1.14%)        { __c1 = __c2; }
          .           
          .                 static _GLIBCXX_CONSTEXPR bool
          .                 eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
          .                 { return __c1 == __c2; }
          .           
          .                 static _GLIBCXX_CONSTEXPR bool
          .                 lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
          .                 {
          .           	// LWG 467.
          .           	return (static_cast<unsigned char>(__c1)
          .           		< static_cast<unsigned char>(__c2));
          .                 }
          .           
          .                 static _GLIBCXX17_CONSTEXPR int
 27,230,042 ( 0.26%)        compare(const char_type* __s1, const char_type* __s2, size_t __n)
          .                 {
  7,780,012 ( 0.08%)  	if (__n == 0)
          .           	  return 0;
          .           #if __cplusplus >= 201703L
  7,780,012 ( 0.08%)  	if (__builtin_constant_p(__n)
          .           	    && __constant_char_array_p(__s1, __n)
  3,890,006 ( 0.04%)  	    && __constant_char_array_p(__s2, __n))
          .           	  {
          .           	    for (size_t __i = 0; __i < __n; ++__i)
          .           	      if (lt(__s1[__i], __s2[__i]))
          .           		return -1;
          .           	      else if (lt(__s2[__i], __s1[__i]))
          .           		return 1;
          .           	    return 0;
          .           	  }
          .           #endif
 27,230,042 ( 0.26%)  	return __builtin_memcmp(__s1, __s2, __n);
 88,134,508 ( 0.85%)  => ???:0x000000000010c410 (3,890,006x)
  7,780,012 ( 0.08%)        }
          .           
          .                 static _GLIBCXX17_CONSTEXPR size_t
  2,845,367 ( 0.03%)        length(const char_type* __s)
          .                 {
          .           #if __cplusplus >= 201703L
    812,962 ( 0.01%)  	if (__constant_string_p(__s))
          .           	  return __gnu_cxx::char_traits<char_type>::length(__s);
          .           #endif
  4,064,852 ( 0.04%)  	return __builtin_strlen(__s);
    812,962 ( 0.01%)        }
          .           
          .                 static _GLIBCXX17_CONSTEXPR const char_type*
          .                 find(const char_type* __s, size_t __n, const char_type& __a)
          .                 {
          .           	if (__n == 0)
          .           	  return 0;
          .           #if __cplusplus >= 201703L
          .           	if (__builtin_constant_p(__n)
-- line 351 ----------------------------------------
-- line 360 ----------------------------------------
          .                 move(char_type* __s1, const char_type* __s2, size_t __n)
          .                 {
          .           	if (__n == 0)
          .           	  return __s1;
          .           	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
          .                 }
          .           
          .                 static char_type*
 48,769,483 ( 0.47%)        copy(char_type* __s1, const char_type* __s2, size_t __n)
          .                 {
 13,934,138 ( 0.14%)  	if (__n == 0)
    812,954 ( 0.01%)  	  return __s1;
 59,045,328 ( 0.57%)  	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
111,343,572 ( 1.08%)  => ???:0x000000000010c4a0 (6,560,592x)
 13,934,138 ( 0.14%)        }
          .           
          .                 static char_type*
          .                 assign(char_type* __s, size_t __n, char_type __a)
          .                 {
          .           	if (__n == 0)
          .           	  return __s;
          .           	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
          .                 }
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/functional_hash.h
--------------------------------------------------------------------------------
Ir                  

-- line 187 ----------------------------------------
         .             _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_3 unsigned)
         .           #endif
         .           
         .           #undef _Cxx_hashtable_define_trivial_hash
         .           
         .             struct _Hash_impl
         .             {
         .               static size_t
32,922,484 ( 0.32%)      hash(const void* __ptr, size_t __clength,
         .           	 size_t __seed = static_cast<size_t>(0xc70f6907UL))
37,625,696 ( 0.36%)      { return _Hash_bytes(__ptr, __clength, __seed); }
245,081,387 ( 2.38%)  => ???:0x000000000010c390 (4,703,212x)
         .           
         .               template<typename _Tp>
         .                 static size_t
         .                 hash(const _Tp& __val)
         .                 { return hash(&__val, sizeof(__val)); }
         .           
         .               template<typename _Tp>
         .                 static size_t
-- line 205 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/unordered_map.h
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .              *
         .              *  Base is _Hashtable, dispatched at compile time via template
         .              *  alias __umap_hashtable.
         .              */
         .             template<typename _Key, typename _Tp,
         .           	   typename _Hash = hash<_Key>,
         .           	   typename _Pred = equal_to<_Key>,
         .           	   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
        11 ( 0.00%)      class unordered_map
185,070,351 ( 1.79%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() (1x)
         .               {
         .                 typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;
         .                 _Hashtable _M_h;
         .           
         .               public:
         .                 // typedefs:
         .                 ///@{
         .                 /// Public typedefs.
-- line 110 ----------------------------------------
-- line 133 ----------------------------------------
         .           #if __cplusplus > 201402L
         .                 using node_type = typename _Hashtable::node_type;
         .                 using insert_return_type = typename _Hashtable::insert_return_type;
         .           #endif
         .           
         .                 //construct/destroy/copy
         .           
         .                 /// Default constructor.
        11 ( 0.00%)        unordered_map() = default;
        92 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() (1x)
         .           
         .                 /**
         .                  *  @brief  Default constructor creates no elements.
         .                  *  @param __n  Minimal initial number of buckets.
         .                  *  @param __hf  A hash functor.
         .                  *  @param __eql  A key equality functor.
         .                  *  @param __a  An allocator object.
         .                  */
-- line 149 ----------------------------------------
-- line 352 ----------------------------------------
         .                  *  Returns a read-only (constant) iterator that points one past the last
         .                  *  element in the %unordered_map.
         .                  */
         .                 const_iterator
         .                 end() const noexcept
         .                 { return _M_h.end(); }
         .           
         .                 const_iterator
         5 ( 0.00%)        cend() const noexcept
         5 ( 0.00%)        { return _M_h.end(); }
        43 ( 0.00%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() const (1x)
         .                 ///@}
         .           
         .                 // modifiers.
         .           
         .                 /**
         .                  *  @brief Attempts to build and insert a std::pair into the
         .                  *  %unordered_map.
         .                  *
-- line 369 ----------------------------------------
-- line 913 ----------------------------------------
         .                  *           found.
         .                  *
         .                  *  This function takes a key and tries to locate the element with which
         .                  *  the key matches.  If successful the function returns an iterator
         .                  *  pointing to the sought after element.  If unsuccessful it returns the
         .                  *  past-the-end ( @c end() ) iterator.
         .                  */
         .                 iterator
23,340,030 ( 0.23%)        find(const key_type& __x)
27,230,035 ( 0.26%)        { return _M_h.find(__x); }
2,783,215,960 (26.97%)  => /usr/include/c++/9/bits/hashtable.h:std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (3,890,005x)
         .           
         .                 const_iterator
         .                 find(const key_type& __x) const
         .                 { return _M_h.find(__x); }
         .                 ///@}
         .           
         .                 /**
         .                  *  @brief  Finds the number of elements.
-- line 930 ----------------------------------------
-- line 977 ----------------------------------------
         .                  *  Allows for easy lookup with the subscript ( @c [] )operator.  Returns
         .                  *  data associated with the key specified in subscript.  If the key does
         .                  *  not exist, a pair with that key is created using default values, which
         .                  *  is then returned.
         .                  *
         .                  *  Lookup requires constant time.
         .                  */
         .                 mapped_type&
 4,879,242 ( 0.05%)        operator[](const key_type& __k)
 5,692,449 ( 0.06%)        { return _M_h[__k]; }
1,169,861,327 (11.34%)  => /usr/include/c++/9/bits/hashtable_policy.h:std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (813,207x)
         .           
         .                 mapped_type&
         .                 operator[](key_type&& __k)
         .                 { return _M_h[std::move(__k)]; }
         .                 ///@}
         .           
         .                 ///@{
         .                 /**
-- line 994 ----------------------------------------

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
9,313,806,624 (90.26%)  events annotated

